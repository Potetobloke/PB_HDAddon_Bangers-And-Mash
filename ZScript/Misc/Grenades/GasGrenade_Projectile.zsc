//Big thanks to Agent_Ash/Jekyll Grim Payne, and Phantombeta for helping me out
// because I'm a doo doo head when it comes to coding anything

//GAS

class HD_PBGasEmit:HDPuff{
	default{
		obituary "%o smelled something really bad.";
		scale 0.75;gravity 0.05;alpha 0.285; //0.7
		hdpuff.fadeafter 12000;
		hdpuff.decel 0.96;
		hdpuff.fade 0.98; //0.96
		hdpuff.grow 0.043;
		hdpuff.minalpha 0.003;
		BounceCount 999;
		BounceFactor 20;
		Height 2;
		Radius 2;
		-NOCLIP
		+THRUACTORS
		+BOUNCEONFLOORS +BOUNCEONCEILINGS +BOUNCEONWALLS
		//renderstyle "add";
	}
	
	// For the UAS resperator support, integrated by Mohl
	service RespStatus;
	bool IsPlayerUsingRespirator(HDPlayerPawn ppp){
		// prematurely returns if ppp is not a player pointer, 
		// or if the service is not available. 
		if(!ppp || !respstatus)return false;
		// returns the status of the resperator. 
		return int(RespStatus.GetInt("IsWorn", objectArg:ppp));
	}
	
	override void postbeginplay(){
		HDActor.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		grow*=scale.x;
		vel.z+=startvelz;
		grav=getgravity();

		
		// Looks for a pointer to respstatus,
		// this does nothing if respstatus doesn't exist. 
		ServiceIterator i = ServiceIterator.Find("UaS_RespiratorStatus");
		while((respstatus = i.next()) && !respstatus){};
		
	}
	
	action void A_PoisonAoE (double aoeRadius, int damage, int duration
	, int period, name damageType) {
            BlockThingsIterator itr = BlockThingsIterator.Create(self,128);
            while (itr.next()) {
                let next = itr.thing;
				string Respirator = "UaS_Respirator";
				class<Inventory> rsp = Respirator;
                if (next.bKILLED)
                    continue;
				if (next.countinv("WornRadsuit"))
                    continue; 
				if (next.bNOBLOOD)
                    continue; 
				// here we check if the player is wearing a resperator. 
				if (next.countinv(rsp) && invoker.IsPlayerUsingRespirator(HDPlayerPawn(next)))
					continue;
					
				//if (next.countinv("UaS_Respirator") && invoker.IsPlayerUsingRespirator(HDPlayerPawn(next)))
				//	continue;
					
                double dist = Distance3D(next);
                if (dist > aoeRadius)
                    continue;
				if (!CheckSight (next, SF_IGNOREVISIBILITY | SF_IGNOREWATERBOUNDARY))
                continue;
                next.PoisonMobj(self, target, damage, duration, period, damageType);
		}
	}
	states{
	spawn:
		GAS1 AABB 1 
				A_ChangeVelocity(
					frandom(-0.1,0.1),frandom(-0.1,0.1),
					0.55,
					CVF_RELATIVE
				);
		GAS1 CDEEEFF 1 {
		A_PoisonAoE(32,30,20,frandom(29,33),"drowning");
		A_ChangeVelocity(
					frandom(-1,1),frandom(-1,1),
					0.21,
					CVF_RELATIVE
				);}
		GAS1 FGGG 1 {
		A_PoisonAoE(32,30,20,frandom(29,33),"drowning");
		A_ChangeVelocity(
					frandom(-3.9,3.9),frandom(-3.9,3.9),
					frandom(-1.9,1.9),
					CVF_RELATIVE
				);}
		GAS1 HHH 1 {
		A_PoisonAoE(64,30,20,frandom(29,33),"drowning");
		A_ChangeVelocity(
					frandom(-2.9,2.9),frandom(-2.9,2.9),
					frandom(-0.9,0.9),
					CVF_RELATIVE
				);}
	hurt1:
		GAS1 FFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJ 1 
		{A_PoisonAoE(128,12,10,frandom(29,33),"drowning");
		//		A_ChangeVelocity(
		//			frandom(-1.9,1.9),frandom(-1.5,1.5),
		//			frandom(-1.9,1.9),
		//			CVF_RELATIVE
		//		);
		
				A_ChangeVelocity(
					frandom(-0.9,0.9),frandom(-0.9,0.9),
					frandom(-0.9,0.9),
					CVF_RELATIVE
				);}
	hurtloop:
		GAS1 FFFFFFFFGGGGGGGGHHHHHHHHIIIIIIIIJJJJJJJJ 1 
		{A_PoisonAoE(128,8,10,frandom(29,33),"drowning");
		//		A_ChangeVelocity(
		//			frandom(-1.9,1.9),frandom(-1.5,1.5),
		//			frandom(-1.9,1.9),
		//			CVF_RELATIVE
		//		);
		
				A_ChangeVelocity(
					frandom(-0.2,0.2),frandom(-0.2,0.2),
					frandom(-0.2,0.2),
					CVF_RELATIVE
				);}
		loop;
	}
}

class HD_PBGasEmit2:HD_PBGasEmit{
	default{
		obituary "%o smelled something really bad.";
		scale 2.25;gravity 0.05;alpha 0.7;
		hdpuff.fadeafter 900;
		hdpuff.decel 0.96;
		hdpuff.fade 0.96;
		hdpuff.grow 0.01;
		hdpuff.minalpha 0.005;
	}
	states{
	spawn:
		GAS2 AAAAABBBBBCCCCCDDDDDEEEEEFFFFFGGGGGHHHHHIIIIIJJJJJKKKKKLLLLLMMMMMNNNNNOOOOOOPPPPPQQQQQRRRRRSSSSSTTTTT 1 A_PoisonAoE(64,1,2,0,"drowning");
	}
}

//GRENADE

class HDGasGrenadeRoller:HDFragGrenadeRoller{
	//int fuze;
	int gasamount;
	int gotkicked;
	default{
			bouncetype "doom";bouncesound "misc/fragknock";
		radius 2;height 2;damagetype "none";
		scale 0.35;
		obituary "%o was gassed by %k.";
		radiusdamagefactor 0.04;pushfactor 1.4;maxstepheight 2;
		mass 42;
	}
	
	override bool used(actor user){
		angle=user.angle;
		A_StartSound(bouncesound);
		if(hdplayerpawn(user)&&hdplayerpawn(user).incapacitated)A_ChangeVelocity(4,0,1,CVF_RELATIVE);
		else A_ChangeVelocity(12,0,4,CVF_RELATIVE);
		
		if(gasamount>=450&&gotkicked<=0)
		{gotkicked++;actor balls=spawn("HD_PBGasEmit",self.pos-(frandom(-4,4),0,frandom(-4,4)));
		A_StartSound("weapons/grenade/gas/end",CHAN_6,CHANF_OVERLAP,0.25
		,pitch:frandom(1.75,2.25));HDMobAI.Frighten(self,128);}
		return true;
	}
	
	states{
	
	spawn:
		GGR1 A 0 nodelay{
			HDMobAI.Frighten(self,512);
		}
	spawn2:
		#### AAA 2{
			if(abs(vel.z-keeprolling.z)>10)A_StartSound("misc/fragknock",CHAN_BODY);
			else if(floorz>=pos.z)A_StartSound("misc/fragroll");
			keeprolling=vel;
			if(abs(vel.x)<0.4 && abs(vel.y)<0.4) setstatelabel("death");
		}loop;
	bounce:
		---- A 0{
			bmissile=false;
			vel*=0.2;
		}goto spawn2;
	death:
		---- A 2{
			if(abs(vel.z-keeprolling.z)>3){
				A_StartSound("misc/fragknock",CHAN_BODY);
				keeprolling=vel;
			}
			if(abs(vel.x)>0.4 || abs(vel.y)>0.4) setstatelabel("spawn");
		}wait;
		
	nomore:
		---- A 0 A_StopSound(CHAN_WEAPON);
		/*---- A 1 {
		bsolid=false;bpushable=false;bmissile=false;bnointeraction=true;bshootable=false;
		}*/
		---- A 1 A_Fadeout(0.01);
		loop;
	}
	override void tick(){
	
		if(fuze>140){
			keeprolling=vel;
			hdactor.tick();
		}

		if(isfrozen())return;
		else if(bnointeraction){
			//nexttic
			if(CheckNoDelay()){
				if(tics>0)tics--;  
				while(!tics){
					if(!SetState(CurState.NextState)){
						return;
					}
				}
			}
			return;
		}else{
			fuze++;
			if(fuze>=140){
				gasamount++;
			if(gasamount==1){A_StartSound("weapons/grenade/gas/start",CHAN_7,CHANF_OVERLAP,0.95);}
			if(gasamount>=1&&gasamount<=451){actor xpl=spawn("HD_PBGasEmit",self.pos-(frandom(-4,4),0,frandom(-4,4)));
				A_StartSound("weapons/grenade/gas/end",CHAN_6,CHANF_OVERLAP,frandom(0.5,0.85)
				,pitch:frandom(0.75,1.25),starttime:frandom(0,3));HDMobAI.Frighten(self,1024);}
			
			if(gasamount>=1&&gasamount<=201){
				A_Recoil(frandom(-0.95,0.1));A_SetAngle(angle+frandom(-45,45),SPF_INTERPOLATE);}
				
				if(CheckNoDelay()){
					if(tics>0)tics--;  
					while(!tics){
						if(!SetState(CurState.NextState)){
							return;
						}
					}
				}
				return;
			}else hdactor.tick();
		}
	}
}

class HDGasGrenadeThrown:HDFragGrenade{

	int gasamount;
	
	default{
		+ROLLSPRITE
		+ROLLCENTER
		scale 0.35;
		obituary "%o smelled something really bad.";
		hdfraggrenade.rollertype "HDGasGrenadeRoller";
		mass 42;
	}
	
	override void tick(){ //not redefining this causes a crash
		ClearInterpolation();
		if(isfrozen())return;
		if(!bmissile){
			hdactor.tick();return;
		}else if(fuze<140){
			fuze++;
			keeprolling=vel;
			hdactor.tick(); //this took me a week to figure out
							//because super.tick crashes the game
		}else{
			if(inthesky){
				A_SpawnChunksFrags();
				destroy();return;
			}
			/*let tgr=HDGasGrenadeRoller(spawn(rollertype,pos,ALLOW_REPLACE));
			tgr.target=self.target;tgr.master=self.master;tgr.vel=self.vel;
			tgr.fuze=fuze;
			destroy();return;*/
			
			keeprolling=vel;
			hdactor.tick();
			
			gasamount++;
			if(gasamount==1){A_StartSound("weapons/grenade/gas/start",CHAN_7,CHANF_OVERLAP,0.95);}
			if(gasamount>=1&&gasamount<=451){actor xpl=spawn("HD_PBGasEmit",self.pos-(frandom(-4,4),0,frandom(-4,4)));
				A_StartSound("weapons/grenade/gas/end",CHAN_6,CHANF_OVERLAP,frandom(0.5,0.85)
				,pitch:frandom(0.75,1.25),starttime:frandom(0,3));HDMobAI.Frighten(self,1024);}
			if(gasamount>=1&&gasamount<=201){
				A_Recoil(-0.005);A_SetAngle(angle+1,SPF_INTERPOLATE);}
		}
	}
	
	states
	{
	spawn:
		GGR3 ABCDEFGH 2 A_SetRoll(frandom(-15.5, 15.5));
		loop;
		
	death:
		TNT1 A 2{
			bmissile=false;
			let tgr=HDGasGrenadeRoller(spawn(rollertype,self.pos,ALLOW_REPLACE));
			if(!tgr)return;
			tgr.target=self.target;tgr.master=self.master;
			tgr.fuze=self.fuze;
			tgr.gasamount=self.gasamount;
			tgr.vel=self.keeprolling;
			tgr.keeprolling=self.keeprolling;
			tgr.A_StartSound("misc/fragknock",CHAN_BODY);
			HDMobAI.Frighten(tgr,512);
		}stop;
	}
}
