// ------------------------------------------------------------
// this shit is supposed to be mounted on vehicles
// ------------------------------------------------------------

class HDFortuneRailgun:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"

		+hdweapon.hinderlegs
		weapon.selectionorder 91;
		weapon.slotnumber 7;
		weapon.slotpriority 1.1;
		weapon.kickback 200;
		weapon.bobrangex 1.2;
		weapon.bobrangey 1.7;
		weapon.bobspeed 1.8;
		hdweapon.barrelsize 55,3.5,7;
		scale 0.725;
		inventory.pickupmessage "You got the railgun!";
		obituary "%o's misfortune lead to them getting killed by %k.";
		tag "$TAG_RAILGUN";
		hdweapon.refid HDLD_PWRAILGUN;
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(RLGG_HEAT,1);
		
		if (weaponstatus[RLGG_CHARGE]>100)
		{weaponstatus[RLGG_CHARGE]=100;}
	}
	override void postbeginplay(){
		super.postbeginplay();
		}
	override double gunmass(){
		return 21;
	}
	override double weaponbulk(){
		return 285;
	}
	override string,double getpickupsprite(){return "RLGPZ0",0.7;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			//sb.drawnum(hpl.countinv("HDCGM25_WEP"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		//if(hdw.weaponstatus[RLGG_CHAMBER]>0)sb.drawwepdot(-16,-10,(5,3));
		
		for(int i=clamp(hdw.weaponstatus[RLGG_CHAMBER],0,4);i>0;i--){
			sb.drawrect(-15,-14+i*2,2,1);
		}
		
		sb.drawwepnum(hdw.weaponstatus[RLGG_TIMER],128);
		
		sb.DrawNum(min(hdw.weaponstatus[RLGG_CHARGE],100), -24, -16, 
		sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
		sb.drawstring(
			sb.pnewsmallfont,"%",
			(-18, -16.5),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_RED,scale:(0.5,0.5)
		);
	
		int railammo=hpl.countinv("HD8mmElectroMagnetic");
			sb.drawimage("RLGSZ0",(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,alpha:railammo?1:0.6,scale:(1,1));
			sb.drawnum(railammo,-46,-8,sb.DI_SCREEN_CENTER_BOTTOM);
	}
	
	override void DropOneAmmo(int amt){
		if(owner){
			owner.A_DropInventory("HD8mmElectroMagnetic",12);
		}
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		int scaledyoffset=36;
	
		vector2 bobb=bob*2;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(1.6,2)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"backsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:(2,1)
		);
		if(scopeview){
			name ctex="HDXCAM_TB";
			
			bool chm=hdw.weaponstatus[RLGG_CHAMBER];
			//bool chrg=hdw.weaponstatus[RLGG_CHARGE];

			texman.setcameratotexture(hpc,ctex,3);
			sb.drawimage(
				ctex,(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:1.,scale:((0.25/1.2),0.25)
			);
			
			sb.drawimage(
				"tbwindow",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(1,1)
			);
			
			bobb*=3.7;
			double dotoff=max(abs(bobb.x),abs(bobb.y));
			if(dotoff<40)sb.drawimage(
				"redpxl",(0,scaledyoffset)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:(chm<1)?0.4:1.-dotoff*0.02,scale:(1.5,1.5)
			);
			
			if(dotoff<40)sb.drawimage(
				"RLG_RET",(0,scaledyoffset)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:0.2+(hdw.weaponstatus[RLGG_TIMER]*0.025)-dotoff*0.07,scale:(1.5,1.5)
			);
			
			/*if(dotoff<40)sb.drawimage(
				"RLG_RET",(0,scaledyoffset)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				alpha:(hdw.weaponstatus[RLGG_CHARGE]<100)?0.2:1.-dotoff*0.05,scale:(1.5,1.5)
			);*/
			
			sb.drawnum(min(hdw.weaponstatus[RLGG_CHARGE],100),
				24+bob.x,12+bob.y,sb.DI_SCREEN_CENTER,Font.CR_RED
				,0.4
			);
			}
		}
		
	static void Spark(actor caller,int sparks=1,double sparkheight=10){
		actor a;vector3 spot;
		vector3 origin=caller.pos+(0,0,sparkheight);
		double spp;double spa;
		for(int i=0;i<sparks;i++){
			spp=caller.pitch+frandom(-20,20);
			spa=caller.angle+frandom(-20,20);
			spot=random(32,57)*(cos(spp)*cos(spa),cos(spp)*sin(spa),-sin(spp));
			a=spawn("BeamSpotFlashLight",origin+spot,ALLOW_REPLACE);
			a.vel+=caller.vel*0.9-spot*0.03;
		}
	}
		
	static void ThunderZap(
		actor caller,
		double zoffset=32,
		bool alt=false
	){
		//determine angle
		double shootangle=caller.angle;
		double shootpitch=caller.pitch;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(caller);
		if(hdp){
			shootangle=hdp.gunangle;
			shootpitch=hdp.gunpitch;
			shootpos=hdp.gunpos;
		}

		//create the line
		flinetracedata tlt;
		caller.linetrace(
			shootangle,
			98304,
			shootpitch,
			flags:TRF_NOSKY|TRF_ABSOFFSET,
			offsetz:shootpos.z,
			offsetforward:shootpos.x,
			offsetside:shootpos.y,
			data:tlt
		);

		int basedmg=int(max(0,20-tlt.distance*(1./50.)));
		int dmgflags=caller&&caller.player?DMG_PLAYERATTACK:0; //don't know why the player damagemobj doesn't work

		if(tlt.hitline)doordestroyer.CheckDirtyWindowBreak(tlt.hitline,0.003*basedmg,tlt.hitlocation);

		//where where the magic happens happens
		actor bbb=spawn("BeamSpot_Railgun",tlt.hitlocation-tlt.hitdir,ALLOW_REPLACE);
		bbb.setz(clamp(bbb.pos.z,bbb.floorz,bbb.ceilingz-8));
		bbb.target=caller;
		bbb.stamina=256;
		bbb.angle=caller.angle;
		bbb.pitch=caller.pitch;
	}
	
	action void A_ThunderZap(){

		//the actual call
		HDFortuneRailgun.ThunderZap(
			self,
			gunheight(),
			false
		);
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Load chamber\n"
		..WEPHELP_ALTRELOAD.."  Swap to dynamo"
		
		"\n\nA separate dynamo is needed to charge this."
		;
	}
	
	states{
	
	droop:
		TNT1 A 1{
		
			if(pitch<frandom(21,22)&&(!gunbraced())){
				if( countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.075,0.075),
						frandom(0.1,clamp(1-pitch,0.05,0.6)));
				}else{
					A_MuzzleClimb(frandom(-0.045,0.045),
						frandom(0.5,clamp(2-pitch,0.09,0.9)));
				
				if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=15;
				
				}
			}
		}loop;
	
	select0:
		RLGW A 0;
		RLGW A 0 A_Overlay(2,"droop");
		goto select0bfg;
	deselect0:
		RLGW A 0;
		goto deselect0bfg;
	ready:
		RLGW A 1 
		{
			A_WeaponReady(WRF_ALL);
			invoker.weaponstatus[RLGG_TIMER]=0;
		}
		goto readyend;
	epic.fail:
		RLGW A 1 
		{
			A_StartSound("weapons/pwrailgun/fail",CHAN_6,volume:0.7);
			A_StopSound(12);
			invoker.weaponstatus[RLGG_TIMER]=0;
		}
		RLGW A 0;
		goto nope;
	fire:
		RLGW A 3
		{
			invoker.weaponstatus[RLGG_TIMER]=0;
			
			if(invoker.weaponstatus[RLGG_CHARGE]<25||invoker.weaponstatus[RLGG_CHAMBER]<1){
				setweaponstate("epic.fail");
				return;
			}
		}
		RLGW A 0 {if(invoker.weaponstatus[RLGG_CHARGE]>99)A_Refire("prefire");}
	goto shoot;
	prefire:
		RLGW A 0 A_StartSound("weapons/pwrailgun/charge",12);
	prefire.hold:
		RLGW A 1 
		{
			//A_StartSound("weapons/plasidle",12);
			invoker.weaponstatus[RLGG_TIMER]+=3;
			if(invoker.weaponstatus[RLGG_TIMER]>128){
				setweaponstate("shoot");
				return;
			}
		}
		RLGW A 1 A_Refire("prefire.hold");
		goto epic.fail;
	shoot:
		RLGW A 1 offset(0,34){
			A_GunFlash();
			invoker.weaponstatus[RLGG_CHAMBER]--;
			invoker.weaponstatus[RLGG_TIMER]=0;
			invoker.weaponstatus[RLGG_HEAT]+=23;
			HDFortuneRailgun.Spark(self,12,gunheight()-2);
		}
		RLGW B 2 offset(0,45);
		RLGW B 2 offset(0,39);
		RLGW C 2 offset(0,35);
		RLGW A 1 offset(0,33);
		goto nope;
	/*altfire:
		RLGW D 12 A_ThunderZap();
		goto readyend;*/
	reload:
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[RLGG_CHAMBER]>3,"nope");
		---- A 0 A_JumpIf(!countinv("HD8mmElectroMagnetic"),"nope");
		---- A 1;
		---- A 1 offset(-1,34) A_StartSound("weapons/pocket",CHAN_5);
		#### A 2 offset(-2,36);
		#### D 4 offset(-3,38) A_StartSound("weapons/pwrailgun/cock1",CHAN_6,volume:0.6,pitch:0.92);
		#### D 8 offset(-5,40);
		#### D 8 offset(-5,39);
		#### D 6 offset(-4,39);/*{
			if(countinv("HD8mmElectroMagnetic")){
				A_TakeInventory("HD8mmElectroMagnetic",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[RLGG_CHAMBER]++;
				A_StartSound("weapons/rifleclick2",CHAN_7);
			}
		}*/
	reload2:
		#### D 0 A_JumpIf(
			(invoker.weaponstatus[RLGG_CHAMBER]>3)
			||!countinv("HD8mmElectroMagnetic"),
			"reloadend"
		);
		#### D 9 offset(-4,38) A_StartSound("weapons/pocket",9);
		#### D 2 offset(-5,40)A_StartSound("weapons/rifleclick2",CHAN_7);
		#### D 3 offset(-6,38){
			if(!countinv("HD8mmElectroMagnetic"))return;
			A_TakeInventory("HD8mmElectroMagnetic",1,TIF_NOTAKEINFINITE);
			if(invoker.weaponstatus[RLGG_CHAMBER]<4)invoker.weaponstatus[RLGG_CHAMBER]++;
		}
		#### D 2 offset(-6,37);
		#### D 4 offset(-5,39);
		#### D 5 offset(-5,38);
		#### D 0 A_JumpIf(!pressingreload(),"reload2");
	reloadend:
		#### D 7 offset(-5,37);
		#### A 2 offset(-2,36) A_StartSound("weapons/pwrailgun/cock2",CHAN_6,volume:0.6);
		#### A 2 offset(-1,34);
		goto readyend;
	
	user4:
	unload:
		#### A 0
		
		{if(invoker.weaponstatus[RLGG_CHAMBER]>0)setweaponstate("unloadchamber");}
		
		goto nope;
	unloadchamber:
		#### A 1 offset(-1,34);
		#### A 2 offset(-2,36);
		#### D 2 offset(-3,38) 
		{
			A_StartSound("weapons/pwrailgun/cock1",CHAN_6,volume:0.6,pitch:0.92);
			{
			invoker.weaponstatus[RLGG_CHAMBER]--;
			A_SpawnItemEx("HD8mmElectroMagnetic",
				cos(pitch)*10,0,height*0.82-sin(pitch)*10,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			}
		}
		#### D 2 offset(-5,40);
		#### D 3 offset(-4,39);
		#### D 4 offset(-5,37);
		#### A 2 offset(-2,36) A_StartSound("weapons/pwrailgun/cock2",CHAN_6,volume:0.6);
		#### A 1 offset(0,34);
		#### AAA 2 offset(0,32);
		goto readyend;
	flash:
		RLGW Z 1 bright{
		
			if(invoker.weaponstatus[RLGG_TIMER]>128)
			{
				A_ThunderZap();
				invoker.weaponstatus[RLGG_CHARGE]-=100;
			}else{invoker.weaponstatus[RLGG_CHARGE]-=25;}
			A_AlertMonsters();
			A_StartSound("weapons/pwrailgun/fire",CHAN_WEAPON,volume:1.0);
			let rgb=HDBulletActor.FireBullet(self,
			invoker.weaponstatus[RLGG_TIMER]>128?"HDB_RailgunBolt":"HDB_RailgunBolt_LP");
			
			invoker.weaponstatus[RLGG_HEAT]+=25;
			HDFlashAlpha(0,true);
				
				A_Light1();

			IsMoving.Give(self,gunbraced()?2:7);
			if(
				!binvulnerable
				&&(
					floorz<pos.z
					||IsMoving.Count(self)>6
				)
			){
				givebody(max(0,21-health));
				damagemobj(invoker,self,20,"bashing");
				IsMoving.Give(self,5);
			}
		}
		TNT1 A 1{
			A_ZoomRecoil(0.5);
			A_Light1();
		}
		TNT1 A 1 A_Light0();
		//TNT1 A 0
		//{
		//		A_JumpIf(invoker.weaponstatus[RLGG_TIMER]>127,"flash.heavy");
		//		A_MuzzleClimb(
		//			0,0,
		//			frandom(1.2,1.7),-frandom(2,2.5),
		//			frandom(1.,1.2),-frandom(2.5,3),
		//			frandom(0.6,0.8),-frandom(2,3)
		//		);
		//}
		//stop;
	//flash.heavy:
		TNT1 A 0{
			bool gb=gunbraced();
			hdplayerpawn(self).gunbraced=false;
			double recoilside=randompick(-1,1);
			double pushforce=frandom(5,8)*player.crouchfactor;
			if(
				gb
				&&player.onground
				&&pressingzoom()
			){
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*2,-4.,
					recoilside*1,-2.,
					recoilside*0.4,-1.,
					recoilside*0.2,-0.4,
					wepdot:true
				);
			}else{
				pushforce*=frandom(0.2,0.3);
				A_ChangeVelocity(
					cos(pitch)*-pushforce,0,
					sin(pitch)*pushforce,
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*5,-frandom(5.,8.),
					recoilside*4,-frandom(3.,6.),
					recoilside*3,-frandom(2.,4.),
					recoilside*2,-frandom(1.,2.),
					wepdot:true
				);
			}
		}
		stop;
		
	user1:
	altreload:
		#### A 1 A_SelectWeapon("HDRailgunDynamoPW");
		goto nope;
		
	spawn:
		RLGP Z -1 nodelay;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[RLGG_CHAMBER]=4;
		weaponstatus[RLGG_CHARGE]=100;
		weaponstatus[RLGG_TIMER]=0;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[RLGG_HEAT]=0;
		}
	}
}
enum pwrailgunstatus{
	RLGF_JUSTUNLOAD=1,

	RLGG_STATUS=0,
	RLGG_CHAMBER=1,
	RLGG_MAG=2,
	RLGG_HEAT=3,
	RLGG_CHARGE=4,
	RLGG_LEVEL=5,
	RLGG_TIMER=6,
};

