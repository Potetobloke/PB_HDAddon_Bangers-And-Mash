// ------------------------------------------------------------
// charger for the railgun's internal battery
// ------------------------------------------------------------

class HDRailgunDynamoPW:HDWeapon{
	default{
		-hdweapon.fitsinbackpack
		weapon.selectionorder 99;
		weapon.slotnumber 9;
		weapon.slotpriority 1.08;
		+inventory.invbar
		scale 0.725;
		weapon.bobrangex 0.22;
		weapon.bobrangey 0.9;
		Inventory.PickupMessage "You found the XM99 Railgun's dynamo.";
		obituary "%o was mysteriously killed by %k.";
		hdweapon.refid HDLD_PW_RAILGUNDYNAMO;
		hdweapon.barrelsize 15,0.3,0.5;
		Tag "$TAG_RAILGUNDYNAMO";
		inventory.maxamount 1;
	}
	
	override double weaponbulk(){
		return 115;
	}
	override double gunmass(){
		return 17.5;
	}
	
	override void tick(){
		super.tick();
	}

	override string,double getpickupsprite(){return "RLGPY0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let hhh=hdweapon(findinventory("HDFortuneRailgun"));
		let charge=hdw.weaponstatus[DYNS_CHARGE];
		
		sb.DrawNum(min(hdw.weaponstatus[DYNS_CHARGE],100), -30, -16, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
		
		sb.drawstring(
			sb.pnewsmallfont,"%",
			(-24, -16.5),sb.DI_TEXT_ALIGN_RIGHT|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_RED,scale:(0.5,0.5));
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Charge Railgun's battery\n"
		..WEPHELP_ALTRELOAD.."   Swap to Railgun\n"
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){}
	
	action void A_ChargeRailgun(int chargeamt){
		let hhh=hdweapon(findinventory("HDFortuneRailgun"));
		if(hhh){
				hhh.weaponstatus[RLGG_CHARGE]+=chargeamt;
				invoker.weaponstatus[DYNS_CHARGE]=hhh.weaponstatus[RLGG_CHARGE];
				}else invoker.weaponstatus[DYNS_CHARGE]=0;
	}
	
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	states{
	
	select0:
		RLGD A 0 A_ChargeRailgun(0);
		goto select0bfg;
	deselect0:
		RLGD A 0;
		goto deselect0bfg;
	
	Spawn:
		RLGP Y -1;
		stop;
		
	ready:
		RLGD A 0;
		#### A 1{
			A_WeaponReady(WRF_ALL);
			A_ChargeRailgun(0);
		}
		goto readyend;
	fire:
		RLGD A 0;
	crankdat.down:
		RLGD B 0 A_StartSound("weapons/pwrailgun/wind",CHAN_6,CHANF_OVERLAP);
		RLGD B 2;
		RLGD C 2 A_ChargeRailgun(1);
		RLGD D 2 offset(-1,34)A_ChargeRailgun(1);
		RLGD E 1 offset(-2,35)A_ChargeRailgun(1);
		RLGD E 0
		{
			let hhh=hdweapon(findinventory("HDFortuneRailgun"));
				if(!hhh){setweaponstate("crank.fail");}
		}
		RLGD E 0 A_Refire("crankdat.hold");
		goto crank.fail;
	crankdat.cont:
		RLGD E 2 offset(-1,33);
		RLGD E 3 offset(0,32);
		RLGD E 0 A_Refire("crankdat.hold");
		goto crank.fail;
	crankdat.hold:
		RLGD E 1;
		RLGD E 0 A_Refire("crankdat.hold");
	crankdat.up:
		RLGD F 0
		{
				let hhh=hdweapon(findinventory("HDFortuneRailgun"));
				if(hhh){
				if(hhh.weaponstatus[RLGG_CHARGE]>99)
				{setweaponstate("crank.finish");}
				}
		}
		RLGD F 0 A_StartSound("weapons/pwrailgun/wind",CHAN_6,CHANF_OVERLAP);
		RLGD F 3 A_ChargeRailgun(1);
		RLGD G 3 A_ChargeRailgun(1);
		RLGD A 0;
		goto NOPE;
	crank.fail:
		RLGD F 0 A_StartSound("weapons/pwrailgun/windfail",CHAN_6,CHANF_OVERLAP);
		RLGD DC 3;
		RLGD B 3;
		RLGD A 1;
		goto nope;
	crank.finish:
		RLGD F 0 A_StartSound("weapons/pwrailgun/windfail",CHAN_6,CHANF_OVERLAP);
		RLGD F 4;
		RLGD G 4;
		RLGD A 2;
		goto nope;
	user1:
	altreload:
		RLGD A 1 A_SelectWeapon("HDFortuneRailgun");
		goto nope;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[DYNS_BATTERY]=-1;
	}
}

enum oddballstatus{
	DYNS_CRANK=1,

	DYNS_FLAGS=0,
	DYNS_BATTERY=1,
	DYNS_FRAME=2,
	DYNS_CHARGE=3,
};