class HDMicrogun:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "PS-451"
		//$Sprite "P20PA0"

		-hdweapon.reverseguninertia
		-hdweapon.fitsinbackpack
		+hdweapon.hinderlegs
		//+hdweapon.dontnull
		weapon.selectionorder 60;
		weapon.slotnumber 7;
		weapon.kickback 30;
		weapon.bobrangex 1.86;
		weapon.bobrangey 1.1;
		weapon.bobspeed 1.67;
		scale 0.85;
		inventory.pickupmessage "You got the HS76A1 SmartGun! Fire it in short, controlled bursts!";
		obituary "%o was turned into swiss cheese by %k's bike parts.";
		hdweapon.barrelsize 40,4,2;
		tag "$TAG_SMARTGUN";
		hdweapon.refid HDLD_SMARTGUN;
	}
	//dummying this out because this isnt a disposable weapon
	/*override string pickupmessage(){ 
		if(weaponstatus[MCRGS_AMMO]<1)return string.format("%s It is empty.",super.pickupmessage());
		else return string.format("%s Fire it in short, controlled bursts!",super.pickupmessage());
		return super.pickupmessage();
	}
	
		override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int scaledyoffset=47;
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<20){
				sb.drawimage(
					whichdot,(0,0)+bob*1.6,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.04
				);
			}
	}*/
	
	action void A_LaserSight() //man i am not touching this shit ever again
    {
        double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(self);
		if(hdp){
			shootpos=hdp.gunpos;
		}
        FLineTraceData trace;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
				linetrace(
					hdp.gunangle,16384,hdp.gunpitch,
					flags:TRF_NOSKY|TRF_ABSOFFSET,
					offsetz:shootpos.z,
					offsetforward:shootpos.x,
					offsetside:shootpos.y,
					data:trace
				);
		
        Vector3 laserOfs = trace.hitLocation-pos;
		laserOfs-=trace.hitdir;
		
				if(
			trace.hittype==Trace_HitNone
			||(
				trace.hitline&&(
					trace.hitline.special==Line_Horizon
					||(
						trace.linepart==2
						&&trace.hitsector.gettexture(0)==skyflatnum
					)||(
						trace.linepart==1
						&&trace.hitline.sidedef[1]
						&&hdmath.oppositesector(trace.hitline,trace.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;
		
		a_spawnparticle(
						"00 fb ff",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:1,frandom(5.5,6.4),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:1
					);
		a_spawnparticle(
						"00 fb ff",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:4,frandom(7.9,8.4),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:0.5,0.1,-1.5
					);
    }
	
	action void HDSmartGun_CheckTarget(){
	
		let hdp=HDPlayerPawn(self);
        FLineTraceData trace;
		
		double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		if(hdp){
			shootpos=hdp.gunpos;
		}
       flinetracedata sgtargetline;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
		bool sgtarget=linetrace(
			hdp.gunangle,800,hdp.gunpitch,
			flags:TRF_NOSKY|TRF_ABSOFFSET,
			offsetz:shootpos.z,
			offsetforward:shootpos.x,
			offsetside:shootpos.y,
			data: sgtargetline);
		
		//A_LaserSight();
		
		if(!sgtarget)return;
		
		actor sgtargetfound=sgtargetline.hitactor;
		
		/*if( old iff code 
		(sgtargetfound is "actor")
		&&sgtargetfound.bismonster
		//&&!sgtargetfound.bnoblood
		&&sgtargetfound.health>0
		)*/
		
		if( //code from HERP
			sgtargetfound
			&&isHostile(sgtargetfound)
			&&sgtargetfound.bshootable
			&&!sgtargetfound.bnotarget
			&&!sgtargetfound.bnevertarget
			&&(sgtargetfound.bismonster||sgtargetfound.player)
			&&(!sgtargetfound.player||!(sgtargetfound.player.cheats&CF_NOTARGET))
			&&sgtargetfound.health>random((sgtargetfound.vel==(0,0,0))?0:-10,5)
			//&&sgtargetfound.checksight(self)
		)setweaponstate("TargetFound",5);
	}
	
	static double Fire(actor caller,int choke=1){
		double spread=6.;
		let mcrg=HDMicrogun(caller.findinventory("HDMicrogun"));
		if(mcrg)

		spread=9.25;

		let p=HDBulletActor.FireBullet(caller,"HDB_776",
			spread:spread,amount:1
		);
		//distantnoise.make(p,"world/riflefar");
		//caller.A_StartSound("weapons/bigrifle",CHAN_WEAPON,CHANF_OVERLAP);
		return spread;
	}
	
	action void A_FireMicrogun2(){
		invoker.Fire(self);
		A_MuzzleClimb(0,0,-frandom(0.1,0.3),-frandom(0.4,0.8));
		
		invoker.weaponstatus[MCRGS_HEAT]+=3;
		
		if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
				A_GiveInventory("IsMoving",1);}
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(MCRGS_HEAT,12);
	}
	override void postbeginplay(){
		super.postbeginplay();
	}
	override double gunmass(){
		double howmuch=19.5;
			return howmuch+weaponstatus[MCRGS_AMMO]*0.02;
	}
	override double weaponbulk(){
		int mg=weaponstatus[MCRGS_AMMO];
		return (225+ENC_776BELTBOX_EMPTY)+mg*ENC_776_LOADED;
	}
	
	override string,double getpickupsprite(){return "SMP1"..((weaponstatus[MCRGS_AMMO]<0)?"A":"B").."0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_PB_7mmBeltBox")));
			if(nextmagloaded>=250){
				sb.drawimage("7MBXNORM",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextmagloaded<1){
				sb.drawimage("MBX1B0",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"7MBXNORM","7MBXGRAY",
				nextmagloaded,250,
				(-49,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD_PB_7mmBeltBox"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);}

			if(weaponstatus[MCRGS_AMMO]>0){
				sb.DrawNum(hdw.weaponstatus[MCRGS_AMMO], -16, -22, sb.DI_SCREEN_CENTER_BOTTOM | sb.DI_TEXT_ALIGN_RIGHT, Font.CR_RED);
				sb.drawwepnum(hdw.weaponstatus[MCRGS_AMMO],250);
			}
			//if(weaponstatus[MCRGS_TARGETTER]!=1)
				sb.drawwepcounter(hdw.weaponstatus[MCRGS_TARGETTER],
			-22,-10,"STFULAUT","STBURAUT");
		// Draw indicator that the magazine is unloaded.
		if(hdw.weaponstatus[0]&MCRGS_AMMO && weaponstatus[MCRGS_AMMO]<0){
			sb.drawrect(-26,-17,10,1);
		}
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		//..WEPHELP_ALTFIRE.."  Toggle harness\n"
		..WEPHELP_FIREMODE.."  Manual/Assisted\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	states{
	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.2,0.2),
						frandom(0.1,clamp(1-pitch,0.1,0.3)));
				}else{
					A_MuzzleClimb(frandom(-0.06,0.06),
						frandom(0.1,clamp(1-pitch,0.06,0.12)));
				}
			}
		}loop;
		
	targetcheck:
		TNT1 A 0 {if(invoker.weaponstatus[MCRGS_TARGETTER]==1)HDSmartGun_CheckTarget();A_LaserSight();}
		TNT1 A 1 
		{
			invoker.weaponstatus[MCRGS_TARGETFOUND]-=1;
		}
		loop;
	targetfound:
		TNT1 A 1 
		{
			/*if(player&&hdweapon(player.readyweapon)){
			player.cmd.buttons|=BT_ATTACK;
			}*/
			invoker.weaponstatus[MCRGS_TARGETFOUND]=2;A_Overlay(8,"beepsound",true);
		}
		TNT1 A 0 {if(invoker.weaponstatus[MCRGS_TARGETTER]==0)setweaponstate("targetcheck",5);}
		goto targetcheck;
	beepsound:
		TNT1 A 5 A_StartSound("weapons/smartgun/beep",CHAN_6,volume:0.86,5);
		stop;
		
	select0:
		SMR1 A 0 {
		A_Overlay(2,"droop");
		A_Overlay(5,"targetcheck");
		}
		goto select0bfg;
	deselect0:
		SMR1 A 0;
		---- A 0 A_JumpIf(
			invoker.weaponstatus[0]&MCRGF_STRAPPED
			&&!countinv("NulledWeapon")
			,"togglestrap"
		);
		SMR1 A 0 A_ClearOverlays(5,5);
		goto deselect0bfg;
	ready:
		SMR1 A 1 {A_WeaponReady(WRF_ALL);A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);}
		goto readyend;
	fire:
	truefire:
		#### A 0 {
			if(invoker.weaponstatus[MCRGS_AMMO]<1)
			setweaponstate("nope");
			}
		#### A 1 {
			if(invoker.weaponstatus[MCRGS_TARGETTER]==0)
			setweaponstate("Hailstorm");
			}
		#### A 0 {
			if((invoker.weaponstatus[MCRGS_TARGETTER]==1)
			&&(invoker.weaponstatus[MCRGS_TARGETFOUND]>1))
			setweaponstate("Hailstorm");
			else if(invoker.weaponstatus[MCRGS_TARGETTER]==1)setweaponstate("HailStormChecker");
			}
		goto nope;
	HailStorm:
		SMR1 A 0 A_GunFlash();
		SMR1 B 1{
			double cosp=cos(pitch);
				A_SpawnItemEx("HD_Downwards776Casing_PB",
					cos(pitch)*12,0,height-9-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_SpawnItemEx("HDFlyingBeltLink",
					cos(pitch)*12,0,height-9-sin(pitch)*12,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_StartSound("weapons/xm556microgun/fire",CHAN_WEAPON,CHANF_OVERLAP,2);
			A_FireMicrogun2();
			A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);
			A_OverlayFlags(PSP_WEAPON,PSPF_INTERPOLATE,false);
			invoker.weaponstatus[MCRGS_AMMO]-=1;
		}
		SMR1 C 1 
		{A_OverlayPivot(PSP_WEAPON,0.5,0.5);
		A_OverlayRotate(PSP_WEAPON,frandom(-2,2));}
		#### A 0 {
			if(invoker.weaponstatus[MCRGS_TARGETTER]<1)
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
			}
		#### D 0
		{
		A_OverlayRotate(PSP_WEAPON,0,WOF_INTERPOLATE);
		
		if((invoker.weaponstatus[MCRGS_TARGETTER]==1)
		&&(invoker.weaponstatus[MCRGS_TARGETFOUND]>1))
			{
			A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
			}
		}
		goto funisover;
	funisover:
		#### A 0 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
		SMR1 DEAAA 1;
		SMR1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
		goto readyend;
	HailStormChecker:
		#### A 1 {if(invoker.weaponstatus[MCRGS_TARGETFOUND]>1)setweaponstate("Hailstorm");}
		SMR1 A 1 A_JumpIf(GetPlayerInput(INPUT_BUTTONS) & (BT_ATTACK), "fire");
	goto readyend;
	flash:
		SMR8 ABCD 0 bright A_Jump(64,"flash_cont1");
		SMR2 AEBFCGDH 0 bright A_Jump(64,"flash_cont1");
	flash_cont1:
		#### # 1 bright{
			HDFlashAlpha(frandom(128,256));
			A_Light1();
		}
		TNT1 A 0 bright{
			A_Light0();
		}
		stop;
		
		altfire:
		user2:
	firemode:
		---- # 1{
		A_StartSound("weapons/fmswitch",CHAN_7,CHANF_OVERLAP,0.3);
			int aut=invoker.weaponstatus[MCRGS_TARGETTER];
			if(aut>=1)invoker.weaponstatus[MCRGS_TARGETTER]=0;
			else if(aut<0)invoker.weaponstatus[MCRGS_TARGETTER]=0;
			else invoker.weaponstatus[MCRGS_TARGETTER]++;
		}goto nope;
		
	reload:
		SMR1 A 0;
		#### A 0{
			invoker.weaponstatus[0]&=~MCRGF_JUSTUNLOAD;
			if(invoker.weaponstatus[MCRGS_AMMO]>=250)setweaponstate("nope");}
			goto unmag;
	user4:
	unload:
		SMR1 A 0;
		#### A 0{
			invoker.weaponstatus[0]|=MCRGF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[MCRGS_AMMO]>=0
			)setweaponstate("unmag");
		}goto nope;
	unmag:
		SMR1 A 0;
		#### A 1 offset(0,34) A_SetCrosshair(21);
		#### A 2 offset(1,38);
		#### A 2 offset(3,40);
		#### A 2 offset(5,42);
		#### A 2 offset(8,44);
		#### A 3 offset(10,46);
		#### A 5 offset(20,52) A_StartSound("weapons/kelenken/magout",CHAN_WEAPON);
		#### A 6 offset(30,58){
			A_MuzzleClimb(0.3,0.4);
		}
		#### A 0{
			int magamt=invoker.weaponstatus[MCRGS_AMMO];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[MCRGS_AMMO]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_PB_7mmBeltBox",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_PB_7mmBeltBox",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_PB_7mmBeltBox",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### AAA 7 offset(34,60) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	magout:
		#### A 0{
			if(invoker.weaponstatus[0]&MCRGF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### A 5 offset(35,55)A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### A 7 offset(35,51) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### A 11 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### A 14 offset(32,50);
		#### A 5 offset(32,49){
			let mmm=hdmagammo(findinventory("HD_PB_7mmBeltBox"));
			if(mmm){
				invoker.weaponstatus[MCRGS_AMMO]=mmm.TakeMag(true);
				A_StartSound("weapons/kelenken/magin",CHAN_BODY);
			}
		}
		#### A 4 offset(32,51);
		#### A 4 offset(32,47);
		#### A 5 offset(31,45);
	reloadend:
		SMR1 A 5 offset(30,52);
		#### A 4 offset(20,46);
		#### A 3 offset(10,42);
		#### A 3 offset(5,38);
		#### A 2 offset(0,34);
		goto nope;
		
	

	user3:
		SMR1 A 0 A_MagManager("HD_PB_7mmBeltBox");
		goto ready;
	
		spawn:
		SMP1 A 0 nodelay A_JumpIf(invoker.weaponstatus[MCRGS_AMMO]<0,2);
		SMP1 B 0;
		#### # -1;
		stop;

	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[MCRGS_AMMO]=250;
		weaponstatus[0]&=~MCRGS_AMMO;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[MCRGS_HEAT]=0;
		}
	}
}
enum xm776microgunstatus{
	MCRGF_JUSTUNLOAD=1,
	MCRGF_STRAPPED=2,

	MCRGS_STATUS=0,
	MCRGS_AMMO=1,
	MCRGS_HEAT=2,
	MCRGS_TARGETTER=3,
	MCRGS_TARGETFOUND=4,
	//MCRGS_MAGBOX=5, why does this even exist
};

class HD_Downwards776Casing_PB:HDSpent7mm{
	override void postbeginplay(){
		super.postbeginplay();
		A_ChangeVelocity(frandom(-1,1),frandom(-0.4,0.4),0,CVF_RELATIVE);
	}
	default{
		bouncefactor 0.05;
	}
	states{
	death:
		TNT1 A 1{
			actor a=spawn("SevenMilBrass",self.pos,ALLOW_REPLACE);
			a.roll=self.roll;a.vel=self.vel;
		}stop;
	}
}