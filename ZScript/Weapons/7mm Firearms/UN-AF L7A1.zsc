// ------------------------------------------------------------
// 7.76mm LMG
// ------------------------------------------------------------
class HD_FNFAL:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Chives Herstal MG77 ''Defender''"
		//$Sprite "FALPA0"

		-hdweapon.fitsinbackpack //forgot that this shouldn't fit
		obituary "%o was hit with the right hand of the free world from %k.";
		weapon.selectionorder 10;
		weapon.slotpriority 1.25;
		weapon.slotnumber 6;
		weapon.kickback 30;
		weapon.bobrangex 0.3;
		weapon.bobrangey 0.9;
		//weapon.bobspeed 2.5;
		scale 0.65;
		inventory.pickupmessage "You got the 7.76 Support Weapon!";
		hdweapon.barrelsize 35,1,2;
		//hdweapon.nicename "Chives Herstal MG77 ''Defender''";
		tag "$TAG_FAL";
		hdweapon.refid HDLD_FNFAL;
		hdweapon.loadoutcodes "
			\curof - 0/1, heavier bolt for a slower rate of fire
			\cu     (Does not affect the overall weight of the weapon)";
	}
	
	override string pickupmessage(){
		if(weaponstatus[0]&FALF_LOWROF)return string.format("%s The bolt feels heavier.",super.pickupmessage());
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}
	override double gunmass(){
		return 13+weaponstatus[FALG_MAG]*0.1;
	}
	override double weaponbulk(){
		int mg=weaponstatus[FALG_MAG];
		int mgt=weaponstatus[FALG_MAGTYPE];
		if(mg<0)return 132;
		else return (132+ENC_776DRUM_LOADED)+mg*ENC_776_LOADED;
		
		//the foregrip and bipod makes it a little bulkier than a non-bp liberator
	}
	//override void failedpickupunload(){
	//	failedpickupunloadmag(FALG_MAG,"HD_FALMag");
	//}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",amt*75);
			else {owner.A_DropInventory("HD_FALMag",amt);}//owner.A_DropInventory("HD_FALBoxMag",amt);
		}
	}
	override string,double getpickupsprite(){
	return "FALP"..((weaponstatus[FALG_MAG]<0)?"B":"A").."0",1.;
	}
		override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel == 1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_FALMag")));
			if(nextmagloaded>=75){
				sb.drawimage("FALMNORM",(-54,-3),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("FALMEMPTY",(-54,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}else sb.drawbar(
				"FALMNORM","FALMGREY",
				nextmagloaded,75,
				(-54,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			
			sb.drawnum(hpl.countinv("HD_FALMag"),-53,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		sb.drawwepcounter(hdw.weaponstatus[FALG_AUTO],
			-20,-12,"RBRSA3A7","STFULAUT"
		);
		
		if(hdw.weaponstatus[FALG_MAGTYPE]>0){sb.drawwepnum(hdw.weaponstatus[FALG_MAG],35);}
		else{sb.drawwepnum(hdw.weaponstatus[FALG_MAG],75);}

		if(hdw.weaponstatus[FALG_CHAMBER]==2){
			sb.drawrect(-19,-11,3,1);
		}
		
	}
	
	action void A_Chamber(bool unloadonly=false){
		//A_StartSound("weapons/libchamber",8,CHANF_OVERLAP);
		actor brsss=null;
		if(invoker.weaponstatus[FALG_CHAMBER]==1){
			brsss=A_EjectCasing(
				"HDSpent7mm",-1,
				(frandom(0.3,0.6),frandom(-8.7,-9.2),frandom(0,0.5)),
				(0,0,-3)
			);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}else if(invoker.weaponstatus[FALG_CHAMBER]==2){
			double fc=max(pitch*0.01,5);
			double cosp=cos(pitch);
			[cosp,brsss]=A_SpawnItemEx(
				invoker.weaponstatus[0]&FALF_RECAST?"HDLoose7mmRecast":"HDLoose7mm",
				cosp*12,0,height-8-sin(pitch)*12,
				cosp*fc,0.2*randompick(-1,1),-sin(pitch)*fc,
				0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			brsss.vel+=vel;
			brsss.A_StartSound(brsss.bouncesound,volume:0.4);
		}
		if(!unloadonly && invoker.weaponstatus[FALG_MAG]>0){
			invoker.weaponstatus[FALG_CHAMBER]=2;
			if(HD_FALMag.CheckRecast(invoker.weaponstatus[FALG_MAG],invoker.weaponstatus[FALG_RECASTS])){
				invoker.weaponstatus[0]|=FALF_RECAST;
				invoker.weaponstatus[FALG_RECASTS]--;
			}
			invoker.weaponstatus[FALG_MAG]--;
		}else{
			invoker.weaponstatus[0]&=~FALF_RECAST;
			invoker.weaponstatus[FALG_CHAMBER]=0;
			if(brsss!=null)brsss.vel=vel+(cos(angle),sin(angle),-2);
		}
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Reload mag\n"
		//..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload chamber\n"
		..WEPHELP_FIREMODE.."  Semi/Auto\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*3;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"FALS_001",(0,-3)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(1.0,1.0)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"FALS_000",(0,-10.75)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}
	states{
	select0:
		FALG A 0 A_Overlay(2,"droop");
		FALG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]>-1,2);
		F4LG A 0;
		#### # 0;
		goto select0bfg;
	deselect0:
		FALG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]>-1,2);
		F4LG A 0;
		#### # 0;
		goto deselect0big;
		
	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())&& invoker.weaponstatus[FALG_MAGTYPE]<1){
				if(countinv("IsMoving")>2 && invoker.weaponstatus[FALG_MAG]>-1 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.075,0.075),
						frandom(0.1,clamp(1-pitch,0.05,0.6)));
				}else if (invoker.weaponstatus[FALG_MAG]>-1){
					A_MuzzleClimb(frandom(-0.045,0.045),
						frandom(0.1,clamp(1-pitch,0.03,0.4)));
				}
			}
		}loop;
		
	ready:
		FALG A 0 A_JumpIf(((invoker.weaponstatus[FALG_MAG]>-1)&&(invoker.weaponstatus[FALG_MAGTYPE]==0)),2);
		F4LG A 0;
		#### # 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HD_FALMag");
		goto ready;
	altfire:
	althold:
		goto nope;
	hold:
		#### A 0{
			if(
				//full auto
				invoker.weaponstatus[FALG_AUTO]==2
			)setweaponstate("fire2");
			else if(
				//burst
				invoker.weaponstatus[FALG_AUTO]<1
			)setweaponstate("nope");
		}goto fire;
	user2:
	firemode:
		#### A 1			{
			int aut=invoker.weaponstatus[FALG_AUTO];
			if(aut>=0){
				invoker.weaponstatus[FALG_AUTO]=aut==0?1:0;
			}
		}goto nope;
		
	fire:
		#### A 2;
	fire2:
		F4LG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]<0,2);
		FALG A 0;
		#### A 1 offset(0,33){
			if(invoker.weaponstatus[FALG_CHAMBER]==2){
				A_GunFlash();
			}else{
				if(invoker.weaponstatus[FALG_MAG]>0)setweaponstate("chamber_manual");
				else setweaponstate("nope");
			}
		}
		#### B 1 offset(0,36){
				A_StartSound("weapons/falchamber2",CHAN_6,volume:0.2);
				A_Chamber();
		}
		#### A 0 offset(0,34) {if(invoker.weaponstatus[0]&FALF_LOWROF)A_SetTics(2);}
		#### A 1 offset(0,33){
			//A_StartSound("weapons/falchamber",CHAN_6,volume:0.6);
			//A_Chamber();
		}
		#### A 0 offset(0,32){
			if(invoker.weaponstatus[FALG_AUTO]==1)A_ReFire("fire2");
			A_WeaponReady(WRF_NOFIRE);
		}
		goto nope;
	whoops:
		#### B 1 offset(0,36);
		#### A 0 offset(0,34) {if(invoker.weaponstatus[0]&FALF_LOWROF)A_SetTics(2);}
		#### A 1 offset(0,33);
		goto nope;
	flash:
		FALF A 0{
			HDBulletActor.FireBullet(self,
				invoker.weaponstatus[0]&FALF_RECAST?"HDB_776r":"HDB_776"
			);

			A_AlertMonsters();
			A_StartSound("weapons/FALshot",CHAN_WEAPON,volume:1.5,pitch:invoker.weaponstatus[0]&FALF_RECAST?1.025:1);
			invoker.weaponstatus[FALG_CHAMBER]=1;
			invoker.weaponstatus[0]&=~FALF_RECAST;
		}
		FALF # 0{
			HDFlashAlpha(random(32,64));
			A_Light1();
			A_ZoomRecoil(0.97);
				A_MuzzleClimb(
					0,0,
					-0.07,-0.14,
					-frandom(0.3,0.6),-frandom(1.,1.4),
					-frandom(0.2,0.4),-frandom(1.,1.4)
				);
		}
		FALF # 0 A_Jump(128,3);
		FALF AC 1 Bright HDFlashAlpha(random(32,64));
		goto lightdone;
		FALF BD 1 Bright HDFlashAlpha(random(32,64));
		goto lightdone;

	unloadchamber:
		#### A 1 offset(-1,34){
			if(
				invoker.weaponstatus[FALG_CHAMBER]<1
			)setweaponstate("nope");
		}
		#### A 2 offset(-2,36);
		#### B 2 offset(-3,38) {A_Chamber(true);A_StartSound("weapons/falchamber",CHAN_6,volume:0.6);}
		#### B 3 offset(-4,39);
		#### B 5 offset(-5,38);
		#### A 2 offset(-2,36) A_StartSound("weapons/falchamber2",CHAN_6,volume:0.8);
		#### A 1 offset(0,34);
		goto readyend;

	loadchamber:
		#### A 0 A_JumpIf(invoker.weaponstatus[FALG_CHAMBER]>0,"nope");
		#### A 0 A_JumpIf(
			!countinv("SevenMilAmmo")
			&&!countinv("SevenMilAmmoRecast")
		,"nope");
		#### A 1 offset(0,34) A_StartSound("weapons/pocket",9);
		#### A 2 offset(2,36);
		#### B 2 offset(5,40) A_StartSound("weapons/falchamber",8);
		#### B 4 offset(7,44);
		#### B 8 offset(6,43);
		#### B 10 offset(4,39){
			class<inventory> rndtp="SevenMilAmmo";
			if(!countinv(rndtp))rndtp="SevenMilAmmoRecast";

			if(countinv(rndtp)){
				A_TakeInventory(rndtp,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[FALG_CHAMBER]=2;

				if(rndtp=="SevenMilAmmoRecast")invoker.weaponstatus[0]|=FALF_RECAST;
				else invoker.weaponstatus[0]&=~FALF_RECAST;
				
				A_StartSound("weapons/libchamber2",8,CHANF_OVERLAP,0.7);
			}else A_SetTics(4);
		}
		#### B 7 offset(5,37);
		#### B 1 offset(2,36);
		#### A 1 offset(0,34);
		goto readyend;
		
	chamber_manual:
		#### A 1 offset(-1,34){
			if(
				invoker.weaponstatus[FALG_CHAMBER]==2
				||invoker.weaponstatus[FALG_MAG]<1
			)setweaponstate("nope");
		}
		#### A 2 offset(-2,36);
		#### B 2 offset(-3,38) {A_Chamber();A_StartSound("weapons/falchamber",CHAN_6,volume:0.6);}
		#### B 2 offset(-4,39);
		#### B 3 offset(-5,38);
		#### A 2 offset(-2,36) A_StartSound("weapons/falchamber2",CHAN_6,volume:0.8);
		#### A 1 offset(0,34);
		goto readyend;
		
	user4:
	unload:
		FALG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]>-1,2);
		F4LG A 0;
		#### # 0{
			invoker.weaponstatus[0]|=FALF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[FALG_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[FALG_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		#### A 0{
			int inmag=invoker.weaponstatus[FALG_MAG];
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD_FALMag");
			bool haverounds=countinv("SevenMilAmmo")||countinv("SevenMilAmmoRecast");
			invoker.weaponstatus[0]&=~FALF_JUSTUNLOAD;

			//no point reloading
			if(
				inmag>=75
				||(
					//no mags to load and can't directly load chamber
					nomags
					&&(
						!haverounds
						||inmag>=0
						||invoker.weaponstatus[FALG_CHAMBER]>0
					)
				)
			)return resolvestate("nope");

			//no mag, empty chamber, have loose rounds
			if(
				inmag<0
				&&invoker.weaponstatus[FALG_CHAMBER]<1
				&&haverounds
				&&(
					pressinguse()
					||nomags
				)
			)return resolvestate("loadchamber");

			if(
				invoker.weaponstatus[FALG_MAG]>0  
			){
				//if full mag and unchambered, chamber
				if(
					invoker.weaponstatus[FALG_MAG]>=75  
					&&invoker.weaponstatus[FALG_CHAMBER]!=2
				){
					return resolvestate("chamber_manual");
				}				
			}
			return resolvestate("unmag");
		}

	unmag:
		F4LG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]<0,"nomag_unmag");
		//F4LG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAGTYPE]>0,"unmag_boxmag");
		FALG C 2 A_SetCrosshair(21);
		FALG D 3;
		FALG E 4;
		FALG F 4 A_StartSound("weapons/FALdrumout",CHAN_WEAPON);
		FALG G 5{
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		}
		FALG H 4 A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		FALG I 3;
		FALG # 0{
			int magamt=invoker.weaponstatus[FALG_MAG];
			if(magamt<0){setweaponstate("magout");return;}

			if(magamt>0){
				int fullets=clamp(75-invoker.weaponstatus[FALG_RECASTS],0,magamt);
				magamt+=fullets*100;
			}

			invoker.weaponstatus[FALG_MAG]=-1;
			invoker.weaponstatus[FALG_RECASTS]=0;
			if(
				!PressingReload()
				&&!PressingUnload()
			){
				HDMagAmmo.SpawnMag(self,"HD_FALMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_FALMag",magamt);
				setweaponstate("pocketmag");
			}
		}
		goto pocketmag;
		
	/*unmag_boxmag:
		F4LG A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]<0,"nomag_unmag");
		FAL2 C 1 A_SetCrosshair(21);
		FAL2 D 2;
		FAL2 E 3;
		FAL2 F 4 A_StartSound("weapons/FALmagout",CHAN_WEAPON);
		FAL2 G 2{
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		}
		FAL2 H 2 A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		FAL2 I 2;
		FAL2 # 0{
			int magamt=invoker.weaponstatus[FALG_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[FALG_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_FALBoxMag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_FALBoxMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_FALBoxMag",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
		goto pocketmag;*/
	nomag_unmag:
		F5LG A 3 A_SetCrosshair(21);
		F5LG BCD 3 A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		F5LG FGHI 4;
		F5LG # 0{
			int magamt=invoker.weaponstatus[FALG_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[FALG_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_FALMag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_FALMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_FALMag",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		FALG I 3;
		#### # 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]>-1,2);
		#### # 0;
		#### I 7 offset(2,34) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### I 7 offset(6,32) A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### I 7 offset(5,34) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### I 7 offset(4,34) A_StartSound("weapons/pocket",CHAN_WEAPON);
	magout:
		#### I 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]>-1,2);
		#### I 0;
		#### I 0{
			if(invoker.weaponstatus[0]&FALF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### # 0 A_JumpIf(invoker.weaponstatus[FALG_MAGTYPE]>0,"loadmag_box");
		FALG I 26 offset(2,34) A_StartSound("weapons/pocket",CHAN_WEAPON);
		FALG I 7 offset(4,34) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		FALG J 7 offset(3,38) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		FALG K 7 offset(2,34) A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		FALG L 6 offset(3,38);
		FALG M 3 offset(0,34);
		FALG N 3 {
			let mmm=hdmagammo(findinventory("HD_FALMag"));
			if(mmm){
				int roundraw=mmm.TakeMag(true);
				int roundcount=roundraw%100;
				int reccount=roundcount-(roundraw/100);

				invoker.weaponstatus[FALG_RECASTS]=reccount;
				invoker.weaponstatus[FALG_MAG]=roundcount;
				
				A_StartSound("weapons/FALdrumin",CHAN_BODY);
			}
		}
		FALG O 3;
		#### # 0 A_JumpIf(invoker.weaponstatus[FALG_CHAMBER]<=1,"chamber");
		#### # 0{
			if(
				invoker.weaponstatus[FALG_MAG]<1
				||invoker.weaponstatus[FALG_CHAMBER]>0
			)setweaponstate("reloadend");
		}
	
	/*loadmag_box:
		FAL2 I 18 offset(2,34) A_StartSound("weapons/pocket",CHAN_WEAPON);
		FAL2 I 4 offset(4,34) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		FAL2 J 4 offset(3,38) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		FAL2 K 4 offset(2,34) A_StartSound("weapons/FALmagin",CHAN_BODY);
		FAL2 L 5 offset(3,38);
		FAL2 M 2 offset(0,34);
		FAL2 N 2{
			let mmm=hdmagammo(findinventory("HD_FALBoxMag"));
			if(mmm){
				invoker.weaponstatus[FALG_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/FALmagclick",CHAN_BODY);
			}
		}
		FAL2 O 3;
		#### # 0 A_JumpIf(invoker.weaponstatus[FALG_CHAMBER]<=1,"chamber");
		#### # 0{
			if(
				invoker.weaponstatus[FALG_MAG]<1
				||invoker.weaponstatus[FALG_CHAMBER]>0
			)setweaponstate("reloadend");
		}*/
	//goto chamber;
	
	reloadend:
		---- A 0 A_JumpIf(invoker.weaponstatus[FALG_MAG]<0,"nomag_reloadend");
		FALG PQRS 3;
		goto chamber_manual;
	nomag_reloadend:	
		F5LG IHGEDCBA 2;
		goto nope;

	//altfire:
	//	falg a 1 {invoker.weaponstatus[FALG_MAGTYPE]=1;}
	//	goto nope;

	spawn:
		FALP ABC -1 nodelay{
			if(invoker.weaponstatus[FALG_MAG]<0){frame=1;}
			else if((invoker.weaponstatus[FALG_MAG]>-1)&&(invoker.weaponstatus[FALG_MAGTYPE]==1)){frame=2;}
		}
	}
	override void initializewepstats(bool idfa){
		weaponspecial = 1337;
		//weaponstatus[0]=0;
		weaponstatus[FALG_MAG]=75;
		weaponstatus[FALG_CHAMBER]=2;
		weaponstatus[FALG_MAGTYPE]=0;
		if(!idfa)weaponstatus[FALG_AUTO]=0;
	}
	
	override void loadoutconfigure(string input){

		int rof=getloadoutvar(input,"rof",1);
		if(!rof)weaponstatus[0]&=~FALF_LOWROF;
		else if(rof>0)weaponstatus[0]|=FALF_LOWROF;
	}
}
enum HDFALstatus{
	FALF_JUSTUNLOAD=1,
	FALF_LOWROF=8, 
	FALF_RECAST=16,

	FALG_FLAGS=0,
	FALG_MAG=1, //-1 unmagged
	FALG_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	FALG_AUTO=3, //0 semi, 1 burst, 2 auto
	FALG_MAGTYPE=4,  //0 drum, 1 box mag
	FALG_RECASTS=5,
}
