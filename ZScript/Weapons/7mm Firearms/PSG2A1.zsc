// ------------------------------------------------------------
// H&M PSG-1 Sniper Rifle
// ------------------------------------------------------------

class HD_PSG1:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Buger M22 Target Rifle"
		//$Sprite "G11PA0"

		obituary "%k pointed and clicked at %o.";
		weapon.kickback 25;
		weapon.slotnumber 8;
		scale 0.57;
		weapon.bobrangex 0.28;
		weapon.bobrangey 1.1;
		inventory.pickupMessage "You got the semi-auto sniper rifle!";
		//hdweapon.barrelsize 45,1,2;
		hdweapon.refid HDLD_PSG1_RIFLE;
		tag "$TAG_PSG1";
		hdweapon.loadoutcodes "
			\cusuppressor - 0/1, whether to reduce shot noise for less power
			\cureticle - 0/1, whether the reticle starts illuminated or not
			\cubulletdrop - 0-600, amount of compensation for bullet drop
			\cuzoom - 5-60, 10x the resulting FOV in degrees";
	}
	
	//\cubarrel - 0/1,
	
	override string pickupmessage(){
		if(weaponstatus[0]&PSGF_SUPPRESSOR)return "You got the suppressed semi-auto sniper rifle!";
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}
	
	/*override double gunmass(){
		return 13.8+weaponstatus[PSGS_MAG]*0.02;
	}
	
	override double weaponbulk(){
		double blx=162;
		int mgg=weaponstatus[PSGS_MAG];
		return blx+(mgg<0?0:(ENC_PSG1_MAG_LOADED+mgg*ENC_776_LOADED));
	}*/
	
	override double gunmass(){
		if(weaponstatus[0]&PSGF_SUPPRESSOR){
			double howmuch=15.8;
			return howmuch+weaponstatus[PSGS_MAG]*0.04;
		}else{
			double howmuch=14;
			return howmuch+weaponstatus[PSGS_MAG]*0.04;
		}
	}
	
	override double weaponbulk(){
		double blx=165;
		if((weaponstatus[0]&PSGF_SUPPRESSOR)){
			blx+=15;}
		int mgg=weaponstatus[PSGS_MAG];
		return blx+(mgg<0?0:(ENC_PSG1_MAG_LOADED+mgg*ENC_776_LOADED));
	}
	
	override void postbeginplay(){
		super.postbeginplay();
			//barrellength=45;
		if(weaponstatus[0]&PSGF_SUPPRESSOR){
			barrellength=52.5;
			barrelwidth=2;
			barreldepth=2.5;
		}else{
			barrellength=40;
			barrelwidth=1;
			barreldepth=2;
		}
	}
	
	override void tick(){
		super.tick();
		drainheat(PSGS_HEAT,2);
	}
	
	override void failedpickupunload(){
		failedpickupunloadmag(PSGS_MAG,"PB_PSG1_MAG");
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("SevenMilAmmo"))owner.A_DropInventory("SevenMilAmmo",amt*10);
			else owner.A_DropInventory("PB_PSG1_MAG",amt);
		}
	}
	//override string,double getpickupsprite(){
	//	return "PSGP"..((weaponstatus[PSGS_MAG]<0)?"B":"A").."0";
	//}
	
	override string,double getpickupsprite(){
		string spr;
		if(weaponstatus[PSGS_MAG]<0){
			if(weaponstatus[0]&PSGF_SUPPRESSOR)spr="D";
			else spr="B";
		}else{
			if(weaponstatus[0]&PSGF_SUPPRESSOR)spr="C";
			else spr="A";
		}
		return "PSGP"..spr.."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("PB_PSG1_MAG")));
			if(nextmagloaded>=10){
				sb.drawimage("PSGMNORM",(-48,-3),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("PSGMEMPTY",(-48,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}else sb.drawbar(
				"PSGMNORM","PSGMGRAY",
				nextmagloaded,10,
				(-48,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("PB_PSG1_MAG"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		int lod=max(hdw.weaponstatus[PSGS_MAG],0);
		sb.drawwepnum(hdw.weaponstatus[PSGS_MAG],10);


		sb.drawwepcounter(hdw.weaponstatus[PSGS_CHAMBER],
			-16,-10,"blank","RBRSA1A5","RBRSA3A7","RBRSA4A6"
		);
		
		sb.drawstring(
			sb.mAmountFont,string.format("%.1f",hdw.weaponstatus[PSGS_ZOOM]*0.1),
			(-36,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_DARKGRAY
		);
		sb.drawstring(
			sb.mAmountFont,string.format("%i",hdw.weaponstatus[PSGS_DROPADJUST]),
			(-16,-18),sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TEXT_ALIGN_RIGHT,Font.CR_WHITE
		);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Toggle laser pointer\n"
		..WEPHELP_FIREMODE.."  Toggle reticle illumination\n"
		..WEPHELP_RELOAD.."  Reload mag\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_FIREMODE.."  Zoom\n"
		..WEPHELP_ZOOM.."+"..WEPHELP_USE.."  Bullet drop\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOAD.."  Unload magazine"
		
		"\n\nThis rifle cannot accept \nrecast 7.76mm rounds."
		;
	}
	
	//copy pasted from the boss rifle with some modifications
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=Screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*2;
		bobb.y=clamp(bobb.y,-8,8);
		sb.SetClipRect(cx,cy,cw,ch);
		
			sb.drawimage(
			"PSG_SC02",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(1.24,1.24)
		);

		if(scopeview){
			int scaledwidth=89;
			int scaledyoffset=60;
			double degree=0.1*hdw.weaponstatus[PSGS_ZOOM];
			double deg=1/degree;
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(-44+bob.x,16+bob.y,scaledwidth,scaledwidth,
				sb.DI_SCREEN_CENTER
			);

			{
			sb.fill(color(255,0,0,0),
				bob.x-44,scaledyoffset+bob.y-44,
				88,88,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);

			texman.setcameratotexture(hpc,"HDXCAM_BOSS",degree);
			let cam     = texman.CheckForTexture("HDXCAM_BOSS",TexMan.Type_Any);
			let reticle = texman.CheckForTexture("bossret1",TexMan.Type_Any);

			vector2 frontoffs=(0,scaledyoffset)+bob*3;

			double camSize  = texman.GetSize(cam);
			sb.DrawCircle(cam, frontoffs, 0.125,usePixelRatio:true);
					
					//-(hdw.weaponstatus[PSGS_DROPADJUST])*0.01
					//todo: figure out how to accurately follow the bullet drop setting with the reticle
					sb.drawimage(
						((weaponstatus[PSGS_RETICLE]>0)?"PSG_RT2":"PSG_RT1"),(0,scaledyoffset)+bob*deg*5,
						sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
						scale:(1.,1.)
					);
			}
			screen.SetClipRect(cx,cy,cw,ch);

			sb.drawimage(
				((weaponstatus[PSGS_RETICLE]>0)?"PSG_SC00":"PSG_SC01"),(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(1.24,1.24)
			);
			sb.drawstring(
				sb.mAmountFont,string.format("%.1f",degree),
				(6+bob.x,105+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
				Font.CR_BLACK
			);
			sb.drawstring(
				sb.mAmountFont,string.format("%i",hdw.weaponstatus[PSGS_DROPADJUST]),
				(6+bob.x,9+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_RIGHT,
				Font.CR_BLACK
			);
		}
		// the scope display is in 10ths of an arcminute.
		// one dot = 6 arcminutes.
	}
	
	
	action void A_LaserSight()
    {
        double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(self);
		if(hdp){
			shootpos=hdp.gunpos;
		}
        FLineTraceData trace;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
				linetrace(
					hdp.gunangle,HDCONST_ONEMETRE*2500,hdp.gunpitch,
					flags:TRF_NOSKY|TRF_ABSOFFSET,
					offsetz:shootpos.z,
					offsetforward:shootpos.x,
					offsetside:shootpos.y,
					data:trace
				);
		
        Vector3 laserOfs = trace.hitLocation-pos;
		laserOfs-=trace.hitdir;
		
				if(
			trace.hittype==Trace_HitNone
			||(
				trace.hitline&&(
					trace.hitline.special==Line_Horizon
					||(
						trace.linepart==2
						&&trace.hitsector.gettexture(0)==skyflatnum
					)||(
						trace.linepart==1
						&&trace.hitline.sidedef[1]
						&&hdmath.oppositesector(trace.hitline,trace.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;
		
		a_spawnparticle(
						"ff 00 00",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:1,frandom(3.1,3.5),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:1
					);
		a_spawnparticle(
						"ff 00 00",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:4,frandom(4.1,4.9),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:0.5,0.1,-1.5
					);
    }
	

	states{

	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				A_MuzzleClimb(frandom(-0.03,0.03),
					frandom(0.1,clamp(1-pitch,
						hdplayerpawn(self)?0.06/hdplayerpawn(self).strength:0.06
					,0.2))
				);
			}
		}loop;
		
	laserpointer:
		TNT1 A 1{
			if(invoker.weaponstatus[PSGS_LASER]>0){
				A_LaserSight();
			}
		}loop;
	
	select0:
	TNT1 A 0;
		PSG1 A 0;
		#### # 0
		{
			if(invoker.weaponstatus[0]&PSGF_SUPPRESSOR)A_Overlay(2,"droop");
		}
		goto select0bfg;
	deselect0:
		PSG1 A 0;
		#### # 0;
		goto deselect0big;

	ready:
		PSG1 A 1{
		
			A_Overlay(3,"laserpointer");
			
			if(pressingzoom()){
				if(player.cmd.buttons&BT_USE){
					A_ZoomAdjust(PSGS_DROPADJUST,0,1600,BT_USE);
				}else A_ZoomAdjust(PSGS_ZOOM,5,60);
				A_WeaponReady(WRF_NONE);
			}else A_WeaponReady(WRF_ALL);
		}goto readyend;
	user3:
		---- A 0 A_MagManager("PB_PSG1_MAG");
		goto ready;
	fire:
		PSG1 A 1;
	fire2:
		PSG1 A 1{
			if(invoker.weaponstatus[PSGS_CHAMBER]==2){
				A_GunFlash();
			}else{
				if(invoker.weaponstatus[PSGS_MAG]>0)setweaponstate("chamber");
				else setweaponstate("nope");
			}
		}
		PSG1 B 1{
		
				A_StartSound("weapons/psg1/cock2",CHAN_6,volume:0.6);
				
				if(invoker.weaponstatus[PSGS_CHAMBER]==1){
				//todo: put a joke about the casings ejecting very far
				A_EjectCasing("HDSpent7mm",
					frandom(-1,2),
					(frandom(0.5,0.7),-frandom(15,15.5),frandom(0,0.2)),
					(0,0,-2)
				);}
				invoker.weaponstatus[PSGS_CHAMBER]=0;
		}
		#### A 1{
			if(invoker.weaponstatus[PSGS_MAG]>0){
				invoker.weaponstatus[PSGS_MAG]--;
				invoker.weaponstatus[PSGS_CHAMBER]=2;}
		}
		goto nope;
	
	flash:
		PSGF A 0 { //theres no actual sprite here
			invoker.weaponstatus[PSGS_HEAT]+=random(2,3);
			A_StartSound((invoker.weaponstatus[0]&PSGF_SUPPRESSOR)?"weapons/psg1/firesd":"weapons/psg1/fire",CHAN_WEAPON,CHANF_OVERLAP);
			
			if(!invoker.weaponstatus[0]&PSGF_SUPPRESSOR){A_AlertMonsters();}
			
			invoker.weaponstatus[PSGS_CHAMBER]=1;
			let bbb=HDBulletActor.FireBullet(self,(invoker.weaponstatus[0]&PSGF_SUPPRESSOR)?"HDB_776_PSGSUP":"HDB_776",
				aimoffy:(-HDCONST_GRAVITY/1000.)*invoker.weaponstatus[PSGS_DROPADJUST],
				speedfactor:(invoker.weaponstatus[0]&PSGF_SUPPRESSOR)?0.99:1.07
			);
			
			if(!invoker.weaponstatus[0]&PSGF_SUPPRESSOR){A_AlertMonsters();}
			else if(
			frandom(6,ceilingz-floorz)<bbb.speed*0.1
			){A_AlertMonsters(350);}
			
			A_ZoomRecoil(0.93);
			A_MuzzleClimb(
					0,0,
					-0.07,-0.14,
					-frandom(0.3,0.6),-frandom(1.,1.4),
					-frandom(0.2,0.4),-frandom(1.,1.4)
				);
			
			/*A_MuzzleClimb(
				0,0,
				-frandom(0.2,0.4),-frandom(0.6,1.),
				-frandom(0.4,0.7),-frandom(1.2,2.1),
				-frandom(0.4,0.7),-frandom(1.2,2.1)
			);*/
		}
		#### # 1 Bright {
		if(!invoker.weaponstatus[0]&PSGF_SUPPRESSOR)
			{
				A_Light1();
				HDFlashAlpha(-96);
			}
		}
		goto lightdone;
		
	unloadchamber:
		PSG1 A 1 offset(-1,34);
		#### A 2 offset(-2,36);
		#### B 2 offset(-3,38) 
		{
			A_StartSound("weapons/psg1/cock1",CHAN_6,volume:0.6,pitch:0.92);
			//A_StartSound("weapons/psg1/pull",CHAN_7,volume:0.6,pitch:0.92);
			{
			class<actor>which=invoker.weaponstatus[PSGS_CHAMBER]>1?"HDLoose7mm":"HDSpent7mm";
			invoker.weaponstatus[PSGS_CHAMBER]=0;
			A_EjectCasing(which,
					frandom(-1,2),
					(frandom(0.2,0.3),-frandom(7,7.5),frandom(0,0.2)),
					(0,0,-2)
				);
			}
		}
		#### B 2 offset(-5,40);
		#### B 3 offset(-4,39);
		#### B 4 offset(-5,37);
		#### A 2 offset(-2,36) A_StartSound("weapons/psg1/cock2",CHAN_6,volume:0.6);
		#### A 1 offset(0,34);
		#### AAA 2 offset(0,32);
		goto readyend;
		
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[PSGS_CHAMBER]>0,"nope");
		---- A 0 A_JumpIf(!countinv("SevenMilAmmo"),"nope");
		---- A 1;
		---- A 1 offset(0,34) A_StartSound("weapons/pocket",CHAN_5);
		#### A 2 offset(2,36);
		#### B 4 offset(3,38) A_StartSound("weapons/psg1/cock1",CHAN_6,volume:0.6,pitch:0.92);
		#### B 8 offset(5,40);
		#### B 8 offset(5,39);
		#### B 6 offset(4,39){
			if(countinv("SevenMilAmmo")){
				A_TakeInventory("SevenMilAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[PSGS_CHAMBER]=2;
				A_StartSound("weapons/rifleclick2",CHAN_7);
			}
		}
		#### B 7 offset(5,37);
		#### A 2 offset(2,36) A_StartSound("weapons/psg1/cock2",CHAN_6,volume:0.6);
		#### A 2 offset(0,34);
		goto readyend;
	user4:
	unload:
		PSG1 A 0;
		#### A 0{
			invoker.weaponstatus[0]|=PSGF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[PSGS_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[PSGS_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
		
		unload:
		---- A 1;
		PSG1 A 0{
			invoker.weaponstatus[0]|=PSGF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[PSGS_MAG]>=0  
			){
				return resolvestate("unmag");
			}else if(
				invoker.weaponstatus[PSGS_CHAMBER]>0  
			){
				return resolvestate("unloadchamber");
			}
			return resolvestate("nope");
		}
	reload:
		PSG1 A 0;
		#### A 0{
			invoker.weaponstatus[0]&=~PSGF_JUSTUNLOAD;
			if(invoker.weaponstatus[PSGS_MAG]>=10)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"PB_PSG1_MAG")){
				if(
					invoker.weaponstatus[PSGS_MAG]<0
					&&countinv("SevenMilAmmo")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}
		}goto unmag;
		
	unmag:
		PSG1 A 1 offset(0,34);
		PSG1 C 1 offset(2,36);
		PSG1 D 1 offset(4,40);
		PSG1 E 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		PSG1 E 4 offset(14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
		}
		#### E 0{
			int magamt=invoker.weaponstatus[PSGS_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[PSGS_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("PB_PSG1_MAG",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"PB_PSG1_MAG",magamt);
				A_StartSound("weapons/psg1/unload",CHAN_7);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"PB_PSG1_MAG",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		PSG1 E 7 offset(12,52)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		PSG1 E 0 A_StartSound("weapons/pocket",9);
		PSG1 EE 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		PSG1 E 0{
		}goto magout;
	magout:
		#### E 4{
			invoker.weaponstatus[PSGS_MAG]=-1;
			if(invoker.weaponstatus[0]&PSGF_JUSTUNLOAD)setweaponstate("reloaddone");
		}goto loadmag;


	loadmag:
		#### E 0 A_StartSound("weapons/pocket",9);
		#### ## 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8));
		#### # 6 offset(12,52){
			let mmm=hdmagammo(findinventory("PB_PSG1_MAG"));
			if(mmm){
				invoker.weaponstatus[PSGS_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/psg1/load",9,CHANF_OVERLAP);
			}
		}
		#### E 2 offset(8,46) A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP);
		#### E 2 offset(6,43);
		goto reloaddone;
		
		
	reloaddone:
		PSG1 D 1 offset (4,40);
		PSG1 C 1 offset (3,37);
		PSG1 A 1 offset (2,34);
		goto chamber_manual;
		
	/*chamber_manual:
		PSG1 A 1 offset(-1,34){
			if(
				invoker.weaponstatus[PSGS_CHAMBER]==2
				||invoker.weaponstatus[PSGS_MAG]<1
			)setweaponstate("nope");
		}
		PSG1 B 1 offset(-2,36){
			A_StartSound("weapons/libchamber",8,CHANF_OVERLAP);
			invoker.weaponstatus[PSGS_MAG]--;
			invoker.weaponstatus[PSGS_CHAMBER]=2;
		}
		PSG1 B 1 offset(-2,38);
		PSG1 A 1 offset(-1,34);
		goto nope;*/
		
	chamber_manual:
		PSG1 A 1 offset(-1,34){
			if(
				invoker.weaponstatus[PSGS_CHAMBER]==2
				||invoker.weaponstatus[PSGS_MAG]<1
			)setweaponstate("nope");
		}
		#### A 2 offset(-2,36);
		#### B 2 offset(-3,38) A_StartSound("weapons/psg1/cock1",CHAN_6,volume:0.6,pitch:0.92);
		#### B 1 offset(-5,40);
		#### B 2 offset(-4,39){
			invoker.weaponstatus[PSGS_MAG]--;
			invoker.weaponstatus[PSGS_CHAMBER]=2;
		}
		#### B 3 offset(-5,38);
		#### A 2 offset(-2,36) A_StartSound("weapons/psg1/cock2",CHAN_6,volume:0.6);
		#### A 1 offset(0,34);
		goto readyend;
	
	altfire:
		PSG1 A 1 offset(0,33);
		#### A 2 offset(-2,35)
		{
			A_StartSound("weapons/rifleclick2",CHAN_6,CHANF_OVERLAP,0.1);
			int scp=invoker.weaponstatus[PSGS_LASER];
			if(scp>=1)invoker.weaponstatus[PSGS_LASER]=0;
			else if(scp<0)invoker.weaponstatus[PSGS_LASER]=0;
			else invoker.weaponstatus[PSGS_LASER]++;
		}
		#### A 1 offset(-1,33);
		goto nope;
	
	user2:
	firemode:
		PSG1 A 1 offset(0,34);
		#### A 1 offset(0,36);
		#### A 2 offset(2,37)
		{
			A_StartSound("weapons/rifleclick2",CHAN_6,CHANF_OVERLAP,0.3);
			int scp=invoker.weaponstatus[PSGS_RETICLE];
			if(scp>=1)invoker.weaponstatus[PSGS_RETICLE]=0;
			else if(scp<0)invoker.weaponstatus[PSGS_RETICLE]=0;
			else invoker.weaponstatus[PSGS_RETICLE]++;
		}
		#### A 1 offset(1,36);
		#### A 1 offset(0,34);
		goto nope;
		
	
	spawn:
		PSGP ABCD -1 nodelay{
			if(invoker.weaponstatus[PSGS_MAG]<0){
				if(invoker.weaponstatus[0]&PSGF_SUPPRESSOR)frame=3;
				else frame=1;
			}else{
				if(invoker.weaponstatus[0]&PSGF_SUPPRESSOR)frame=2;
				else frame=0;
			}
		}stop;
		
	//spawn:
	//	PSGP AB -1 nodelay{
	//		if(invoker.weaponstatus[PSGS_MAG]<0)frame=1;
	//	}
	}
	override void InitializeWepStats(bool idfa){
		weaponspecial = 1337;
		weaponstatus[PSGS_CHAMBER]=2;
		weaponstatus[PSGS_MAG]=10;
		if(!idfa){
			weaponstatus[PSGS_HEAT]=0;
		}
		if(!owner){
			weaponstatus[PSGS_ZOOM]=20;
			weaponstatus[PSGS_DROPADJUST]=125;
			weaponstatus[PSGS_LASER]=0;
			weaponstatus[PSGS_RETICLE]=0;
		}
	}
	
	override void loadoutconfigure(string input){

		int reticle=getloadoutvar(input,"reticle",1);
		if(!reticle)weaponstatus[PSGS_RETICLE];
		if(reticle>=0)weaponstatus[PSGS_RETICLE]=clamp(reticle,0,1);

		int bulletdrop=getloadoutvar(input,"bulletdrop",3);
		if(bulletdrop>=0)weaponstatus[PSGS_DROPADJUST]=clamp(bulletdrop,0,1600);

		int zoom=getloadoutvar(input,"zoom",3);
		if(zoom>0)weaponstatus[PSGS_ZOOM]=clamp(zoom,5,60);
		
		//int barrel=getloadoutvar(input,"barrel",1);
		//if(!barrel)weaponstatus[0]&=~PSGF_BULLBARREL;
		//else if(barrel>0)weaponstatus[0]|=PSGF_BULLBARREL;
		
		int suppressor=getloadoutvar(input,"suppressor",1);
		if(!suppressor)weaponstatus[0]&=~PSGF_SUPPRESSOR;
		else if(suppressor>0)weaponstatus[0]|=PSGF_SUPPRESSOR;
	}
}

class HDB_776_PSGSUP:HDB_776{
	default{
		hdbulletactor.distantsound "world/riflefar";
		hdbulletactor.distantsoundvol 0.15;
	}
}

enum PSGstatus{
	PSGF_SUPPRESSOR=1,
	PSGF_JUSTUNLOAD=2,
	//PSGF_RECAST=16,

	PSGS_CHAMBER=1, //0=nothing, 1=brass, 2=loaded
	PSGS_MAG=2,
	PSGS_ZOOM=3,
	PSGS_DROPADJUST=4,
	PSGS_RETICLE=5, //reticle illumination
					//0-1 off/on
	PSGS_LASER=6,
	PSGS_HEAT=7,
	//PSGS_RECASTS=8,
}