// ------------------------------------------------------------
// SMG
// ------------------------------------------------------------

class HD_M5165:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "M5/165c"
		//$Sprite "A18NA0"

		+hdweapon.fitsinbackpack
		obituary "%o was riddled with holes by %k angry bee gun.";
		weapon.selectionorder 1004;
		weapon.slotpriority 0.35;
		weapon.slotnumber 2;
		weapon.kickback 30;
		weapon.bobrangex 0.3;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		scale 0.55;
		inventory.pickupmessage "You got the 5mm SMG! Fire a swarm of angry bees at them!";
		hdweapon.barrelsize 30,1,3;
		hdweapon.refid HDLD_M165N;
		tag "$TAG_M5165C";
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}
	
		override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_FIREMODE.."  Semi/Auto\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	override double gunmass(){
		return 9+((weaponstatus[M165_MAG]<0)?-0.5:(weaponstatus[M165_MAG]*0.01));
	}
	override double weaponbulk(){
		int mg=weaponstatus[SMGS_MAG];
		if(mg<0)return 110;
		else return (110+ENC_M165_MAG_LOADED)+mg*ENC_5MM_LOADED;
	}
	override void failedpickupunload(){
		failedpickupunloadmag(M165_MAG,"HD_M165Mag");
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HD5MM_AMMO"))owner.A_DropInventory("HD5MM_AMMO",amt*165);
			else owner.A_DropInventory("HD_M165Mag",amt);
		}
	}
	override string,double getpickupsprite(){
		return "A18P"..((weaponstatus[M165_MAG]<0)?"B":"A").."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel == 1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_M165Mag")));
			if(nextmagloaded>=165){
				sb.drawimage("A18MNORM",(-50,-2),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("A18MEMPTY",(-50,-2),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}else sb.drawbar(
				"A18MNORM","A18MGREY",
				nextmagloaded,165,
				(-50,-2),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD_M165Mag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepcounter(hdw.weaponstatus[M165_AUTO],
			-20,-12,"RBRSA3A7","STFULAUT"
		);
		sb.drawwepnum(hdw.weaponstatus[M165_MAG],165);
		/*for(int i=hdw.weaponstatus[M165_MAG];i>0;i--){
		double RIrad=19; //circle radius
		double RIx=(RIrad-0)*cos((5.1428571428571428571428571428571*i)-90);
		double RIy=(RIrad-0)*sin((5.1428571428571428571428571428571*i)-90);
		sb.drawwepdot(-27-(RIx*1),-18-(-RIy*1),(2,2));
		}*/
		
		if(hdw.weaponstatus[M165_CHAMBER]==2){sb.drawwepdot(-26,-17,(3,2));
		}else if(hdw.weaponstatus[M165_CHAMBER]==1){sb.drawwepdot(-26,-22,(3,2));
		}else{sb.drawwepdot(-26,-27,(3,2));
		}
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-2+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*3;
		bobb.y=clamp(bobb.y,-1,1);
		sb.drawimage(
			"A18S_001",(0,0.9)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(0.9,0.9)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"A18S_000",(0,-12.6)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}
	states{
	select0:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G B 0;
		#### # 0;
		goto select0big;
	deselect0:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G B 0;
		#### # 0;
		goto deselect0big;
	ready:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G B 0;
		#### # 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
	user3:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G D 0;
		#### # 0 A_MagManager("HD_M165Mag");
		goto ready;
	altfire:
	althold:
		goto nope;
	hold:
		A18G A 0{
			if(
				//full auto
				invoker.weaponstatus[M165_AUTO]==2
			)setweaponstate("fire2");
			else if(
				//burst
				invoker.weaponstatus[M165_AUTO]<1
			)setweaponstate("nope");
		}goto fire;
	user2:
	firemode:
		---- A 1			{
			int aut=invoker.weaponstatus[M165_AUTO];
			if(aut>=0){
				invoker.weaponstatus[M165_AUTO]=aut==0?1:0;
			}
		}goto nope;
	fire:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		#### D 1;
		A18G D 0;
	fire2:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G D 0;
		#### # 0{
			if(invoker.weaponstatus[M165_CHAMBER]==2
			&&invoker.weaponstatus[M165_MAG]>0){
				A_GunFlash();
			}else if (invoker.weaponstatus[M165_CHAMBER]==2
			&&invoker.weaponstatus[M165_MAG]<0){
				setweaponstate("unloadchamber");
			}else{
				if(invoker.weaponstatus[M165_MAG]>0){
				setweaponstate("loadchamber");
				}else setweaponstate("nope");
			}
		}
		A18F B 1 A_WeaponOffset(frandom(-3,3),frandom(30,33));
		#### # 0{
			if(invoker.weaponstatus[M165_CHAMBER]==1){
				A_SpawnItemEx("HDSpent5mmMR",
					cos(pitch)*1,0,height-12-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[M165_MAG]--;
				invoker.weaponstatus[M165_CHAMBER]=0;
				if(invoker.weaponstatus[M165_MAG]<=0){
					A_StartSound("weapons/A18boltfin",CHAN_WEAPON);
				}
			}
			invoker.weaponstatus[M165_CHAMBER]=2;
			if(invoker.weaponstatus[M165_AUTO]==2)A_SetTics(1);
			A_WeaponReady(WRF_NOFIRE);
		}
		TNT1 A 0 A_ReFire();
		goto ready;
	flash:
		A18G A 0{
			let bbb=HDBulletActor.FireBullet(self,"HDBullet5mmMR",spread:2.1,speedfactor:frandom(2.1,2.3));

			A_ZoomRecoil(0.995);
			A_StartSound("weapons/A18shot",CHAN_WEAPON,CHANF_OVERLAP);
			//A_StartSound("weapons/A18shot",CHAN_WEAPON, 1.5);
			invoker.weaponstatus[M165_CHAMBER]=1;
			A_MuzzleClimb(-frandom(-0.015,0.01),-frandom(0.02,0.05),-frandom(-0.04,0.05),-frandom(0.04,0.05));
			A_Light1();
		}
		A18F AC 0 A_Jump(128,"coolbeans");
	coolbeans:
		A18F # 1 bright{
			HDFlashAlpha(random(0,256));
			A_Light1();
		}
		goto lightdone;


	unloadchamber:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G D 0;
		#### # 4 A_JumpIf(invoker.weaponstatus[M165_CHAMBER]<1,"nope");
		#### # 0{
			invoker.weaponstatus[M165_CHAMBER]=0;
			A_StartSound("weapons/A18boltfwd",CHAN_WEAPON
			);
		}
		#### # 10 offset(0,47);
		
		goto readyend;
	loadchamber:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G D 0;
		#### # 0 A_JumpIf(invoker.weaponstatus[M165_CHAMBER]>0,"nope");
		#### # 1 offset(0,34) A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### # 5 offset(2,36);
		#### # 2 offset(5,40)A_StartSound("weapons/A18boltback",CHAN_WEAPON);
		#### # 4 offset(4,39){
				invoker.weaponstatus[M165_CHAMBER]=2;
			}
		#### # 6 offset(5,37);
		#### # 4 offset(2,36);
		#### # 2 offset(0,34);
		goto readyend;
	user4:
	unload:
		A18G # 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		A18G D 0;
		#### # 0{
			invoker.weaponstatus[0]|=M165F_JUSTUNLOAD;
			if(
				invoker.weaponstatus[M165_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[M165_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		A18G A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]<0,"rireload");
		#### # 0{
			invoker.weaponstatus[0]&=~M165F_JUSTUNLOAD;
			if(invoker.weaponstatus[M165_MAG]>=165)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"HD_M165Mag")){
				if(
					invoker.weaponstatus[M165_MAG]<0
					&&countinv("HD5MM_AMMO")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}
		}goto unmag;
	unmag:
		A18G A 1 offset(5,34) A_SetCrosshair(21);
		A18G A 2 offset(8,34);
		A18G A 3 offset(14,36);
		A18G E 3 offset(21,38);
		A18G F 4 offset(28,42) A_StartSound("weapons/A18drumout",CHAN_WEAPON);
		A18G G 6 offset(34,54){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		}
		A18G H 5 offset(36,56);
		A18G I 5 offset(34,54);
		A18G # 0{
			int magamt=invoker.weaponstatus[M165_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[M165_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_M165Mag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_M165Mag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_M165Mag",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	rireload:
		A18G # 0{
			invoker.weaponstatus[0]&=~M165F_JUSTUNLOAD;
			if(invoker.weaponstatus[M165_MAG]>=165)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"HD_M165Mag")){
				if(
					invoker.weaponstatus[M165_MAG]<0
					&&countinv("HD5MM_AMMO")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}
		}goto riunmag;
	riunmag:
		A18G B 1 offset(0,34) A_SetCrosshair(21);
		A18G C 5 offset(8,40);
		A18G C 5 offset(16,44);
		A18G D 5 offset(25,50);
		A18G D 5 offset(34,54){
			A_MuzzleClimb(0.3,0.4);
			A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		}
		A18G J 0{
			int magamt=invoker.weaponstatus[M165_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[M165_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_M165Mag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_M165Mag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_M165Mag",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### # 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		#### # 0;
		#### J 7 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### # 7 offset(36,52) A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### # 7 offset(36,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### # 7 offset(34,54) A_StartSound("weapons/pocket",CHAN_WEAPON);
	magout:
		#### J 0 A_JumpIf(invoker.weaponstatus[M165_MAG]>-1,2);
		#### J 0;
		#### J 0{
			if(invoker.weaponstatus[0]&M165F_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		A18G J 16 offset(34,54) A_StartSound("weapons/pocket",CHAN_WEAPON);
		A18G I 4 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		A18G H 4 offset(30,48) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		A18G G 4 offset(24,44) A_StartSound("weapons/smgmagmove",CHAN_WEAPON);
		A18G F 5 offset(12,38);
		A18G K 6 offset(0,34){
			let mmm=hdmagammo(findinventory("HD_M165Mag"));
			if(mmm){
				invoker.weaponstatus[M165_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/A18drumin",CHAN_BODY);
			}
		}
		A18G K 4 offset(-1,33);
		A18G E 3 offset(0,33);
		A18G A 1 offset(0,33);
		#### # 0 A_JumpIf(invoker.weaponstatus[M165_CHAMBER]<=1,"loadchamber");
		#### # 0{
			if(
				invoker.weaponstatus[M165_MAG]<1
				||invoker.weaponstatus[M165_CHAMBER]>0
			)setweaponstate("reloadend");
		}
	chamber:
		A18G E 2 offset(33,50){
			invoker.weaponstatus[M165_CHAMBER]=0;
		}
		A18G A 4 offset(32,49) A_StartSound("weapons/smgchamber",CHAN_WEAPON);

	reloadend:
		---- A 0 A_JumpIf(invoker.weaponstatus[M165_MAG]<0,"rireloadend");
		A18G # 3 offset(0,35);
		A18G # 2 offset(0,34);
		A18G # 1 offset(0,33);
		A18G # 1 offset(0,32);
		A18G # 1 offset(0,32);
		goto nope;
	rireloadend:	
		A18G J 10 offset(34,54);
		A18G D 3 offset(12,43);
		A18G C 3 offset(6,37);
		A18G B 3 offset(3,32);
		goto nope;

	spawn:
		A18P A -1 nodelay{
			if(invoker.weaponstatus[M165_MAG]<0)frame=1;
		}
	}
	override void initializewepstats(bool idfa){
		weaponspecial = 1337;
		weaponstatus[0]=0;
		weaponstatus[M165_MAG]=165;
		weaponstatus[M165_CHAMBER]=2;
		if(!idfa)weaponstatus[M165_AUTO]=0;
	}
}
enum M165tatus{
	M165F_JUSTUNLOAD=1,

	M165_FLAGS=0,
	M165_MAG=1, //-1 unmagged
	M165_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	M165_AUTO=3, //0 semi, 1 burst, 2 auto
};
