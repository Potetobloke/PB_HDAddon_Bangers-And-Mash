const HDLD_KILLERBEE="hbe";
const HDLD_KILLERBEE_AMMO="hba";

const ENC_KILLERBEE_AMMO=65;

class HDCGM25_WEP:HDWeapon{
	Array<Actor> stingertarget;
	int targettimer;
	int targetlocked;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "DLaM CGM-25"
		//$Sprite "CGMPA0"

		-hdweapon.fitsinbackpack
		//+weapon.cheatnotweapon
		weapon.selectionorder 1;
		weapon.slotnumber 5;
		weapon.kickback 30;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.725;
		inventory.pickupmessage "You got the homing missile launcher!";
		obituary "%o was stung by %k's Honey Bee.";
		hdweapon.barrelsize 28,3.1,3;
		tag "DLAaM IHML-98 ''Honey Bee''";
		hdweapon.refid HDLD_KILLERBEE;
	}
	
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<64)
		{
			targettimer++;
		}
		else
		{
			targettimer=0;
			targetlocked=0;
			stingertarget.Clear();
		}
	}
	
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(FIM92S_HEAT,6);
	}
	override void postbeginplay(){
		super.postbeginplay();
		}
	override double gunmass(){
		double amt=weaponstatus[FIM92S_CHAMBER];
		return 12+amt*2;
	}
	override double weaponbulk(){
		int rkt=weaponstatus[FIM92S_CHAMBER];
		if(rkt<1)return 85;
		else return 125;
	}
	override string,double getpickupsprite(){return "F43PA0",1.0;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			//sb.drawnum(hpl.countinv("HDAT4_WEP"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		if(hdw.weaponstatus[FIM92S_CHAMBER]>1)
		{
			//sb.drawrect(-22,-15,3,2);
			sb.drawrect(-36,-18,4,8);
			sb.drawrect(-43,-15,2,2);
			sb.drawrect(-18,-18,4,8);
			sb.drawrect(-42,-16,29,4);
		}
		
		sb.drawwepnum(
			hpl.countinv("StingerTubeRound"),
			(HDCONST_MAXPOCKETSPACE/ENC_KILLERBEE_AMMO)
		);
		if(sb.hudlevel==1){
			sb.drawimage("KBEE_AM0",(-48,-2),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.7,0.7));
			sb.drawnum(hpl.countinv("StingerTubeRound"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
	}
	
	action void A_FireStinger(){
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("HD_Stinger_Rocket").height*0.6));
		let ggg=HD_Stinger_Rocket(spawn("HD_Stinger_Rocket",gpos,ALLOW_REPLACE));

		let hdp=hdplayerpawn(self);
		if(hdp){
			ggg.angle=hdp.gunangle;
			ggg.pitch=hdp.gunpitch-2;
		}else{
			ggg.angle=angle;
			ggg.pitch=pitch-2;
		}
		ggg.angle=angle;ggg.pitch=pitch-0;ggg.target=self;ggg.master=self;
		ggg.primed=true; 
		
		if(invoker.stingertarget.Size()>0)
		{
			ggg.tracer=invoker.stingertarget[0];
		}else ggg.tracer=null;
		
		invoker.stingertarget.Delete(0);
	}
	
	action void Stinger_CheckTarget(){
	
		let hdp=HDPlayerPawn(self);
        FLineTraceData trace;
		
		double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		if(hdp){
			shootpos=hdp.gunpos;
		}
       flinetracedata sgtargetline;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
		bool sgtarget=linetrace(
			hdp.gunangle,HDCONST_ONEMETRE*500,hdp.gunpitch,
			flags:TRF_NOSKY|TRF_ABSOFFSET,
			offsetz:shootpos.z,
			offsetforward:shootpos.x,
			offsetside:shootpos.y,
			data: sgtargetline);
		
		//A_LaserSight();
		
		if(!sgtarget)return;
		
		actor stgt=sgtargetline.hitactor;
		
		if( //code from HERP
			stgt
			//&&isHostile(stgt)
			&&stgt.bshootable
			//&&!stgt.bnotarget
			//&&!stgt.bnevertarget
			//&&(stgt.bismonster||stgt.player)
			&&(!stgt.player||!(stgt.player.cheats&CF_NOTARGET))
			&&stgt.health>random((stgt.vel==(0,0,0))?0:-10,5)
			//&&stgt.checksight(self)
		)
		{
			setweaponstate("TargetFound",5);
			if(invoker.stingertarget.Size()>1)
				{
					invoker.stingertarget.Delete(0);
					invoker.targettimer=0;
					invoker.targetlocked=0;
				}
			for(int i = 0; i < invoker.stingertarget.Size(); i++)
			{ // Check if this target is already in the list...
				if(invoker.stingertarget[i] == stgt)
				{
					return;
				}
			}
			invoker.stingertarget.Push(stgt);
		}
		
	}
	
	action void A_HDBackBlast()
	{
		let hdp=hdplayerpawn(self);
		double shootangle = hdp.angle-180;
		
		vector3 gpos=pos+gunpos((0,0,-getdefaultbytype("HD_Backblast_Safe").height*0.6));

        let blst=actor(spawn("HD_Backblast_Safe",gpos,
            ALLOW_REPLACE)
        );
        blst.angle=shootangle;
        blst.pitch=pitch-180;
        blst.target=self;
        blst.master=self;
        blst.vel.xy = (cos(shootangle) * 60, sin(shootangle) * 60);
        blst.vel.z=-sin(pitch)*-60;
	}
	
	action void A_LaserSight()
    {
        double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(self);
		if(hdp){
			shootpos=hdp.gunpos;
		}
        FLineTraceData trace;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
				linetrace(
					hdp.gunangle,HDCONST_ONEMETRE*2500,hdp.gunpitch,
					flags:TRF_NOSKY|TRF_ABSOFFSET,
					offsetz:shootpos.z,
					offsetforward:shootpos.x,
					offsetside:shootpos.y,
					data:trace
				);
		
        Vector3 laserOfs = trace.hitLocation-pos;
		laserOfs-=trace.hitdir;
		
				if(
			trace.hittype==Trace_HitNone
			||(
				trace.hitline&&(
					trace.hitline.special==Line_Horizon
					||(
						trace.linepart==2
						&&trace.hitsector.gettexture(0)==skyflatnum
					)||(
						trace.linepart==1
						&&trace.hitline.sidedef[1]
						&&hdmath.oppositesector(trace.hitline,trace.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;
		
		a_spawnparticleex(
						"ff 00 00",TexMan.CheckForTexture("lasfx000"),STYLE_ADD,SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:1,frandom(9.1,9.5),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:1
					);
		a_spawnparticleex(
						"ff 00 00",TexMan.CheckForTexture("lasfx000"),STYLE_ADD,SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:4,frandom(12.1,12.9),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:0.5,0.1,-1.5
					);
    }
	
	//copy pasted from the boss rifle with some modifications
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=Screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		//vector2 bobb=bob*1.1;

		sb.SetClipRect(cx,cy,cw,ch);

		if(scopeview){
			int scaledwidth=89;
			int scaledyoffset=60;
			double degree=5;
			double deg=1/degree;
			int cx,cy,cw,ch;
			[cx,cy,cw,ch]=screen.GetClipRect();
			sb.SetClipRect(-44+bob.x,16+bob.y,scaledwidth,scaledwidth,
				sb.DI_SCREEN_CENTER
			);

			{
			sb.fill(color(255,31,0,0),bob.x-44,scaledyoffset+bob.y-44,
				88,88,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);

			texman.setcameratotexture(hpc,"HDXCAM_BOSS",degree);
			let cam     = texman.CheckForTexture("HDXCAM_BOSS",TexMan.Type_Any);

			vector2 frontoffs=(0,scaledyoffset)+bob*3;

			double camSize  = texman.GetSize(cam);
			sb.DrawCircle(cam, frontoffs, 0.125,usePixelRatio:true);
					
			}
			screen.SetClipRect(cx,cy,cw,ch);

			sb.drawimage("PSG_SC00",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(1.24,1.24)
			);
			
			sb.drawimage(
				"kbee_rt0",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
			);
			
			if(weaponstatus[FIM92S_TARGETFOUND]>=2)
			{
			sb.drawimage(
				"kbee_rt1",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				,scale:(0.5,0.5)
			);
			}
			
			sb.drawstring(
			sb.pnewsmallfont,((targetlocked>0)?"-FIRE-":"------"),
				(bob.x-13,25+bob.y),sb.DI_SCREEN_CENTER|sb.DI_TEXT_ALIGN_LEFT,
				Font.CR_RED,scale:(0.5,0.5)
			);
		}
		// the scope display is in 10ths of an arcminute.
		// one dot = 6 arcminutes.
	}
	
	
	override string gethelptext(){
		LocalizeHelp();
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."   Clear Targetting System\n"
		..WEPHELP_RELOADRELOAD
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	states{
	
	targetcheck:
		TNT1 A 0 {Stinger_CheckTarget();}
		TNT1 A 1 
		{
			invoker.weaponstatus[FIM92S_TARGETFOUND]--;
			if(invoker.weaponstatus[FIM92S_CHAMBER]>1&&invoker.targetlocked>=1)A_Overlay(8,"beepsound",true);
		}
		loop;
	targetfound:
		TNT1 A 1 
		{
			/*if(player&&hdweapon(player.readyweapon)){
			player.cmd.buttons|=BT_ATTACK;
			}*/
			invoker.weaponstatus[FIM92S_TARGETFOUND]=2;
			invoker.targettimer=0;
			//invoker.targetlocked=1;
			
			if(invoker.weaponstatus[FIM92S_CHAMBER]>1){A_LaserSight();A_Overlay(8,"beepsound",true);}
		}
		//TNT1 A 0 {setweaponstate("targetcheck",5);}
		goto targetcheck;
	beepsound:
		TNT1 A 0 
		{if(invoker.weaponstatus[FIM92S_CHAMBER]>1&&invoker.targetlocked>=1)setweaponstate("beepsound2",8);}
		TNT1 A 10 A_StartSound("weapons/stinger/beep/locked",CHAN_6,volume:0.36,5);
		TNT1 A 0 {invoker.targetlocked=1;}
		stop;
	beepsound2:
		TNT1 A 5 A_StartSound("weapons/stinger/beep",CHAN_6,volume:0.36,5);
		stop;
	
	select0:
		F43G A 0 A_Overlay(5,"targetcheck");
		F43G A 0;
		goto select0bfg;
	deselect0:
		F43G A 0;
		goto deselect0bfg;
	ready:
		F43G A 1 
		{
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
		
	altfire:
		#### # 1 offset(0,33);
		#### # 2 offset(2,35)
		{
			A_StartSound("weapons/rifleclick2",CHAN_6,CHANF_OVERLAP,0.1);
			A_SetCrosshair(21);
			invoker.stingertarget.Clear();
			invoker.targettimer=0;
			invoker.targetlocked=0;
			//A_WeaponBusy();
		}
		#### # 1 offset(-1,33);
		goto nope;
		
	fire:
		F43G A 1 offset(0,34){
			if(invoker.weaponstatus[FIM92S_CHAMBER]>1&&invoker.targetlocked>=1){//&&invoker.targetlocked>=1
				setweaponstate("fire.real");
			}
		}
		goto nope;
	fire.real:
		F43G A 1 offset(0,37)
		{
			A_FireStinger();
			
			A_HDBackBlast();
			A_GunFlash();
			A_StartSound("weapons/CGMFire",CHAN_WEAPON);
			A_StartSound("weapons/rockignite",CHAN_AUTO);
			A_StartSound("weapons/rockboom",5);
			invoker.weaponstatus[FIM92S_CHAMBER]=1;
			invoker.weaponstatus[FIM92S_HEAT]+=53;
			A_WeaponOffset(frandom(-3,3),frandom(30,33));
		}
		F43G B 1 offset(2,35) A_MuzzleClimb(-frandom(1.9,2.),-frandom(2.3,2.6),frandom(1.5,1.6),frandom(1.6,1.8));
		F43G A 2 offset(1,33);
		F43G A 3;
		goto altfire;
	flash:
		TNT1 A 1 bright{
			HDFlashAlpha(0,true);
			A_Light1();
		}
		TNT1 A 2{
			A_ZoomRecoil(0.5);
			A_Light0();
		}
		stop;

	reload:
		#### A 0{
			invoker.weaponstatus[0]&=~FIM92F_JUSTUNLOAD;
			if(
				invoker.weaponstatus[FIM92S_CHAMBER]>1
				||(
					!hd_instagib
					&&!countinv("StingerTubeRound")
				)
			)setweaponstate("nope");
		}goto unloadstart;
	unload:
		#### A 0{
			invoker.weaponstatus[0]|=FIM92F_JUSTUNLOAD;
		}goto unloadstart;

	unloadstart:
		#### A 1;
		#### AAA 2 A_MuzzleClimb(
			-frandom(0.5,0.6),frandom(0.5,0.6),
			-frandom(0.5,0.6),frandom(0.5,0.6)
		);
		#### A 1 offset(1,34);
		#### A 1 offset(2,44) A_SetTics(invoker.weaponstatus[FIM92S_HEAT]>>3);
		#### A 1 offset(3,42) A_StartSound("weapons/stinger/open",8,CHANF_OVERLAP);
		#### A 3 offset(4,44){
			int chm=invoker.weaponstatus[FIM92S_CHAMBER];
			int bheat=invoker.weaponstatus[FIM92S_HEAT];
			invoker.weaponstatus[FIM92S_CHAMBER]=0;
			if(chm<1){
				A_SetTics(3+max(0,bheat-20));
				return;
			}

			//A_StartSound("weapons/stinger/load",8,CHANF_OVERLAP);
			if(chm>1){
				let bbr=A_EjectCasing("StingerMissileCasing_Loaded",
				frandom(-0.5,0.5),
				(frandom(-0.5,0.5),frandom(-0.5,0.5),-4),(-7,0,-6));
				
			}if(chm==1){
				A_StartSound("misc/fwoosh",8,CHANF_OVERLAP,
					volume:0.01*bheat
				);
				
				A_EjectCasing("StingerMissileCasing",
				frandom(-0.5,0.5),
				(frandom(-0.5,0.5),frandom(-0.5,0.5),-4),(-7,0,-6));}
		}
		#### A 1 offset(6,46);
		#### A 1 offset(8,48){
			if(!(invoker.weaponstatus[0]&FIM92F_JUSTUNLOAD))A_StartSound("weapons/pocket",9,CHANF_OVERLAP);
		}
		#### A 1 offset(9,52);
		#### A 1 offset(9,58);
		#### A 1 offset(10,74);
		#### A 1 offset(12,82);
		#### A 3;
		#### B 9 offset(10,88);
		#### B 2 offset(12,90);//A_StartSound("weapons/stinger/load",8,CHANF_OVERLAP);
		#### A 0 A_JumpIf(invoker.weaponstatus[0]&FIM92F_JUSTUNLOAD,4);
		#### B 3 offset(10,88){
			if(invoker.weaponstatus[0]&FIM92F_JUSTUNLOAD)return;
			invoker.weaponstatus[FIM92S_CHAMBER]=2;
			A_TakeInventory("StingerTubeRound",1,TIF_NOTAKEINFINITE);
			A_StartSound("weapons/stinger/load",8,CHANF_OVERLAP);
		}
		#### BB 1 offset(10,84);
		#### B 4 offset(11,88);
		#### B 5 offset(10,87);
		#### A 2 offset(8,87);
		#### A 2 offset(4,80);
		#### A 2 offset(2,76);
		#### A 2 offset(0,73);
		#### A 2 offset(0,62);
	reloadend:
		#### A 2 offset(0,58) A_StartSound("weapons/stinger/close",8,CHANF_OVERLAP);
		#### A 2 offset(0,54);
		#### A 2 offset(0,46);
		#### A 2 offset(0,33);
		#### AA 2 offset(0,34);
		#### A 0 A_JumpIf(pressingunload(),"nope");
		goto ready;

	spawn:
		F43P AB -1 nodelay{
			if(invoker.weaponstatus[FIM92S_CHAMBER]==1)frame=1;
			else if (invoker.weaponstatus[FIM92S_CHAMBER]<=0)frame=2;
		}
	
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[FIM92S_CHAMBER]=2;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[FIM92S_HEAT]=0;
		}
	}
}
enum stingerrocketstatus{
	FIM92F_JUSTUNLOAD=1,

	FIM92S_STATUS=0,
	FIM92S_CHAMBER=1,
	FIM92S_HEAT=2,
	FIM92S_TARGETTER=3,
	FIM92S_TARGETFOUND=4,
};

class HD_Stinger_Rocket:RocketGrenade{
	default{
		+forcepain
		+seekermissile
		+notargetswitch
		scale 0.7; woundhealth 35;
		stamina 25; mass 200;
		//speed 295;
		decal "BrontoScorch";
	}
	override void ExplodeSlowMissile(line blockingline,actor blockingobject){
		if(max(abs(skypos.x),abs(skypos.y))>=32768){destroy();return;}
		bmissile=false;
		//bounce
		//nothing here - HEAT will always explode

		//explosion
		if(inthesky){
			distantnoise.make(self,"world/rocketfar");
			let aaa=spawn("IdleDummy",pos);
			if(!!aaa){
				aaa.stamina=30;
				aaa.setz(clamp(aaa.pos.z,aaa.floorz,aaa.ceilingz));
				aaa.A_StartSound("world/explode",CHAN_BODY,CHANF_OVERLAP);
			}
		}else{
			actor xpl=spawn("Gyrosploder",self.pos-(0,0,1),ALLOW_REPLACE);
			xpl.target=target;xpl.master=master;xpl.stamina=stamina;
			actor aaa=Spawn("WallChunker",pos,ALLOW_REPLACE);
			xpl=spawn("HDExplosionWP",pos,ALLOW_REPLACE);aaa.vel.z=2;
			xpl=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa.scale.x=1.5;
			aaa.scale.y=1.5;
			
			A_ChangeVelocity(0,0,0);
			
				//A_SpawnChunks("HDWPSmokeChunkA",4,2,2,360,360);
				//A_SpawnChunks("HDWPSmokeChunkB",12,2,2,360,360);
				
			for(int i=0;i<16;i++)
			{
				//A_SpawnItemEx("HDWPSmokeChunkA",yvel:frandom(6,12),zvel:frandom(1,12),frandom(0,360));
				A_SpawnItemEx("HDWPSmokeChunkB",yvel:frandom(1,12),zvel:frandom(1,12),frandom(0,360));
			}
			
			for(int i=0;i<4;i++)
			{
				A_SpawnItemEx("HDWPSmokeChunkA",frandom(-12,12),frandom(-12,12),frandom(-12,12),yvel:frandom(6,12),zvel:frandom(1,12),frandom(0,360));
			}

			//damage
			HEATShot(self,192);

			A_SprayDecal("BrontoScorch",16);
		}
		A_HDBlast(
			pushradius:1024,pushamount:128,fullpushradius:256,
			fragradius:HDCONST_ONEMETRE*(15+0.2*stamina),fragtype:"HDB_fragRL",
			immolateradius:256,immolateamount:random(3,60),
			immolatechance:256
		);
		A_SpawnChunksFrags("HDB_fragRL",180);
		destroy();return;
	}
	states{
	spawn:
		MISL A 3 nodelay{
			primed=true;
			if(Wads.CheckNumForName("id",0)!=-1){scale.x=0.24;scale.y=0.24;}
		}
		goto spawn1;
	}
	static void HEATShot(actor caller,double squirtamt){
		vector3 originalpos=caller.pos;

		//do a series of linetracers to drill through everything
		caller.A_SprayDecal("BigScorch",squirtamt);
		array<actor>hitactors;hitactors.clear();
		flinetracedata sqtrace;
		do{
			caller.linetrace(
				caller.angle,
				squirtamt,
				caller.pitch,
				data:sqtrace
			);

			caller.setorigin(sqtrace.hitlocation-sqtrace.hitdir,false);
			if(sqtrace.hitactor){
				int dmgg=int(frandom(70,240+squirtamt));
				int dangle=int(absangle(caller.angle,caller.angleto(sqtrace.hitactor)));
				bool crapshot=dangle>40;
				if(dangle<20){
					dmgg+=int((180-dangle)*squirtamt*frandom(0.4,0.45));
					if(hd_debug)console.printf("CRIT!");
				}else if(!crapshot)dmgg+=int(frandom(100,400-dangle+squirtamt*2));
				int originalhealth=sqtrace.hitactor.health;
				sqtrace.hitactor.damagemobj(
					caller,caller.target,dmgg,crapshot?"Slashing":"Piercing",
					crapshot?0:DMG_NO_ARMOR
				);
				int fdmg=0;
				if(sqtrace.hitactor){
					fdmg=originalhealth-sqtrace.hitactor.health;
					if(
						sqtrace.hitactor.health>0
						&&(fdmg<<3)<sqtrace.hitactor.spawnhealth()
					)break;
					else{
						hitactors.push(sqtrace.hitactor);
						sqtrace.hitactor.bnonshootable=true;
					}
				}
				squirtamt-=max(8,fdmg>>6);
			}else{
				doordestroyer.destroydoor(caller,maxwidth:squirtamt*frandom(1.3,1.6),dedicated:true);
				squirtamt-=max(16,sqtrace.distance);
			}
		}while(squirtamt>0);
		for(int i=0;i<hitactors.size();i++){
			if(hitactors[i])hitactors[i].bnonshootable=false;
		}
		vector3 finalpos=caller.pos;
		caller.setorigin(originalpos,false);

		if(finalpos!=originalpos){
			int iii=int((finalpos-originalpos).length());
			vector3 trailpos=(0,0,0);
			vector3 vu=caller.vel.unit();
			vector3 vu2=vu*4;
			for(int i=0;i<iii;i++){
				trailpos+=vu;
				caller.A_SpawnParticle(
					"white",
					SPF_FULLBRIGHT,
					5,
					frandom(0.04,0.07)*(iii-i*0.5),
					caller.angle,
					trailpos.x+frandom(-12,12),trailpos.y+frandom(-12,12),trailpos.z+frandom(-12,12),
					vu2.x,vu2.y,vu2.z,
					0,0,0.6,
					sizestep:4
				);
			}
		}
	}
	
	states{
	spawn:
		stms zzz 1
		{
				actor sss=spawn("HDSmokeWP_Trail",pos,ALLOW_REPLACE);
				sss.vel=vel*0.01;
		}
	spawnrocket:
		#### z 1{
			{  
				if(!inthesky){
					brockettrail=true;
					A_StartSound("weapons/rocklaunch",5);
				}
				actor sss=spawn("HDSmokeWP_Trail",pos,ALLOW_REPLACE);
				sss.vel=vel*0.01;
				
				A_ChangeVelocity(
					cos(pitch)*40,0,
					sin(-pitch)*40,CVF_RELATIVE
				);
				
				A_SeekerMissile(85,85,SMF_CURSPEED|SMF_PRECISE);
				
				HDMobAI.Frighten(self,512);
				
				stamina--;
			}
		}
		wait;
	death:
		TNT1 A 1;
		stop;
	}
}

class StingerTubeRound:HDAmmo{
	default{
		+inventory.ignoreskill
		+forcexybillboard
		inventory.pickupmessage "Picked up a ''Honey Bee'' missile tube.";
		tag "''Honey Bee'' Rocket Tube";
		inventory.icon "F43PD0";
		hdpickup.refid HDLD_KILLERBEE_AMMO;
		hdpickup.bulk ENC_KILLERBEE_AMMO;
		scale 0.725;
	}
	override void GetItemsThatUseThis(){
		itemsthatusethis.push("HDCGM25_WEP");
	}
	states{
	spawn:
		F43P D -1;
		stop;
	}
}

class StingerMissileCasing:HDDebris{
	default{
		scale 0.725;height 4;radius 2;bouncefactor 0;
		//bouncesound "weapons/stinger/bounce";
	}
	states{
	spawn:
		F43P F 0 nodelay A_ChangeVelocity(cos(pitch),0,sin(-pitch)+1,CVF_RELATIVE);
	spawn2:
		F43P F random(1,3){angle+=45;}
		loop;
	death:
		#### # -1{
			frame=randompick(4,4,4,4,6,6,6);
			A_FaceMovementDirection();
			angle+=90;
			A_StartSound("weapons/stinger/bounce",flags:CHANF_OVERLAP,0.75,1);
		}
		stop;
	}
}

class StingerMissileCasing_Loaded:StingerMissileCasing{
	default{
		height 4;radius 7;bouncefactor 0;
		//bouncesound "weapons/stinger/bounce";
	}
	states{
	spawn:
		F43P D 0 nodelay A_ChangeVelocity(cos(pitch),0,sin(-pitch)+1,CVF_RELATIVE);
	spawn2:
		F43P D random(1,3){angle+=45;}
		loop;
	death:
		TNT1 A 0{
			actor a=spawn("StingerTubeRound",self.pos,ALLOW_REPLACE);
			a.roll=self.roll;a.vel=self.vel;
			self.destroy(); a.A_StartSound("weapons/stinger/bounce",flags:CHANF_OVERLAP,0.75,1,0.9);
		}stop;
	}
}

class HD_Backblast_Safe:manjuice{
	default{
		missiletype "manjuicetrail";
		speed 60;
		scale 0.9;
		seesound "misc/fwoosh";deathsound "misc/fwoosh";
		activesound "misc/fwoosh";
	}
	states{
	spawn:
		RSMK A 1 A_StartSound("misc/fwoosh",CHAN_7);
		RSMK B 1;
	death:
		RMSK B 0{
			vel.z+=1.;
			A_HDBlast(
				64,15,16,"thermal");
			//A_SpawnChunks("HDSmokeChunk",random(2,4),6,20);
			scale.x*=1.1;
			scale.y*=1.1;
		}
		RSMK CDE 1{
		A_HDBlast(
				25,35,16,"thermal");
			
			vel.x+=1.5;
			scale.x*=1.1;
			scale.y*=1.1;
		}stop;
	}
}