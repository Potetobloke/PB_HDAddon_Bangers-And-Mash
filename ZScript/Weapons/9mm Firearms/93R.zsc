// ------------------------------------------------------------
// Pistol
// ------------------------------------------------------------
class HDRafficaPistol:HDHandgun{
	default{
		+hdweapon.fitsinbackpack
		+hdweapon.reverseguninertia
		scale 0.63;
		weapon.selectionorder 50;
		weapon.slotnumber 2;
		weapon.slotpriority 2;
		weapon.kickback 30;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		// Both the obituary and pickup message should be made unique later for language sake. - [Ted]
		obituary "$OB_PISTOL";
		inventory.pickupmessage "$PICKUP_PISTOL";
		tag "$TAG_93R";
		hdweapon.refid HDLD_RAFFICAPISTOL;
		hdweapon.barrelsize 19,0.3,0.5;

		hdweapon.loadoutcodes "
			\cuselectfire - 0/1, whether it has a fire selector
			\cufiremode - 0/1, semi/auto, subject to the above";
	}
	
	override double weaponbulk(){
		int mgg=weaponstatus[PISS_MAG];
		return 30+(mgg<0?0:(ENC_9MAG_LOADED+mgg*ENC_9_LOADED));
	}
	override double gunmass(){
		int mgg=weaponstatus[BPSG_MAG];
		return 3.5+(mgg<0?0:0.08*(mgg+1));
	}
	override void failedpickupunload(){
		failedpickupunloadmag(BPSG_MAG,"HD9mMag15");
	}
	override string,double getpickupsprite(){
		return "93RP"..((weaponstatus[BPSG_CHAMBER]<1)?"B":"A").."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD9mMag15")));
			if(nextmagloaded>=15){
				sb.drawimage("CLP2NORM",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextmagloaded<1){
				sb.drawimage("CLP2EMPTY",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"CLP2NORM","CLP2GREY",
				nextmagloaded,15,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD9mMag15"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		sb.drawwepcounter(hdw.weaponstatus[BPSG_FIREMODE],
			-22,-10,"RBRSA3A7","STBURAUT"
		);
		
		sb.drawwepnum(hdw.weaponstatus[BPSG_MAG],15);
		if(hdw.weaponstatus[BPSG_CHAMBER]==2)sb.drawrect(-19,-11,3,1);
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..((weaponstatus[0])?(WEPHELP_FIREMODE.."  Semi/Burst\n"):"")
		..WEPHELP_RELOAD.."  Reload mag\n"
		..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload chamber\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		vector2 scc;
		vector2 bobb=bob*1.3;

		//if slide is pushed back, throw sights off line
		if(hpl.player.getpsprite(PSP_WEAPON).frame>=2){
			sb.SetClipRect(
				-10+bob.x,-10+bob.y,20,19,
				sb.DI_SCREEN_CENTER
			);
			bobb.y-=2;
			scc=(0.7,0.8);
		}else{
			sb.SetClipRect(
				-8+bob.x,-9+bob.y,16,15,
				sb.DI_SCREEN_CENTER
			);
			scc=(0.6,0.6);
		}
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:scc
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"backsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,
			scale:scc
		);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HDPistolAmmo"))owner.A_DropInventory("HDPistolAmmo",amt*15);
			else owner.A_DropInventory("HD9mMag15",amt);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("HDPistolAmmo");
		ForceOneBasicAmmo("HD9mMag15");
	}
	action void A_CheckPistolHand(){
		if(invoker.wronghand)player.getpsprite(PSP_WEAPON).sprite=getspriteindex("PI2GA0");
	}
	states{
	select0:
		93RG A 0{
			if(!countinv("NulledWeapon"))invoker.wronghand=false;
			A_TakeInventory("NulledWeapon");
			A_CheckPistolHand();
		}
		#### A 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,2);
		#### F 0;
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
	deselect0:
		93RG A 0 A_CheckPistolHand();
		#### A 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,2);
		#### F 0;
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;

	ready:
		93RG A 0 A_CheckPistolHand();
		#### A 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,2);
		#### F 0;
		#### # 0 A_SetCrosshair(21);
		#### # 1 
		{
			A_WeaponReady(WRF_ALL);
			invoker.weaponstatus[BPSG_FIRED]=0;
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HD9mMag15");
		goto ready;
	user2:
	firemode:
		---- A 1{
			int aut=invoker.weaponstatus[BPSG_FIREMODE];
			if(aut>=1)invoker.weaponstatus[BPSG_FIREMODE]=0;
			else if(aut<0)invoker.weaponstatus[BPSG_FIREMODE]=0;
			else invoker.weaponstatus[BPSG_FIREMODE]++;
		}goto nope;
	altfire:
		---- A 0{
			invoker.weaponstatus[0]&=~BPSF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[BPSG_CHAMBER]!=2
				&&invoker.weaponstatus[BPSG_MAG]>0
			)setweaponstate("chamber_manual");
		}goto nope;
	chamber_manual:
		---- A 0 A_JumpIf(
			!(invoker.weaponstatus[0]&BPSF_JUSTUNLOAD)
			&&(
				invoker.weaponstatus[BPSG_CHAMBER]==2
				||invoker.weaponstatus[BPSG_MAG]<1
			)
			,"nope"
		);
		#### F 3 offset(0,34);
		#### E 4 offset(0,37){
			A_MuzzleClimb(frandom(0.4,0.5),-frandom(0.6,0.8));
			A_StartSound("weapons/93r/slideback",8);
			int psch=invoker.weaponstatus[BPSG_CHAMBER];
			invoker.weaponstatus[BPSG_CHAMBER]=0;
			if(psch==2){
				A_EjectCasing("HDPistolAmmo",
					frandom(-1,2),
					(-frandom(2,3),frandom(0,0.2),frandom(0.4,0.5)),
					(-2,0,-1)
				);
			}else if(psch==1){
				A_EjectCasing("HDSpent9mm",
					-frandom(-1,2),
					(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1)),
					(-2,0,-1)
				);
			}
			if(invoker.weaponstatus[BPSG_MAG]>0){
				invoker.weaponstatus[BPSG_CHAMBER]=2;
				invoker.weaponstatus[BPSG_MAG]--;
			}
		}
		#### A 3 offset(0,35)A_StartSound("weapons/93r/slidefwd",8);
		goto nope;
	althold:
	hold:
		goto nope;
	fire:
		---- A 0{
			invoker.weaponstatus[0]&=~BPSF_JUSTUNLOAD;
			if(invoker.weaponstatus[BPSG_CHAMBER]==2)setweaponstate("shoot");
			else if(invoker.weaponstatus[BPSG_MAG]>0)setweaponstate("chamber_manual");
		}goto nope;
	shoot:
		#### B 0{
			if(invoker.weaponstatus[BPSG_CHAMBER]==2)A_GunFlash();
		}
		#### B 1{
			if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
			}
			A_MuzzleClimb(
				-frandom(0.8,1.),-frandom(1.2,1.6),
				frandom(0.4,0.5),frandom(0.6,0.8)
			);
		}
		#### C 0{
			A_EjectCasing("HDSpent9mm"
				,frandom(-1,2),
				(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1))
			);
			invoker.weaponstatus[BPSG_CHAMBER]=0;
			if(invoker.weaponstatus[BPSG_MAG]<1){
				A_StartSound("weapons/93r/slideback",8);
				setweaponstate("shoot.empty");
			}
		}
		#### C 1{
			A_WeaponReady(WRF_NOFIRE);
			invoker.weaponstatus[BPSG_CHAMBER]=2;
			invoker.weaponstatus[BPSG_MAG]--;
			
			if(invoker.weaponstatus[BPSG_FIREMODE]>0){
				A_Refire("shoot.burst");
			}
		}goto shoot.end;
	shoot.burst:
		//chamber
		#### B 0{
			if((invoker.weaponstatus[BPSG_CHAMBER]>1))
			{
				IsMoving.Give(self,5);
				A_GunFlash("flash.cos");
				invoker.weaponstatus[BPSG_FIRED]++;
				invoker.weaponstatus[BPSG_CHAMBER]=1;
				
				let bbb=HDBulletActor.FireBullet(self,"HDB_9",spread:3.,speedfactor:frandom(0.97,1.03));
				if(
					frandom(0,ceilingz-floorz)<bbb.speed*0.3
				)A_AlertMonsters(256);

				A_ZoomRecoil(0.995);
			}
		}
		//mag
		#### B 0{
			if((invoker.weaponstatus[BPSG_MAG]>0))
			{
				IsMoving.Give(self,5);
				A_GunFlash("flash.cos");
				invoker.weaponstatus[BPSG_FIRED]++;
				invoker.weaponstatus[BPSG_MAG]--;
				
				let bbb=HDBulletActor.FireBullet(self,"HDB_9",spread:4.,speedfactor:frandom(0.97,1.03));
				if(
					frandom(0,ceilingz-floorz)<bbb.speed*0.3
				)A_AlertMonsters(256);

				A_ZoomRecoil(0.995);
				
				A_EjectCasing("HDSpent9mm"
				,frandom(-1,2),
				(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1)));
			}
			//else{setweaponstate("shoot.end");}
		}
		
		#### C 0{
			A_EjectCasing("HDSpent9mm"
				,frandom(-1,2),
				(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1))
			);
			
			if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
			}
			A_MuzzleClimb(
				-frandom(0.8,1.),-frandom(1.2,1.6),
				frandom(0.4,0.5),frandom(0.6,0.8)
			);
			
			invoker.weaponstatus[BPSG_CHAMBER]=0;
			if(invoker.weaponstatus[BPSG_MAG]<1){
				A_StartSound("weapons/93r/slideback",8);
				setweaponstate("shoot.empty");
			}
		}
		#### C 1{
			A_WeaponReady(WRF_NOFIRE);
			
			if(invoker.weaponstatus[BPSG_MAG]>0)
			{
				invoker.weaponstatus[BPSG_CHAMBER]=2;
				invoker.weaponstatus[BPSG_MAG]--;
			}
		}
		#### G 1{
			
			/*int shots=invoker.weaponstatus[BPSG_FIRED];
			
			for ( int i=0; i<shots; i++ )
			{
				A_EjectCasing("HDSpent9mm"
				,frandom(-1,2),
				(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1)));
			}*/
			
			if(invoker.weaponstatus[BPSG_CHAMBER]<2){
				A_StartSound("weapons/pistoldry",8,CHANF_OVERLAP,0.9);
				setweaponstate("shoot.empty");
			}
		}
	shoot.end:
		#### D 1;
		#### A 0;
		goto nope;
	shoot.empty:
		#### C 1;
		#### E 1;
		#### F 0;
		goto nope;
	flash:
		PI2F A 0 A_JumpIf(invoker.wronghand,2);
		93RF A 0;
		---- A 1 bright{
			A_StartSound("weapons/pistol",CHAN_WEAPON,CHANF_OVERLAP);
			HDFlashAlpha(64);
			A_Light1();
			let bbb=HDBulletActor.FireBullet(self,"HDB_9",spread:2.,speedfactor:frandom(0.97,1.03));
			if(
				frandom(0,ceilingz-floorz)<bbb.speed*0.3
			)A_AlertMonsters(256);

			invoker.weaponstatus[BPSG_CHAMBER]=1;
			A_ZoomRecoil(0.995);
			A_MuzzleClimb(-frandom(0.2,0.8),-frandom(0.2,0.9));
		}
		//---- A 0 A_StartSound("weapons/pistol",CHAN_WEAPON,CHANF_OVERLAP);
		---- A 0 A_Light0();
		stop;
	
	
	flash.cos:
		PI2F B 0 A_JumpIf(invoker.wronghand,2);
		93RF B 0;
		---- B 1 bright{
			A_StartSound("weapons/pistol",CHAN_WEAPON,CHANF_OVERLAP,pitch:0.8);
			HDFlashAlpha(64);
			A_Light1();
			A_MuzzleClimb(-frandom(0.4,1.2),-frandom(0.4,1.6));
		}
		//---- A 0 A_StartSound("weapons/pistol",CHAN_WEAPON,CHANF_OVERLAP,pitch:0.8);
		---- A 0 A_Light0();
		stop;
	
	unload:
		---- A 0{
			invoker.weaponstatus[0]|=BPSF_JUSTUNLOAD;
			if(invoker.weaponstatus[BPSG_MAG]>=0)setweaponstate("unmag");
		}goto chamber_manual;
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,"nope");
		---- A 1 offset(0,36) A_StartSound("weapons/pocket",9);
		---- A 1 offset(2,40);
		---- A 1 offset(2,50);
		---- A 1 offset(3,60);
		---- A 2 offset(5,90);
		---- A 2 offset(7,80);
		---- A 2 offset(10,90);
		#### C 2 offset(8,96);
		#### C 3 offset(6,88){
			if(countinv("HDPistolAmmo")){
				A_TakeInventory("HDPistolAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[BPSG_CHAMBER]=2;
				A_StartSound("weapons/pischamber1",8);
			}
		}
		#### B 2 offset(5,76);
		#### B 1 offset(4,64);
		#### B 1 offset(3,56);
		#### B 1 offset(2,48);
		#### B 2 offset(1,38);
		#### B 3 offset(0,34);
		goto readyend;
	reload:
		---- A 0{
			invoker.weaponstatus[0]&=~BPSF_JUSTUNLOAD;
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD9mMag15");
			if(invoker.weaponstatus[BPSG_MAG]>=15)setweaponstate("nope");
			else if(
				invoker.weaponstatus[BPSG_MAG]<1
				&&(
					pressinguse()
					||nomags
				)
			){
				if(
					countinv("HDPistolAmmo")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}else if(nomags)setweaponstate("nope");
		}goto unmag;
	
	Hand.Off:
		93RH AB 1;
		stop;
	Hand.On:
		93RH BA 1;
		stop;
	unmag:
		---- A 0;
		#### H 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,2);
		#### I 0;
		---- A 1 offset(0,34) 
		{
			A_SetCrosshair(21);
			A_Overlay(-3,"Hand.Off");
		}
		---- A 1 offset(1,38);
		---- A 2 offset(2,42);
		---- A 3 offset(3,46) A_StartSound("weapons/pismagclick",8,CHANF_OVERLAP);
		---- A 0{
			int pmg=invoker.weaponstatus[BPSG_MAG];
			invoker.weaponstatus[BPSG_MAG]=-1;
			if(pmg<0)setweaponstate("magout");
			else if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD9mMag15",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD9mMag15",pmg);
				setweaponstate("magout");
			}
			else{
				HDMagAmmo.GiveMag(self,"HD9mMag15",pmg);
				A_StartSound("weapons/pocket",9);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- AAA 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		---- A 0{
			if(invoker.weaponstatus[0]&BPSF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		---- A 4 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 0 A_StartSound("weapons/pocket",9);
		---- A 5 offset(0,46) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 3;
		---- A 0{
			let mmm=hdmagammo(findinventory("HD9mMag15"));
			if(mmm){
				invoker.weaponstatus[BPSG_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/pismagclick",8);
			}
		}
		goto reloadend;

	reloadend:
		---- A 2 offset(3,46);
		---- A 1 offset(2,42);
		---- A 1 offset(2,38)A_Overlay(-3,"Hand.On");
		---- A 1 offset(1,34);
		---- A 0 A_JumpIf(!(invoker.weaponstatus[0]&BPSF_JUSTUNLOAD),"chamber.fwd");
	cont:
		93RG A 0 A_JumpIf(invoker.weaponstatus[BPSG_CHAMBER]>0,2);
		#### F 0;
		---- A 0;
		goto nope;

	chamber.fwd:
		---- A 0 A_JumpIf(
			!(invoker.weaponstatus[0]&BPSF_JUSTUNLOAD)
			&&(
				invoker.weaponstatus[BPSG_CHAMBER]==2
				||invoker.weaponstatus[BPSG_MAG]<1
			)
			,"nope"
		);
		#### E 4 offset(0,35);
		#### A 2 offset(0,39){
			A_MuzzleClimb(frandom(0.4,0.5),-frandom(0.6,0.8));
			A_StartSound("weapons/93r/slidefwd",8);
			int psch=invoker.weaponstatus[BPSG_CHAMBER];
			invoker.weaponstatus[BPSG_CHAMBER]=0;
			if(psch==2){
				A_EjectCasing("HDPistolAmmo",
					frandom(-1,2),
					(-frandom(2,3),frandom(0,0.2),frandom(0.4,0.5)),
					(-2,0,-1)
				);
			}else if(psch==1){
				A_EjectCasing("HDSpent9mm",
					-frandom(-1,2),
					(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1)),
					(-2,0,-1)
				);
			}
			if(invoker.weaponstatus[BPSG_MAG]>0){
				invoker.weaponstatus[BPSG_CHAMBER]=2;
				invoker.weaponstatus[BPSG_MAG]--;
			}
		}
		#### A 2 offset(0,37);
		#### A 2 offset(0,33);
		goto nope;

	spawn:
		93RP AB -1 nodelay{
			if(invoker.weaponstatus[BPSG_CHAMBER]<1)frame=1;
		}
	}
	override void initializewepstats(bool idfa){
		weaponstatus[BPSG_MAG]=15;
		weaponstatus[BPSG_CHAMBER]=2;
	}
}
enum pistolstatus{
	BPSF_JUSTUNLOAD=1,

	BPSG_FLAGS=0,
	BPSG_MAG=1,
	BPSG_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	BPSG_FIRED=3,
	BPSG_FIREMODE=4,
}