// ------------------------------------------------------------
// AutoCannon
// ------------------------------------------------------------

class HD_ATCKelenken:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Kelenken"
		//$Sprite "ATCPA0"
		-hdweapon.fitsinbackpack
		+hdweapon.hinderlegs
		obituary "%k made %o cease to exist.";
		weapon.selectionorder 24;
		weapon.slotnumber 7;
		weapon.kickback 90;
		weapon.bobrangex 0.6;
		weapon.bobrangey 1.8;
		weapon.bobspeed 1.75;
		scale 0.8;
		inventory.pickupmessage "You got the Kelenken!";
		hdweapon.barrelsize 42,1.5,3;
		hdweapon.refid HDLD_KELENKEN_WP;
		tag "$TAG_KELENKEN"; 
		
			hdweapon.loadoutcodes "
			\cumodded - 1, Increased RoF in exchange for controllability";
	}
	
	
	override string pickupmessage(){
		if(weaponstatus[KLNKS_MODDED]>0)return string.format("%s Something about this one doesn't seem right.",super.pickupmessage());
		else return string.format("%s Good.",super.pickupmessage());
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	override double gunmass(){
			return 27.5;
	}
	
	override void tick(){
		super.tick();
		drainheat(KLNKS_HEAT,6);
	}
	
		override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
			int scaledyoffset=47;
			double dotoff=max(abs(bob.x),abs(bob.y));
			if(dotoff<20){
				sb.drawimage(
					whichdot,(0,0)+bob*1.6,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					alpha:0.8-dotoff*0.04
				);
			}
			sb.drawimage(
				"xh25",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				scale:(1.6,1.6)
			);
	}
	
	override double weaponbulk(){
		double blx=245;
		int mgg=weaponstatus[KLNKS_MAG];
		return blx+(mgg<0?0:((ENC_35MMBELTBOX_LOADED)+mgg*ENC_BRONTOSHELLLOADED));
	}
	
	override void failedpickupunload(){
		failedpickupunloadmag(KLNKS_MAG,"HD_PB_35mmBeltBox");
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,15);
			if(owner.countinv("BrontornisRound"))owner.A_DropInventory("BrontornisRound",amt*15);
			else owner.A_DropInventory("HD_PB_35mmBeltBox",amt);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("BrontornisRound");
		owner.A_TakeInventory("HD_PB_35mmBeltBox");
		owner.A_GiveInventory("HD_PB_35mmBeltBox");
	}
	override string,double getpickupsprite(){
		return "HWTP"..((weaponstatus[KLNKS_MAG]<0)?"B":"A").."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_PB_35mmBeltBox")));
			if(nextmagloaded>=15){
				sb.drawimage("HW0BA0",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextmagloaded<1){
				sb.drawimage("HW0BB0",(-49,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"HW0BNORM","HW0BGREY",
				nextmagloaded,15,
				(-49,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HD_PB_35mmBeltBox"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[KLNKS_MAG],15);
		if(hdw.weaponstatus[KLNKS_CHAMBER]==2)sb.drawwepdot(-16,-10,(3,1));
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	states{
	
	droop:
		TNT1 A 1{
			if(pitch<frandom(8,9)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.075,0.075),
						frandom(0.1,clamp(1-pitch,0.05,0.6)));
				}else{
					A_MuzzleClimb(frandom(-0.045,0.045),
						frandom(0.1,clamp(1-pitch,0.03,0.4)));
				}
			}
		}loop;
		
	
	select0:
		HWTG A 0 A_Overlay(2,"droop");
		#### A 0;
		goto select0bfg;
	deselect0:
		HWTG A 0;
		#### A 0;
		goto deselect0bfg;

	ready:
		HWTG A 0;
		#### A 0;
		#### A 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HD_PB_35mmBeltBox");
		goto ready;
	altfire:
	althold:
		goto nope;
	hold:
		#### A 1;
		goto nope;
	fire:
		HWTG A 0;
		#### A 3{if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(1);}
	fire2:
		#### A 1{
			if(invoker.weaponstatus[KLNKS_CHAMBER]==2){
				A_GunFlash();
				A_WeaponOffset(frandom(-3,3),frandom(30,33));
			}else{
				if(invoker.weaponstatus[KLNKS_MAG]>0)setweaponstate("chamberfired");
				else setweaponstate("nope");
			}
		}
		#### E 2 {if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(1);}
	chamberfired:
		#### J 2 {
		A_StartSound("weapons/autocannonload",CHAN_7,0,0.25);
		if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(1);}
		#### K 2{
		if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(1);
			if(invoker.weaponstatus[KLNKS_CHAMBER]==1){
				A_SpawnItemEx("TerrorCasing",
					cos(pitch)*10,0,height-10-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				A_SpawnItemEx("HD35MMFlyingBeltLink",
					cos(pitch)*10,0,height-10-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[KLNKS_CHAMBER]=0;
			}
			if(invoker.weaponstatus[KLNKS_MAG]>0){
				invoker.weaponstatus[KLNKS_MAG]--;
				invoker.weaponstatus[KLNKS_CHAMBER]=2;
			}
		}
		#### L 2 {if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(1);}
		#### A 1 {if(invoker.weaponstatus[KLNKS_MODDED]>0)A_SetTics(0);}
		#### A 0 A_ReFire("fire2");
		goto readyend;
	flash:
		HWTF A 0{
			let bbb=HDBulletActor.FireBullet(self,"HDB_bronto",speedfactor:1.1);
			if(
				frandom(32,ceilingz-floorz)<bbb.speed*0.2
			)A_AlertMonsters(200);

			A_ZoomRecoil(0.9);
			A_StartSound("weapons/kelenken/fire",CHAN_WEAPON,0,1.50);
			invoker.weaponstatus[KLNKS_CHAMBER]=1;
			invoker.weaponstatus[KLNKS_HEAT]+=16;
		}
		HWTF A 1 bright{
			HDFlashAlpha(15);
			A_Light1();
		}
		#### B 1 bright
		{
			if(gunbraced())invoker.weaponstatus[KLNKS_HEAT]+=1;
			else A_GiveInventory("IsMoving",7);
			if(!binvulnerable
				&&(
					countinv("IsMoving")>7
					||floorz<pos.z
				)
			){
				damagemobj(invoker,self,4,"bashing");
				A_GiveInventory("IsMoving",5);
				A_ChangeVelocity(
					cos(pitch)*-frandom(1,2),0,sin(pitch)*frandom(1,2),
					CVF_RELATIVE
				);
			}
		}
		TNT1 A 0{
			//A_ZoomRecoil(0.5);
			A_Light0();
		}
		TNT1 A 0{
			int recoilside=randompick(-1,1);
			if(gunbraced()){
				//hdplayerpawn(self).gunbraced=false;
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.01,0.05),0,
					sin(pitch)*frandom(0.01,0.05),
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*0.1,-frandom(0.25,0.4),
					recoilside*0.1,-frandom(0.25,0.4)
				);
				A_MuzzleClimb(
					recoilside*0.1,-frandom(1.,2.),
					recoilside*0.1,-frandom(1.,2.)
				);
			}else{
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.4,1.2),0,
					sin(pitch)*frandom(0.4,1.2),
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*1.0,-frandom(3.,5.),
					recoilside*1.0,-frandom(3.,5.)
				);
				A_MuzzleClimb(
					recoilside*1.0,-frandom(3.,5.),
					recoilside*1.0,-frandom(3.,5.),
					wepdot:true
				);
			}
		}
		stop;
		goto lightdone;


	unloadchamber:
		HWTG A 0;
		#### A 4 offset(2,34) A_JumpIf(invoker.weaponstatus[KLNKS_CHAMBER]<1,"nope");
		#### B 4 offset(5,40) A_StartSound("weapons/autocannonload",CHAN_6,0,0.5);
		#### C 4 offset(9,47){
			class<actor>which=invoker.weaponstatus[KLNKS_CHAMBER]>1?"BrontornisRound":"TerrorCasing";
			invoker.weaponstatus[KLNKS_CHAMBER]=0;
			A_SpawnItemEx(which,
				cos(pitch)*10,0,height-8-sin(pitch)*10,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			A_SpawnItemEx("HD35MMFlyingBeltLink",
					cos(pitch)*10,0,height-10-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
		}
		#### D 4 offset(5,37);
		#### A 4 offset(2,36); //A_StartSound("weapons/devincenzia/fwd",CHAN_6,0,0.5);
		goto readyend;
	user4:
	unload:
		HWTG A 0;
		#### A 0{
			invoker.weaponstatus[0]|=KLNKF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[KLNKS_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[KLNKS_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		HWTG A 0;
		#### A 0{
			invoker.weaponstatus[0]&=~KLNKF_JUSTUNLOAD;
			if(invoker.weaponstatus[KLNKS_MAG]>=15)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"HD_PB_35mmBeltBox")){
				if(
					invoker.weaponstatus[KLNKS_MAG]<0
					&&countinv("BrontornisRound")
				)setweaponstate("nope");
				else setweaponstate("nope");
				}
			}
			goto unmag;
	unmag:
		HWTG A 0;
		#### A 1 offset(0,34) A_SetCrosshair(21);
		#### A 2 offset(2,38);
		#### A 2 offset(5,42);
		#### E 3 offset(10,46);
		#### E 5 offset(20,52) A_StartSound("weapons/kelenken/magout",CHAN_WEAPON);
		#### E 6 offset(30,58){
			A_MuzzleClimb(0.3,0.4);
		}
		#### E 0{
			int magamt=invoker.weaponstatus[KLNKS_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[KLNKS_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HD_PB_35mmBeltBox",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HD_PB_35mmBeltBox",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_PB_35mmBeltBox",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### EEE 7 offset(34,60) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	magout:
		#### E 0{
			if(invoker.weaponstatus[0]&KLNKF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### E 5 A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### E 7 offset(35,50) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### E 11 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### E 14 offset(32,50);
		#### E 5 offset(32,49){
			let mmm=hdmagammo(findinventory("HD_PB_35mmBeltBox"));
			if(mmm){
				invoker.weaponstatus[KLNKS_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/kelenken/magin",CHAN_BODY);
			}
			if(
				invoker.weaponstatus[KLNKS_MAG]<1
				||invoker.weaponstatus[KLNKS_CHAMBER]>0
			)setweaponstate("reloadend");
		}
		#### E 8 offset(32,51);
		#### F 5 offset(32,45);
	chamber:
		#### A 8;
		#### B 4 A_StartSound("weapons/autocannonrevolve",CHAN_7,0,1);
		#### C 4{
			if(invoker.weaponstatus[KLNKS_CHAMBER]==1){
				A_SpawnItemEx("TerrorCasing",
					cos(pitch)*10,0,height-10-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				A_SpawnItemEx("HD35MMFlyingBeltLink",
					cos(pitch)*10,0,height-10-sin(pitch)*10,
					vel.x,vel.y,vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
				invoker.weaponstatus[KLNKS_CHAMBER]=0;
			}
			if(invoker.weaponstatus[KLNKS_MAG]>0){
				invoker.weaponstatus[KLNKS_MAG]--;
				invoker.weaponstatus[KLNKS_CHAMBER]=2;
			}
		}
		#### DA 4;
		goto reloadend;

	reloadend:
		HWTG A 5 offset(30,52);
		#### A 4 offset(20,46);
		#### A 3 offset(10,42);
		#### A 3 offset(5,38);
		#### A 2 offset(0,34);
		goto nope;

	spawn:
		HWTP A -1 nodelay{
			if(invoker.weaponstatus[KLNKS_MAG]<0)frame=1;
		}
	}
	override void initializewepstats(bool idfa){
		weaponstatus[0]=0;
		weaponstatus[KLNKS_MAG]=15;
		weaponstatus[KLNKS_CHAMBER]=2;
	}
	override void loadoutconfigure(string input){
		int modded=getloadoutvar(input,"modded",1);
		if(modded>0)weaponstatus[KLNKS_MODDED]=clamp(modded,0,1);
	}
}

enum kelenkencannonstatus{
	KLNKF_JUSTUNLOAD=1,

	KLNKS_FLAGS=0,
	KLNKS_MAG=1,
	KLNKS_CHAMBER=2,
	KLNKS_HEAT=3,
	KLNKS_MODDED=4,
};
