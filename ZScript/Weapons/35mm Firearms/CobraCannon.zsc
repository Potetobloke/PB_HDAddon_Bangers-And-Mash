// ------------------------------------------------------------
// AutoCannon
// ------------------------------------------------------------

class HD_ATCDevincenzia:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Devincenzia"
		//$Sprite "ATCPA0"
		-hdweapon.fitsinbackpack
		obituary "%k made %o cease to exist.";
		weapon.selectionorder 24;
		weapon.slotnumber 7;
		weapon.kickback 90;
		weapon.bobrangex 1.3;
		weapon.bobrangey 0.6;
		weapon.bobspeed 1.75;
		scale 0.8;
		inventory.pickupmessage "You got the Devincenzia! State of the art bang bang!";
		hdweapon.barrelsize 52,1.5,3;
		hdweapon.refid HDLD_COBRACANNON_WP;
		tag "$TAG_DEVINCENZIA"; 
		//Originally the Cobra Assault Cannon (ala Robocop), but I decided to make it more in line with HD's Brontornis.
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}

	override double gunmass(){
			return 16.5;
	}
	
	override void tick(){
		super.tick();
		drainheat(ATCNS_HEAT,12);
	}
	
	override double weaponbulk(){
		double blx=185;
		int mgg=weaponstatus[ATCNS_MAG];
		return blx+(mgg<0?0:((ENC_COBRACANNON_MAG_LOADED)+mgg*ENC_BRONTOSHELLLOADED));
	}
	
	override void failedpickupunload(){
		failedpickupunloadmag(ATCNS_MAG,"HDDevincenziaMag");
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("BrontornisRound"))owner.A_DropInventory("BrontornisRound",amt*5);
			else owner.A_DropInventory("HDDevincenziaMag",amt);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("BrontornisRound");
		owner.A_TakeInventory("HDDevincenziaMag");
		owner.A_GiveInventory("HDDevincenziaMag");
	}
	override string,double getpickupsprite(){
		return "ATCP"..((weaponstatus[ATCNS_MAG]<0)?"B":"A").."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HDDevincenziaMag")));
			if(nextmagloaded>=5){
				sb.drawimage("ATCMA0",(-48,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1.5,1.5));
			}else if(nextmagloaded<1){
				sb.drawimage("ATCMB0",(-48,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1.5,1.5));
			}else sb.drawbar(
				"ATCMNORM","ATCMGREY",
				nextmagloaded,5,
				(-48,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HDDevincenziaMag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(hdw.weaponstatus[ATCNS_MAG],5);
		if(hdw.weaponstatus[ATCNS_CHAMBER]==2)sb.drawwepdot(-16,-10,(3,1));
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.." or "..WEPHELP_FIREMODE.."  Toggle zoom\n"
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int scaledyoffset=12;
		if(weaponstatus[ATCNS_FOLLOWSCOPE]==1){
			texman.setcameratotexture(hpc,"HDXHCAM5_PB",2.6);
			sb.drawimage(
				"HDXHCAM5_PB",(0,scaledyoffset)+bob,
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				scale:(0.42,0.42)
			);
			scaledyoffset=10;
			sb.drawimage(
				"cacscope",(0,scaledyoffset)+bob,
				sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				scale:(1.2,1.2)
			);
			
				vector2 bobb=bob*3;
				bobb.y=clamp(bobb.y,-8,8);
				sb.drawimage(
				"frntsite",(0,-4.5)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				alpha:0.4);
		}
		else
			{
				vector2 bobb=bob*3;
				bobb.y=clamp(bobb.y,-8,8);
				sb.drawimage(
				"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
				alpha:0.9);
			}
		{
			double dotoff=max(abs(bob.x),abs(bob.y));
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"G11S_000",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,scale:(1.65,1)
		);
		}
	}
	states{
	
	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.075,0.075),
						frandom(0.1,clamp(1-pitch,0.05,0.6)));
				}else{
					A_MuzzleClimb(frandom(-0.045,0.045),
						frandom(0.1,clamp(1-pitch,0.03,0.4)));
				}
			}
		}loop;
		
	
	select0:
		ATC0 A 0 A_Overlay(2,"droop");
		#### A 0;
		goto select0bfg;
	deselect0:
		ATC0 A 0;
		#### A 0;
		goto deselect0bfg;

	ready:
		ATC0 A 0;
		#### A 0;
		#### A 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HDDevincenziaMag");
		goto ready;
	altfire:
	firemode:
		ATC0 A 1 offset(0,34);
		#### A 1 offset(0,36);
		#### A 2 offset(2,37)
		{
			int scp=invoker.weaponstatus[ATCNS_FOLLOWSCOPE];
			if(scp>=1)invoker.weaponstatus[ATCNS_FOLLOWSCOPE]=0;
			else if(scp<0)invoker.weaponstatus[ATCNS_FOLLOWSCOPE]=0;
			else invoker.weaponstatus[ATCNS_FOLLOWSCOPE]++;
		}
		#### A 1 offset(1,36);
		#### A 1 offset(0,34);
		goto nope;
	hold:
		#### A 1;
		goto nope;
	fire:
		ATC0 A 0;
		#### A 2;
	fire2:
		#### A 1{
			if(invoker.weaponstatus[ATCNS_CHAMBER]==2){
				A_GunFlash();
				A_WeaponOffset(frandom(-3,3),frandom(30,33));
			}else{
				if(invoker.weaponstatus[ATCNS_MAG]>0)setweaponstate("chamber");
				else setweaponstate("nope");
			}
		}
		#### A 0{
			invoker.weaponstatus[ATCNS_CHAMBER]=0;
				A_EjectCasing("TerrorCasing",
					frandom(-1,2),
					(frandom(0.1,0.5),-frandom(5,6.5),frandom(0,0.3)),
					(0,0,-2)
				);
		}
		#### A 0{
			//if(invoker.weaponstatus[ATCNS_CHAMBER]==1){
				//A_EjectCasing("TerrorCasing",24,frandom(-1,2),frandom(0.2,0.3),frandom(0,0.2),spawnsidespeed:-frandom(7,7.5));
			//}
			if(invoker.weaponstatus[ATCNS_MAG]>0){
				invoker.weaponstatus[ATCNS_MAG]--;
				invoker.weaponstatus[ATCNS_CHAMBER]=2;
			}
		}
		#### BCCDDEEF 1;
		#### A 0 A_ReFire("hold");
		goto readyend;
	flash:
		ATCF A 0{
			let bbb=HDBulletActor.FireBullet(
				self,"HDB_bronto",
				aimoffy:(invoker.weaponstatus[ATCNS_FOLLOWSCOPE]==1)?-2:0
			);
			if(
				frandom(32,ceilingz-floorz)<bbb.speed*0.2
			)A_AlertMonsters(200);

			A_ZoomRecoil(0.9);
			A_StartSound("weapons/devincenzia/fire",CHAN_7,CHANF_OVERLAP,1.50);
			invoker.weaponstatus[ATCNS_CHAMBER]=1;
			invoker.weaponstatus[ATCNS_HEAT]+=32;
		}
		ATCF A 1 bright{
			HDFlashAlpha(15);
			A_Light1();
		}
		#### B 1 bright
		{
			if(gunbraced())A_GiveInventory("IsMoving",2);
			else A_GiveInventory("IsMoving",7);
			if(!binvulnerable
				&&(
					countinv("IsMoving")>6
					||floorz<pos.z
				)
			){
				damagemobj(invoker,self,3,"bashing");
				A_GiveInventory("IsMoving",5);
				A_ChangeVelocity(
					cos(pitch)*-frandom(1,2),0,sin(pitch)*frandom(1,2),
					CVF_RELATIVE
				);
			}
		}
		TNT1 A 2{
			A_Light0();
		}
		TNT1 A 0{
			int recoilside=randompick(-1,1);
			if(gunbraced()){
				//hdplayerpawn(self).gunbraced=false;
				A_ChangeVelocity(
					cos(pitch)*-frandom(0.1,0.4),0,
					sin(pitch)*frandom(0.1,0.4),
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*1.5,-frandom(1.,3.),
					recoilside*1.5,-frandom(1.,3.)
				);
			}else{
				A_ChangeVelocity(
					cos(pitch)*-frandom(1.8,3.2),0,
					sin(pitch)*frandom(1.8,3.2),
					CVF_RELATIVE
				);
				A_MuzzleClimb(
					recoilside*1.5,-frandom(3.,7.),
					recoilside*1.5,-frandom(3.,7.)
				);
				A_MuzzleClimb(
					recoilside*1.5,-frandom(3.,7.),
					recoilside*1.5,-frandom(3.,7.),
					wepdot:true
				);
			}
		}
		stop;
		goto lightdone;


	unloadchamber:
		ATC1 A 0;
		#### A 2 offset(2,34) A_JumpIf(invoker.weaponstatus[ATCNS_CHAMBER]<1,"nope");
		#### B 2 offset(5,40) A_StartSound("weapons/devincenzia/back",CHAN_6,0,0.5);
		#### C 3 offset(9,47){
			class<actor>which=invoker.weaponstatus[ATCNS_CHAMBER]>1?"BrontornisRound":"TerrorCasing";
			invoker.weaponstatus[ATCNS_CHAMBER]=0;
			A_SpawnItemEx(which,
				cos(pitch)*10,0,height-8-sin(pitch)*10,
				vel.x,vel.y,vel.z,
				0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
		}
		#### D 7 offset(5,37);
		#### E 3 offset(2,36) A_StartSound("weapons/devincenzia/fwd",CHAN_6,0,0.5);
		goto readyend;
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[ATCNS_CHAMBER]>0,"nope");
		---- A 0 A_JumpIf(!countinv("BrontornisRound"),"nope");
		ATC1 A 1 offset(0,34) A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### A 2 offset(2,36);
		#### B 2 offset(5,40) A_StartSound("weapons/devincenzia/back",CHAN_6,0,0.5);
		#### C 3 offset(7,42);
		#### D 5 offset(8,46);
		#### D 7 offset(8,43){
			if(countinv("BrontornisRound")){
				A_TakeInventory("BrontornisRound",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[ATCNS_CHAMBER]=2;
				A_StartSound("weapons/brontoload",8,CHANF_OVERLAP);
			}
		}
		#### D 7 offset(9,47);
		#### E 3 offset(2,36) A_StartSound("weapons/devincenzia/fwd",CHAN_6,0,0.5);
		goto readyend;
	user4:
	unload:
		ATC0 A 0;
		#### A 0{
			invoker.weaponstatus[0]|=ATCNF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[ATCNS_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[ATCNS_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		ATC0 A 0;
		#### A 0{
			invoker.weaponstatus[0]&=~ATCNF_JUSTUNLOAD;
			if(invoker.weaponstatus[ATCNS_MAG]>=5)setweaponstate("nope");
			else if(HDMagAmmo.NothingLoaded(self,"HDDevincenziaMag")){
				if(
					invoker.weaponstatus[ATCNS_MAG]<0
					&&countinv("BrontornisRound")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}
		}goto unmag;
	unmag:
		ATC0 A 0;
		#### A 2 offset(0,34) A_SetCrosshair(21);
		#### A 2 offset(5,38);
		#### E 2 offset(10,42);
		#### E 3 offset(20,46);
		#### E 5 offset(30,52){
			A_MuzzleClimb(0.3,0.4);
		}
		#### E 0{
			int magamt=invoker.weaponstatus[ATCNS_MAG];
			if(magamt<0){
				setweaponstate("magout");
				return;
			}
			invoker.weaponstatus[ATCNS_MAG]=-1;
			if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HDDevincenziaMag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HDDevincenziaMag",magamt);
				setweaponstate("magout");
				A_StartSound("weapons/devimagout",CHAN_7,volume:0.5);
			}else{
				HDMagAmmo.GiveMag(self,"HDDevincenziaMag",magamt);
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				A_StartSound("weapons/devimagout",CHAN_7,volume:0.5);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		#### EEE 11 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
	magout:
		#### E 0{
			if(invoker.weaponstatus[0]&ATCNF_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		#### E 0 A_StartSound("weapons/pocket",CHAN_WEAPON);
		#### E 6 offset(34,54) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### E 7 offset(34,52) A_MuzzleClimb(frandom(0.2,-0.8),frandom(-0.2,0.4));
		#### E 10 offset(32,50);
		#### E 10 offset(33,51);
		#### E 10 offset(31,52) A_StartSound("weapons/devimaghit",CHAN_BODY,volume:0.5);
		#### E 3 offset(32,49){
			let mmm=hdmagammo(findinventory("HDDevincenziaMag"));
			if(mmm){
				invoker.weaponstatus[ATCNS_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/devimagin",CHAN_BODY,volume:0.5);
			}
		}
		#### E 5 offset(32,51);
		#### F 5 offset(32,49);
		#### F 5 offset(32,45)
			{
				if(
				invoker.weaponstatus[ATCNS_MAG]<1
				||invoker.weaponstatus[ATCNS_CHAMBER]>0
				)setweaponstate("reloadend");
			}
	chamber:
		ATC1 A 0;
		#### A 3 offset(32,54);
		#### B 2 offset(35,54) A_StartSound("weapons/devincenzia/back",CHAN_6,0,0.5);
		#### C 3 offset(39,54){
			invoker.weaponstatus[ATCNS_MAG]--;
			invoker.weaponstatus[ATCNS_CHAMBER]=2;
		}
		#### D 7 offset(35,54);
		#### E 3 offset(32,54) A_StartSound("weapons/devincenzia/fwd",CHAN_6,0,0.5);
		goto reloadend;

	reloadend:
		ATC0 E 4 offset(30,52);
		#### E 3 offset(20,46);
		#### F 2 offset(10,42);
		#### F 2 offset(5,38);
		#### A 2 offset(0,34);
		goto nope;


	spawn:
		ATCP A -1 nodelay{
			if(invoker.weaponstatus[ATCNS_MAG]<0)frame=1;
		}
	}
	override void initializewepstats(bool idfa){
		weaponstatus[0]=0;
		weaponstatus[ATCNS_MAG]=5;
		weaponstatus[ATCNS_CHAMBER]=2;
	}
}

enum cobraassaultcannonstatus{
	ATCNF_JUSTUNLOAD=1,

	ATCNS_FLAGS=0,
	ATCNS_MAG=1,
	ATCNS_CHAMBER=2,
	ATCNS_HEAT=3,
	ATCNS_FOLLOWSCOPE=4,
};
