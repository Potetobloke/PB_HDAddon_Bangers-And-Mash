// ------------------------------------------------------------
// Revolver
// ------------------------------------------------------------

class HDUragan5:HDHandgun{
	bool cylinderopen; //don't use weaponstatus since it shouldn't be saved anyway
	default{
		+hdweapon.fitsinbackpack
		+hdweapon.reverseguninertia
		scale 0.58;
		weapon.selectionorder 49;
		weapon.slotnumber 3;
		weapon.kickback 30;
		weapon.bobrangex 0.1;
		weapon.bobrangey 0.6;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		obituary "%o tried to match %k with the big iron on their hip.";
		inventory.pickupmessage "You got the revolver shotgun!";
		tag "$TAG_URAGAN5";
		hdweapon.refid HDLD_URAGAN5;
		hdweapon.barrelsize 6.5,0.3,0.5; //physically longer than auto but can shoot at contact
	}
	
			double shotpower;
	static clearscope double getshotpower(){return frandom(0.9,1.05);}
	
			//returns the power of the load just fired
	static double Fire(actor caller){
		double spread=12.; //6.;
		double speedfactor=1.+0.02857*1; //1.;
		/*let urg=HDUragan5(caller.findinventory("HDUragan5"));
		if(urg){
			spread=95.5;
			speedfactor=1.+0.02857*1;
		}*/

		double shotpower=getshotpower();
		spread*=shotpower;
		speedfactor*=shotpower;
		HDBulletActor.FireBullet(caller,"HDB_wad");
		let p=HDBulletActor.FireBullet(caller,"HDB_00",
			spread:spread,speedfactor:speedfactor,amount:10 //7
		);
		distantnoise.make(p,"world/shotgunfar"); //p.spawn("DistantShotgun",p.pos,ALLOW_REPLACE);
		caller.A_StartSound("weapons/uragan5shot",CHAN_WEAPON); //caller.A_StartSound("weapons/hunter",CHAN_WEAPON);
		return shotpower;
	}
	action void A_FireUragan5(){
	int cyl=invoker.weaponstatus[URA5S_CYL1];
		if(
			cyl!=URA5S_12GAUGE
		)return;
		invoker.weaponstatus[URA5S_CYL1]--;
		bool shotshell=cyl==URA5S_12GAUGE;	
	
		double shotpower=invoker.Fire(self);
		A_GunFlash();
		vector2 shotrecoil=(randompick(-1,1),-2.6);
		A_MuzzleClimb(0,0,shotrecoil.x+4,shotrecoil.y+4,randompick(-1,1)*shotpower,-0.3*shotpower);
		invoker.shotpower=shotpower;
	}
	
	override double gunmass(){
		return 11;
	}
	override double weaponbulk(){
		double blk=0;
		for(int i=URA5S_CYL1;i<=URA5S_CYL5;i++){
			int wi=weaponstatus[i];
			if(wi==URA5S_12GAUGE)blk+=ENC_SHELLLOADED;
		}
		return blk+42;
	}
	override string,double getpickupsprite(){
		return "URA5Z0",1.;
	}

	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
if(hd_debug)sb.drawwepnum(hpl.player.getpsprite(PSP_WEAPON).frame,int.MAX,-26,-40,true);
		if(sb.hudlevel == 1){
			//draw ammo counter
			sb.drawimage("SHL1A0",(-47,-10),basestatusbar.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HDShellAmmo"),-46,-8,
				basestatusbar.DI_SCREEN_CENTER_BOTTOM
			);
		}
		int plf=hpl.player.getpsprite(PSP_WEAPON).frame;
		for(int i=URA5S_CYL1;i<=URA5S_CYL5;i++){ //"DRKGRNPX"
			string which=(hdw.weaponstatus[i]>0)?"YELOPXL":"DRKGRNPX";
			double drawangle=i*(360./-5.)-150;
			vector2 cylpos;
			if(plf==4){
				drawangle-=100.;
				cylpos=(-28,-12);
			}else if(cylinderopen){
				drawangle-=50.;//193
				cylpos=(-32,-8);
			}else{
				drawangle-=50.;
				cylpos=(-20,-16);
			}
			vector2 drawpos=cylpos+(cos(drawangle),sin(drawangle))*5;
			sb.drawimage(
				which,drawpos,
				sb.DI_SCREEN_CENTER_BOTTOM|sb.DI_TRANSLATABLE|sb.DI_ITEM_RIGHT,
				1,scale:(3,3)
			);
		}
	}
	
	override string gethelptext(){
		if(cylinderopen)return
		WEPHELP_FIRE.." Close cylinder\n"
		..WEPHELP_ALTFIRE.." Cycle cylinder \(Hold "..WEPHELP_ZOOM.." to reverse\)\n"
		..WEPHELP_UNLOAD.." Hit extractor \(double-tap to dump live rounds\)\n"
		..WEPHELP_RELOAD.." Load round \(Hold "..WEPHELP_FIREMODE.." to force using 9mm\)\n"
		;
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.." Pull back hammer\n"
		..WEPHELP_ALTRELOAD.."/"..WEPHELP_FIREMODE.."  Quick-Swap (if available)\n"
		..WEPHELP_UNLOAD.."/"..WEPHELP_RELOAD.." Open cylinder\n"
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*3;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"backsite",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,18,60);
			if(owner.countinv("HDShellAmmo"))owner.A_DropInventory("HDShellAmmo",amt);
		}
	}
	override void initializewepstats(bool idfa){
		weaponstatus[URA5S_CYL1]=URA5S_12GAUGE;
		weaponstatus[URA5S_CYL2]=URA5S_12GAUGE;
		weaponstatus[URA5S_CYL3]=URA5S_12GAUGE;
		weaponstatus[URA5S_CYL4]=URA5S_12GAUGE;
		weaponstatus[URA5S_CYL5]=URA5S_12GAUGE;
	}

	action void A_CheckRevolverHand(){
		bool lefthanded=invoker.wronghand;
		lefthanded=
		(
			lefthanded
			&&Wads.CheckNumForName("id",0)!=-1
		)||(
			!lefthanded
			&&Wads.CheckNumForName("id",0)==-1
		);
		if(lefthanded)player.getpsprite(PSP_WEAPON).sprite=getspriteindex("UR5GA0");
		else player.getpsprite(PSP_WEAPON).sprite=getspriteindex("UR6GA0");
	}
	action void A_RotateCylinder(bool clockwise=true){
		invoker.RotateCylinder(clockwise);
		A_StartSound("weapons/deinocyl",5);
	}
	void RotateCylinder(bool clockwise=true){
		if(clockwise){
			int cylbak=weaponstatus[URA5S_CYL1];
			weaponstatus[URA5S_CYL1]=weaponstatus[URA5S_CYL5];
			weaponstatus[URA5S_CYL5]=weaponstatus[URA5S_CYL4];
			weaponstatus[URA5S_CYL4]=weaponstatus[URA5S_CYL3];
			weaponstatus[URA5S_CYL3]=weaponstatus[URA5S_CYL2];
			weaponstatus[URA5S_CYL2]=cylbak;
		}else{
			int cylbak=weaponstatus[URA5S_CYL1];
			weaponstatus[URA5S_CYL1]=weaponstatus[URA5S_CYL2];
			weaponstatus[URA5S_CYL2]=weaponstatus[URA5S_CYL3];
			weaponstatus[URA5S_CYL3]=weaponstatus[URA5S_CYL4];
			weaponstatus[URA5S_CYL4]=weaponstatus[URA5S_CYL5];
			weaponstatus[URA5S_CYL5]=cylbak;
		}
	}
	action void A_LoadRound(){
		if(invoker.weaponstatus[URA5S_CYL1]>0)return;
		if(!countinv("HDShellAmmo"))return;
		class<inventory>ammotype="HDShellAmmo";
		A_TakeInventory("HDShellAmmo",1,TIF_NOTAKEINFINITE);
		invoker.weaponstatus[URA5S_CYL1]=URA5S_12GAUGE;
		A_StartSound("weapons/sweeperload",11);
	}
	action void A_OpenCylinder(){
		A_StartSound("weapons/deinoopen",10);
		invoker.weaponstatus[0]&=~URA5F_COCKED;
		invoker.cylinderopen=true;
		A_SetHelpText();
	}
	action void A_CloseCylinder(){
		A_StartSound("weapons/deinoclose",10);
		invoker.cylinderopen=false;
		A_SetHelpText();
	}
	action void A_HitExtractor(){
		double cosp=cos(pitch);
		for(int i=URA5S_CYL1;i<=URA5S_CYL5;i++){
			int thischamber=invoker.weaponstatus[i];
			if(thischamber<1)continue;
			if(
				thischamber==URA5S_12GAUGESPENT
			){
				actor aaa=spawn("HDSpentShell_Sweeper",
					(pos.xy,pos.z+height-10)
					+(cosp*cos(angle),cosp*sin(angle),sin(pitch))*7,
					ALLOW_REPLACE
				);
				aaa.vel=vel+(frandom(-1,1),frandom(-1,1),-1);
				invoker.weaponstatus[i]=0;
			}
		}
		A_StartSound("weapons/deinoeject",13);
	}
	action void A_ExtractAll(){
		double cosp=cos(pitch);
		bool gotany=false;
		for(int i=URA5S_CYL1;i<=URA5S_CYL5;i++){
			int thischamber=invoker.weaponstatus[i];
			if(thischamber<1)continue;
			if(
				thischamber==URA5S_12GAUGESPENT
			){
				actor aaa=spawn("HDSpentShell_Sweeper",
					(pos.xy,pos.z+height-14)
					+(cosp*cos(angle),cosp*sin(angle),sin(pitch)-2)*3,
					ALLOW_REPLACE
				);
				aaa.vel=vel+(frandom(-0.3,0.3),frandom(-0.3,0.3),-1);
				invoker.weaponstatus[i]=0;
			}else{
				class<inventory>ammotype=
					thischamber==URA5S_12GAUGE?
					"HDShellAmmo":"HDShellAmmo";
				if(A_JumpIfInventory(ammotype,0,"null")){
					actor aaa=spawn(ammotype,
						(pos.xy,pos.z+height-14)
						+(cosp*cos(angle),cosp*sin(angle),sin(pitch)-2)*3,
						ALLOW_REPLACE
					);
					aaa.vel=vel+(frandom(-1,1),frandom(-1,1),-1);
				}else{
					A_GiveInventory(ammotype,1);
					gotany=true;
				}
				invoker.weaponstatus[i]=0;
			}
		}
		if(gotany)A_StartSound("weapons/pocket",11);
	}
	action void A_FireRevolver(){
		invoker.weaponstatus[0]&=~URA5F_COCKED;
		int cyl=invoker.weaponstatus[URA5S_CYL1];
		if(
			cyl!=URA5S_12GAUGE
		){
			A_StartSound("weapons/deinoclick",CHAN_7);
			return;
		}
		invoker.weaponstatus[URA5S_CYL1]--;
		bool shotshell=cyl==URA5S_12GAUGE;
		
		double shotpower=invoker.Fire(self);
		A_GunFlash();
		A_Light1();
		A_ZoomRecoil(0.995);
		HDFlashAlpha(shotshell?72:64);
		A_StartSound("weapons/uragan5shot",CHAN_WEAPON,CHANF_OVERLAP);
	}
	int cooldown;
	action void A_ReadyOpen(){
		A_WeaponReady(WRF_NOFIRE|WRF_ALLOWUSER3);
		if(justpressed(BT_ALTATTACK))setweaponstate("open_rotatecylinder");
		else if(justpressed(BT_RELOAD)){
			if(
				invoker.weaponstatus[URA5S_CYL1]>0
				&&invoker.weaponstatus[URA5S_CYL2]>0
				&&invoker.weaponstatus[URA5S_CYL3]>0
				&&invoker.weaponstatus[URA5S_CYL4]>0
				&&invoker.weaponstatus[URA5S_CYL5]>0
			)setweaponstate("open_closecylinder");
			else setweaponstate("open_loadround");
		}else if(justpressed(BT_ATTACK))setweaponstate("open_closecylinder");
		else if(justpressed(BT_UNLOAD)){
			if(!invoker.cooldown){
				setweaponstate("open_dumpcylinder");
				invoker.cooldown=8;
			}else{
				setweaponstate("open_dumpcylinder_all");
			}
		}
		if(invoker.cooldown>0)invoker.cooldown--;
	}
	action void A_RoundReady(int rndnm){
		int gunframe=-1;
		if(invoker.weaponstatus[rndnm]>0)gunframe=player.getpsprite(PSP_WEAPON).frame;
		let thissprite=player.getpsprite(URA5S_OVRCYL+rndnm);
		switch(gunframe){
		case 4: //E
			thissprite.frame=0;
			break;
		case 5: //F
			thissprite.frame=1;
			break;
		case 6: //G
			thissprite.frame=pressingzoom()?4:2;
			break;
		default:
			thissprite.sprite=getspriteindex("TNT1A0");
			thissprite.frame=0;
			return;break;
		}
	}
	action void A_CockHammer(bool yes=true){
		if(yes)invoker.weaponstatus[0]|=URA5F_COCKED;
		else invoker.weaponstatus[0]&=~URA5F_COCKED;
	}


/*
	A normal ready
	B ready cylinder midframe
	C hammer fully cocked (maybe renumber these lol)
	D recoil frame
	E cylinder swinging out - left hand passing to right
	F cylinder swung out - held in right hand, working chamber in middle
	G cylinder swung out midframe
*/
	states{
	spawn:
		URA5 Z -1;
		stop;
	round1:UR51 A 1 A_RoundReady(URA5S_CYL1);wait;
	round2:UR52 A 1 A_RoundReady(URA5S_CYL2);wait;
	round3:UR53 A 1 A_RoundReady(URA5S_CYL3);wait;
	round4:UR54 A 1 A_RoundReady(URA5S_CYL4);wait;
	round5:UR55 A 1 A_RoundReady(URA5S_CYL5);wait;
	select0:
		UR5G A 0{
			if(!countinv("NulledWeapon"))invoker.wronghand=true;
			A_TakeInventory("NulledWeapon");
			A_CheckRevolverHand();
			invoker.cylinderopen=false;
			invoker.weaponstatus[0]&=~URA5F_COCKED;

			//uncock all spare revolvers
			if(findinventory("SpareWeapons")){
				let spw=SpareWeapons(findinventory("SpareWeapons"));
				for(int i=0;i<spw.weapontype.size();i++){
					if(spw.weapontype[i]==invoker.getclassname()){
						string spw2=spw.weaponstatus[i];
						string spw1=spw2.left(spw2.indexof(","));
						spw2=spw2.mid(spw2.indexof(","));
						int stat0=spw1.toint();
						stat0&=~URA5F_COCKED;
						spw.weaponstatus[i]=stat0..spw2;
					}
				}
			}

			A_Overlay(URA5S_OVRCYL+URA5S_CYL1,"round1");
			A_Overlay(URA5S_OVRCYL+URA5S_CYL2,"round2");
			A_Overlay(URA5S_OVRCYL+URA5S_CYL3,"round3");
			A_Overlay(URA5S_OVRCYL+URA5S_CYL4,"round4");
			A_Overlay(URA5S_OVRCYL+URA5S_CYL5,"round5");
		}
		---- A 1 A_Raise();
		---- A 1 A_Raise(50);
		---- A 1 A_Raise(50);
		---- A 1 A_Raise(34);
		---- A 1 A_Raise(20);
		wait;
	deselect0:
		UR5G A 0 A_CheckRevolverHand();
		#### D 0 A_JumpIf(!invoker.cylinderopen,"deselect0a");
		UR5G E 2;
		UR5G A 0 A_CloseCylinder();
		UR5G A 0 A_CheckRevolverHand();
		goto deselect0a;
	deselect0a:
		#### AD 1 A_Lower();
		---- A 1 A_Lower(20);
		---- A 1 A_Lower(34);
		---- A 1 A_Lower(50);
		wait;
	ready:
		UR5G A 0 A_CheckRevolverHand();
		---- A 0 A_JumpIf(invoker.cylinderopen,"readyopen");
		#### C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,2);
		#### A 0;
		---- A 1 A_WeaponReady(WRF_ALLOWRELOAD|WRF_ALLOWUSER1|WRF_ALLOWUSER2|WRF_ALLOWUSER3|WRF_ALLOWUSER4);
		goto readyend;
	fire:
		#### A 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,"hammertime");
		#### A 2 offset(0,33);
		#### B 3 offset(0,34);
		#### C 3 offset(0,36) A_RotateCylinder();
		#### A 0 offset(0,32) A_Refire("hammertime");
	hammertime:
		#### A 0 A_ClearRefire();
		#### A 0 A_FireRevolver();
		#### A 1 A_FireUragan5();
		goto nope;
	firerecoil:
		#### D 3;
		#### A 1;
		goto nope;
	flash:
		UR5F A 1 bright;
		---- A 0 
		{
		A_AlertMonsters();
		A_Light0();
		A_MuzzleClimb(3.25,-3.9,2.75,-3.0);
		}
		---- A 0 setweaponstate("firerecoil");
		stop;
		UR6G ABCD 0;
		stop;
	altfire:
		---- A 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,"uncock");
		#### A 1 offset(0,33);
		#### B 2 offset(0,34) A_ClearRefire();
		#### B 3 offset(0,36) A_RotateCylinder();
	cocked:
		#### C 0 A_CockHammer();
		---- A 0 A_JumpIf(pressingaltfire(),"nope");
		goto readyend;
	uncock:
		#### C 1 offset(0,38);
		#### B 1 offset(0,34);
		#### A 1 offset(0,36) A_StartSound("weapons/deinocyl",12);
		#### A 0 A_CockHammer(false);
		goto nope;
	reload:
	unload:
		#### C 0 A_JumpIf(!(invoker.weaponstatus[0]&URA5F_COCKED),3);
		#### B 2 offset(0,35)A_CockHammer(false);
		#### A 2 offset(0,33);
		#### A 0 A_JumpIf(player.getpsprite(PSP_WEAPON).sprite!=getspriteindex("UR5GA0"),"openslow");
		UR5G E 3 A_OpenCylinder();
		goto readyopen;
	openslow:
		UR5G A 1 offset(2,39);
		UR5G A 1 offset(4,50);
		UR5G A 1 offset(8,64);
		UR5G A 1 offset(10,86);
		UR5G A 1 offset(12,96);
		UR5G E 1 offset(-7,66);
		UR5G E 1 offset(-6,56);
		UR5G E 1 offset(-2,40);
		UR5G E 1 offset(0,32);
		UR5G E 1 A_OpenCylinder();
		goto readyopen;
	readyopen:
		UR5G F 1 A_ReadyOpen();
		goto readyend;
	open_rotatecylinder:
		UR5G G 2 A_RotateCylinder(pressingzoom());
		UR5G F 2 A_JumpIf(!pressingaltfire(),"readyopen");
		loop;
	open_loadround:
		UR5G F 1 offset(0,36) A_JumpIf(invoker.weaponstatus[URA5S_CYL1]>0,"open_rotatecylinder");
		UR5G F 2 offset(0,34) A_StartSound("weapons/pocket",CHAN_7,0,0.4);
		UR5G F 3 offset(0,38);
		UR5G F 2 offset(0,36);
		UR5G F 1 A_LoadRound();
		UR5G F 4;
		goto open_rotatecylinder;
	open_closecylinder:
		UR5G E 2 A_JumpIf(pressingfire(),"open_fastclose");
		UR5G E 0 A_CloseCylinder();
		UR5G A 0 A_CheckRevolverHand();
		#### A 0 A_JumpIf(player.getpsprite(PSP_WEAPON).sprite==getspriteindex("UR5GA0"),"nope");
		UR5G E 1 offset(0,32);
		UR5G E 1 offset(-2,40);
		UR5G E 1 offset(-6,56);
		UR5G E 1 offset(-7,66);
		UR5G A 1 offset(12,96);
		UR5G A 1 offset(10,86);
		UR5G A 1 offset(8,64);
		UR5G A 1 offset(4,50);
		UR5G A 1 offset(2,39);
		goto nope;
	open_fastclose:
		UR5G E 2;
		UR6G A 0{
			A_CloseCylinder();
			invoker.wronghand=(Wads.CheckNumForName("id",0)!=1);
			A_CheckRevolverHand();
		}goto nope;
	open_dumpcylinder:
		UR5G F 3 A_HitExtractor();
		goto readyopen;
	open_dumpcylinder_all:
		UR5G F 1 offset(0,34);
		UR5G F 1 offset(0,42);
		UR5G F 1 offset(0,54);
		UR5G F 1 offset(0,68);
		TNT1 A 6 A_ExtractAll();
		UR5G F 1 offset(0,68);
		UR5G F 1 offset(0,54);
		UR5G F 1 offset(0,42);
		UR5G F 1 offset(0,34);
		goto readyopen;

	user1:
	user2:
	swappistols:
		---- A 0 A_SwapHandguns();
		#### D 0 A_JumpIf(player.getpsprite(PSP_WEAPON).sprite==getspriteindex("UR6GA0"),"swappistols2");
	swappistols1:
		TNT1 A 0 A_Overlay(1025,"raiseright");
		TNT1 A 0 A_Overlay(1026,"lowerleft");
		TNT1 A 5;
		UR6G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,"nope");
		UR6G A 0;
		goto nope;
	swappistols2:
		TNT1 A 0 A_Overlay(1025,"raiseleft");
		TNT1 A 0 A_Overlay(1026,"lowerright");
		TNT1 A 5;
		UR5G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,"nope");
		UR5G A 0;
		goto nope;
	lowerleft:
		UR5G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,2);
		UR5G A 0;
		---- A 1 offset(6,38);
		---- A 1 offset(12,48);
		UR5G D 1 offset(20,60);
		UR5G D 1 offset(34,76);
		UR5G D 1 offset(50,86);
		stop;
	lowerright:
		UR6G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,2);
		UR6G A 0;
		---- A 1 offset(-6,38);
		---- A 1 offset(-12,48);
		UR6G D 1 offset(-20,60);
		UR6G D 1 offset(-34,76);
		UR6G D 1 offset(-50,86);
		stop;
	raiseleft:
		UR5G D 1 offset(50,86);
		UR5G D 1 offset(34,76);
		UR5G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,2);
		UR5G A 0;
		---- A 1 offset(20,60);
		---- A 1 offset(12,48);
		---- A 1 offset(6,38);
		stop;
	raiseright:
		UR6G D 1 offset(-50,86);
		UR6G D 1 offset(-34,76);
		UR6G C 0 A_JumpIf(invoker.weaponstatus[0]&URA5F_COCKED,2);
		UR6G A 0;
		---- A 1 offset(-20,60);
		---- A 1 offset(-12,48);
		---- A 1 offset(-6,38);
		stop;
	whyareyousmiling:
		#### D 1 offset(0,38);
		#### D 1 offset(0,48);
		#### D 1 offset(0,60);
		TNT1 A 7;
		UR5G A 0{
			invoker.wronghand=!invoker.wronghand;
			A_CheckRevolverHand();
		}
		#### D 1 offset(0,60);
		#### D 1 offset(0,48);
		#### D 1 offset(0,38);
		goto nope;
	}
}

enum Uragan5Stats{
	//chamber 1 is the shooty one
	URA5S_CYL1=1,
	URA5S_CYL2=2,
	URA5S_CYL3=3,
	URA5S_CYL4=4,
	URA5S_CYL5=5,
	URA5S_OVRCYL=12,

	//odd means spent
	URA5S_12GAUGESPENT=1,
	URA5S_12GAUGE=2,

	URA5F_LEFTHANDED=1,
	URA5F_COCKED=2,
}
/*
a memory of the past

class HDBullet00b_uragan5:HDBullet00b{
	default{
		speed 695;
		pushfactor 0.95;
	}
}
*/
