// ------------------------------------------------------------
// Heckler & Mok Close Range Offense Weapon System
// ------------------------------------------------------------

class HD_CAWSGUN:HDShotgun{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "H&M CROWS"
		//$Sprite "FALPA0"

		-hdweapon.fitsinbackpack
		obituary "%o was the cause, and %k's death was the effect.";
		weapon.selectionorder 10;
		weapon.slotpriority 1.125;
		weapon.slotnumber 3;
		weapon.kickback 30;
		weapon.bobrangex 0.3;
		weapon.bobrangey 0.9;
		//weapon.bobspeed 2.5;
		scale 0.65;
		inventory.pickupmessage "You got the Automatic Shotgun! Time to take out the trash!";
		hdweapon.barrelsize 27,1,2;
		tag "$TAG_CAWS";
		hdweapon.refid HDLD_CAWSGUN;
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse){return GetSpareWeaponRegular(newowner,reverse);}
	override double gunmass(){
		return 10+weaponstatus[CAWSG_MAG]*0.1;
	}
	override double weaponbulk(){
		int mg=weaponstatus[CAWSG_MAG];
		if(mg<0)return 112;
		else return (112+ENC_CAWS_MAG_LOADED)+mg*ENC_SHELLLOADED;
		
	}

	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HDShellAmmo"))owner.A_DropInventory("HDShellAmmo",amt*10);
			else {owner.A_DropInventory("HD_CAWSMag",amt);}
		}
	}
	
	override string,double getpickupsprite(){
		return "CWSP"..((weaponstatus[CAWSG_MAG]<0)?"B":"A").."0",1.;
	}
		override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel == 1){
			
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HD_CAWSMag")));
			if(nextmagloaded>=10){
				sb.drawimage("CAWSNORM",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM);
			}else if(nextmagloaded<1){
				sb.drawimage("CAWSEMPTY",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.);
			}else sb.drawbar(
				"CAWSNORM","CAWSGREY",
				nextmagloaded,10,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			
			sb.drawnum(hpl.countinv("HD_CAWSMag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		sb.drawwepcounter(hdw.weaponstatus[CAWSG_AUTO],
			-26,-12,"RBRSA3A7","STFULAUT"
		);
		
		sb.drawwepnum(hdw.weaponstatus[CAWSG_MAG],10);

		if(hdw.weaponstatus[HUNTS_CHAMBER]>1){
			sb.drawrect(-24,-14,5,3);
			sb.drawrect(-18,-14,2,3);
		}
		else if(hdw.weaponstatus[HUNTS_CHAMBER]>0){
			sb.drawrect(-18,-14,2,3);
		}
		
	}
	
	//shell

	static double FireShell(actor caller){
		double spread=5.;
		double speedfactor=1.2;

		double shotpower=getshotpower();
		spread*=shotpower;
		speedfactor*=shotpower;
		HDBulletActor.FireBullet(caller,"HDB_wad");
		let p=HDBulletActor.FireBullet(caller,"HDB_00",
		spread:spread,speedfactor:speedfactor,amount:10
		);
		caller.A_StartSound("weapons/cawsshot",CHAN_WEAPON,CHANF_OVERLAP,pitch:1.0);
		distantnoise.make(p,"world/shotgunfar");
		return shotpower;
	}
	
	
	//slug
	
	static double FireSlug(actor caller){
		double spread=2.;
		double speedfactor=1.2;

		double shotpower=getshotpower();
		spread*=shotpower;
		speedfactor*=shotpower;
		HDBulletActor.FireBullet(caller,"HDB_wad");
		let p=HDBulletActor.FireBullet(caller,"HDB_SLUG",
			spread:spread,speedfactor:1.2
		);
		distantnoise.make(p,"world/shotgunfar");
		caller.A_StartSound("weapons/cawsshot",CHAN_WEAPON,CHANF_OVERLAP,pitch:1.05);
		return shotpower;
	}

	action void A_FireCROWS(){
		double shotpower=invoker.weaponstatus[0]&CAWSF_SLUG?invoker.FireSlug(self):invoker.FireShell(self);
		
		if (invoker.weaponstatus[0]&CAWSF_SLUG){invoker.weaponstatus[CAWSG_FIREDSLUG]=1;}
		
		vector2 shotrecoil=(randompick(-1,1)*1.1,-3.1);
		shotrecoil*=shotpower;
		A_MuzzleClimb(0,0,shotrecoil.x,shotrecoil.y,randompick(-1,1)*shotpower,-0.3*shotpower);
		invoker.shotpower=shotpower;
	}
	
	action void A_Chamber(bool unloadonly=false){
		//A_StartSound("weapons/libchamber",8,CHANF_OVERLAP);
		actor shlll=null;
		if(invoker.weaponstatus[CAWSG_CHAMBER]==1){
			shlll=A_EjectCasing(
				invoker.weaponstatus[CAWSG_FIREDSLUG]==1?"HDSpentSlug":"HDSpentShell",-1,
				(frandom(0.3,0.6),frandom(-8.7,-9.2),frandom(0,0.5)),
				(0,0,-3)
			);
			invoker.weaponstatus[CAWSG_FIREDSLUG]=0;
			shlll.vel+=vel;
			shlll.A_StartSound(shlll.bouncesound,volume:0.4);
		}else if(invoker.weaponstatus[CAWSG_CHAMBER]==2){
			double fc=max(pitch*0.01,5);
			double cosp=cos(pitch);
			[cosp,shlll]=A_SpawnItemEx(
				invoker.weaponstatus[0]&CAWSF_SLUG?"HDFumblingSlug":"HDFumblingShell",
				cosp*12,0,height-8-sin(pitch)*12,
				cosp*fc,0.2*randompick(-1,1),-sin(pitch)*fc,
				0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			shlll.vel+=vel;
			shlll.A_StartSound(shlll.bouncesound,volume:0.4);
		}
		if(!unloadonly && invoker.weaponstatus[CAWSG_MAG]>0){
			invoker.weaponstatus[CAWSG_CHAMBER]=2;
			if(HD_CAWSMag.CheckSlug(invoker.weaponstatus[CAWSG_MAG],invoker.weaponstatus[CAWSG_SLUGS])){
				invoker.weaponstatus[0]|=CAWSF_SLUG;
				invoker.weaponstatus[CAWSG_SLUGS]--;
			}
			invoker.weaponstatus[CAWSG_MAG]--;
		}else{
			invoker.weaponstatus[0]&=~CAWSF_SLUG;
			invoker.weaponstatus[CAWSG_CHAMBER]=0;
			if(shlll!=null)shlll.vel=vel+(cos(angle),sin(angle),-2);
		}
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_ALTFIRE.."  Unjam\n"
		..WEPHELP_RELOAD.."  Reload mag\n"
		//..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload chamber\n"
		..WEPHELP_FIREMODE.."  Semi/Auto\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		float scaledyoffset=41.9;

		{
		vector2 bobb=bob*1.25;
		//bobb.y=clamp(bobb.y,-8,8);
		
				sb.drawimage(
					"ACR_TOP",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
					scale:(1.0,1.0)
				);
			if(scopeview){
				double degree=7.5;
		
				int scaledwidth=57;
				int cx,cy,cw,ch;
				[cx,cy,cw,ch]=screen.GetClipRect();
				sb.SetClipRect(
					-28+bob.x,13+bob.y,scaledwidth,scaledwidth,
					sb.DI_SCREEN_CENTER
				);
				
				sb.fill(color(255,0,0,0),
					bob.x-30,scaledyoffset+bob.y-30,
					60,60,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
				);
		
				texman.setcameratotexture(hpc,"HDXCAM_ZM66",degree);
				let cam  = texman.CheckForTexture("HDXCAM_ZM66",TexMan.Type_Any);
				sb.DrawCircle(cam,(0,scaledyoffset)+bob*3,.075,usePixelRatio:true);
				
				//sb.drawimage(
				//	"scophole",(0,scaledyoffset-5.1)+bob*3,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
				//	scale:(0.81,0.81)
				//);
					sb.drawimage(
						"CAWS_ST1",(0,scaledyoffset)+bob*degree,
						sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
						scale:(0.8,0.8)
					);
				
				sb.SetClipRect(cx,cy,cw,ch);
				sb.drawimage(
					"CAWS_ST0",(0,scaledyoffset)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
					scale:(1.0,1.0)
				);
			}
		}
	}
	
	states{
	select0:
		//CWSG A 0 A_Overlay(2,"droop");
		CWSG A 0;
		goto select0bfg;
	deselect0:
		CWSG A 0;
		goto deselect0big;
		
	droop:
		TNT1 A 1{
			if(pitch<frandom(5,8)&&(!gunbraced())){
				if(countinv("IsMoving")>2 && invoker.weaponstatus[CAWSG_MAG]>-1 && countinv("PowerStrength")<1){    
					A_MuzzleClimb(frandom(-0.1,0.1),
						frandom(0.1,clamp(1-pitch,0.03,0.4)));
				}
			}
		}loop;
		
	ready:
		CWSG A 1{
			A_SetCrosshair(21);
			A_WeaponReady(WRF_ALL);
		}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HD_CAWSMag");
		goto ready;
	altfire:
	althold:
		goto nope;
	hold:
		CWSG A 0{
			if(
				//full auto
				invoker.weaponstatus[CAWSG_AUTO]==2
			)setweaponstate("fire2");
			else if(
				//burst
				invoker.weaponstatus[CAWSG_AUTO]<1
			)setweaponstate("nope");
		}goto fire;
	user2:
	firemode:
		CWSG A 1			{
			int aut=invoker.weaponstatus[CAWSG_AUTO];
			if(aut>=0){
				invoker.weaponstatus[CAWSG_AUTO]=aut==0?1:0;
			}
		}goto nope;
		
	fire:
		CWSG A 3;
	fire2:
		CWSG A 1 offset(0,33){
			if(invoker.weaponstatus[CAWSG_CHAMBER]==2){
				A_GunFlash();
			}else{
				setweaponstate("nope");
			}
		}
		#### B 1 offset(0,36){
				A_StartSound("weapons/cawsboltfwd",CHAN_6,volume:0.2);
			if(
				invoker.shotpower>CAWS_MINSHOTPOWER
			)A_Chamber();
		}
		#### C 1 offset(0,34);
		#### A 1 offset(0,33);
		#### A 2 offset(0,32);
		#### A 0 offset(0,32){
			if(invoker.weaponstatus[CAWSG_AUTO]==1)A_ReFire("fire2");
			A_WeaponReady(WRF_NOFIRE);
		}
		goto nope;
		
	altfire:
		#### A 3 {if(invoker.weaponstatus[CAWSG_MAG]>0)setweaponstate("chamber_manual");}
		goto nope;
	whoops:
		#### C 1 offset(0,36);
		#### A 0 offset(0,34) {if(invoker.weaponstatus[0]&CAWSF_LOWROF)A_SetTics(2);}
		#### A 1 offset(0,33);
		goto nope;
	flash:
		CWSF A 0{
			//HDBulletActor.FireBullet(self,
			//	invoker.weaponstatus[0]&CAWSF_SLUG?"HDB_776r":"HDB_776"
			//);
			A_FireCROWS();
			A_AlertMonsters();
			invoker.weaponstatus[CAWSG_CHAMBER]=1;
			invoker.weaponstatus[0]&=~CAWSF_SLUG;
		}
		CWSF # 0{
			HDFlashAlpha(random(32,64));
			A_Light1();
			A_ZoomRecoil(0.97);
		}
		CWSF AB 1 Bright HDFlashAlpha(random(32,64));
		goto lightdone;
	
	//the

	chamber_manual:
		CWSG A 1 offset(-1,34){
			if(
				invoker.weaponstatus[CAWSG_CHAMBER]==2
				||invoker.weaponstatus[CAWSG_MAG]<1
			)setweaponstate("nope");
		}
		#### A 2 offset(-2,36);
		#### C 3 offset(-3,38) {A_Chamber();A_StartSound("weapons/cawsboltback",CHAN_6,volume:0.6);}
		#### B 4 offset(-4,39);
		#### B 5 offset(-5,38);
		#### C 2 offset(-2,36) A_StartSound("weapons/cawsboltfwd",CHAN_6,volume:0.8);
		#### A 1 offset(0,34);
		goto NOPE;

	unloadchamber:
		CWSG C 1 offset(-1,34){
			if(
				invoker.weaponstatus[CAWSG_CHAMBER]<1
			)setweaponstate("nope");
		}
		#### A 2 offset(-2,36);
		#### C 2 offset(-3,38) {A_Chamber(true);A_StartSound("weapons/cawsboltback",CHAN_6,volume:0.6);}
		#### B 4 offset(-4,39);
		#### B 5 offset(-5,38);
		#### C 2 offset(-2,36) A_StartSound("weapons/cawsboltfwd",CHAN_6,volume:0.8);
		#### A 1 offset(0,34);
		goto NOPE;


	loadchamber:
		CWSG A 0 A_JumpIf(invoker.weaponstatus[CAWSG_CHAMBER]>0,"nope");
		#### A 0 A_JumpIf(
			!countinv("HDShellAmmo")
			&&!countinv("HDSlugAmmo")
		,"nope");
		#### A 1 offset(0,34) A_StartSound("weapons/pocket",9);
		#### A 2 offset(2,36);
		#### C 4 offset(5,40);
		#### C 4 offset(6,42);
		#### B 8 offset(7,44);
		#### B 8 offset(6,43);
		#### B 10 offset(4,39){
			class<inventory> rndtp="HDShellAmmo";
			if(!countinv(rndtp))rndtp="HDSlugAmmo";

			if(countinv(rndtp)){
				A_TakeInventory(rndtp,1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[CAWSG_CHAMBER]=2;

				if(rndtp=="HDSlugAmmo")invoker.weaponstatus[0]|=CAWSF_SLUG;
				else invoker.weaponstatus[0]&=~CAWSF_SLUG;

				A_StartSound("weapons/libchamber2",8);
				A_StartSound("weapons/libchamber2a",8,CHANF_OVERLAP,0.7);
			}else A_SetTics(4);
		}
		#### B 7 offset(5,37);
		#### C 1 offset(2,36);
		#### A 1 offset(0,34);
		goto readyend;

	user4:
	unload:
		CWSG A 0{
			invoker.weaponstatus[0]|=CAWSF_JUSTUNLOAD;
			if(
				invoker.weaponstatus[CAWSG_MAG]>=0
			)setweaponstate("unmag");
			else if(invoker.weaponstatus[CAWSG_CHAMBER]>0)setweaponstate("unloadchamber");
		}goto nope;
	reload:
		CWSG A 0{
			int inmag=invoker.weaponstatus[CAWSG_MAG];
			bool nomags=HDMagAmmo.NothingLoaded(self,"HD_CAWSMag");
			bool haverounds=countinv("HDShellAmmo")||countinv("HDSlugAmmo");
			invoker.weaponstatus[0]&=~CAWSF_JUSTUNLOAD;

			//no point reloading
			if(
				inmag>=10
				||(
					//no mags to load and can't directly load chamber
					nomags
					&&(
						!haverounds
						||inmag>=0
						||invoker.weaponstatus[CAWSG_CHAMBER]>0
					)
				)
			)return resolvestate("nope");

			//no mag, empty chamber, have loose rounds
			if(
				inmag<0
				&&invoker.weaponstatus[CAWSG_CHAMBER]<1
				&&haverounds
				&&(
					pressinguse()
					||nomags
				)
			)return resolvestate("loadchamber");

			if(
				invoker.weaponstatus[CAWSG_MAG]>0  
			){
				//if full mag and unchambered, chamber
				if(
					invoker.weaponstatus[CAWSG_MAG]>=10  
					&&invoker.weaponstatus[CAWSG_CHAMBER]!=2
				){
					return resolvestate("chamber_manual");
				}				
			}
			return resolvestate("unmag");
		}

	unmag:
		CWSG A 1 offset(0,34);
		#### A 1 offset(2,36);
		#### C 1 offset(4,40);
		#### B 2 offset(8,42){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound("weapons/rifleclick2",8);
		}
		#### B 4 offset(14,46){
			A_MuzzleClimb(-frandom(0.4,0.8),frandom(0.4,1.4));
			A_StartSound ("weapons/cawsmagout",8,CHANF_OVERLAP);
		}
		#### B 0{
			int magamt=invoker.weaponstatus[CAWSG_MAG];
			if(magamt<0){setweaponstate("magout");return;}

			if(magamt>0){
				int fullets=clamp(10-invoker.weaponstatus[CAWSG_SLUGS],0,magamt);
				magamt+=fullets*100;
			}

			invoker.weaponstatus[CAWSG_MAG]=-1;
			invoker.weaponstatus[CAWSG_SLUGS]=0;
			if(
				!PressingReload()
				&&!PressingUnload()
			){
				HDMagAmmo.SpawnMag(self,"HD_CAWSMag",magamt);
				setweaponstate("magout");
			}else{
				HDMagAmmo.GiveMag(self,"HD_CAWSMag",magamt);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		CWSG C 7 offset(12,52)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		#### C 0 A_StartSound("weapons/pocket",9);
		#### C 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		#### C 0{
		}goto magout;
	magout:
		#### C 4{
			invoker.weaponstatus[CAWSG_MAG]=-1;
			invoker.weaponstatus[CAWSG_SLUGS]=0;
			if(invoker.weaponstatus[0]&CAWSF_JUSTUNLOAD)setweaponstate("reloaddone");
		}goto loadmag;


	loadmag:
		CWSG C 0 A_StartSound("weapons/pocket",9);
		#### ## 7 offset(14,54)A_MuzzleClimb(frandom(-0.2,0.4),frandom(-0.2,0.8));
		#### # 6 offset(12,52){
			let mmm=hdmagammo(findinventory("HD_CAWSMag"));
			if(mmm){
				int roundraw=mmm.TakeMag(true);
				int roundcount=roundraw%100;
				int reccount=roundcount-(roundraw/100);

				invoker.weaponstatus[CAWSG_SLUGS]=reccount;
				invoker.weaponstatus[CAWSG_MAG]=roundcount;

				A_StartSound("weapons/cawsmagin",8,CHANF_OVERLAP);
			}
		}
		#### B 2 offset(8,46) A_StartSound("weapons/rifleclick2",8,CHANF_OVERLAP);
		goto reloaddone;

	reloaddone:
		CWSG C 1 offset (4,40);
		#### B 1 offset (2,34);
		goto chamber_manual;

	spawn:
		CWSP AB -1 nodelay{
			if(invoker.weaponstatus[CAWSG_MAG]<0){frame=1;}
		}
	}
	override void initializewepstats(bool idfa){
		weaponspecial = 1337;
		//weaponstatus[0]=0;
		weaponstatus[CAWSG_MAG]=10;
		weaponstatus[CAWSG_SLUGS]=0;
		weaponstatus[CAWSG_FIREDSLUG]=0;
		weaponstatus[CAWSG_CHAMBER]=2;
		
		if(!idfa)weaponstatus[CAWSG_AUTO]=0;
	}
}
enum HDCAWSstatus{
	CAWSF_JUSTUNLOAD=1,
	CAWSF_LOWROF=8, 
	CAWSF_SLUG=4096,

	CAWSG_FLAGS=0,
	CAWSG_MAG=1, //-1 unmagged
	CAWSG_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	CAWSG_AUTO=3, //0 semi, 1 burst, 2 auto
	CAWSG_SLUGS=4,
	CAWSG_FIREDSLUG=5,
}
