// ------------------------------------------------------------
// Kharon
// ------------------------------------------------------------

class HDKharonPuff:HDBulletPuff{
	default{
		stamina 5;scale 1;
		hdbulletpuff.scarechance 5;
	}
	override void postbeginplay(){
		super.postbeginplay();
		if(max(abs(pos.x),abs(pos.y),abs(pos.z))>=32768){destroy();return;}
		if(!random(0,scarechance)){
			actor fff=spawn("idledummy",pos,ALLOW_REPLACE);
			fff.stamina=random(60,120);
			hdmobai.frighten(fff,256);
		}
		//A_StartSound("misc/bullethit",0,0,0.5*stamina*stamina);
		A_StartSound("weapons/kharonwall",CHAN_7,0,1.02*stamina*stamina);
		A_ChangeVelocity(-0.4,0,frandom(0.1,0.4),CVF_RELATIVE);
		trymove(pos.xy+vel.xy,false);
		int stm=stamina;
		// this doesn't actually do anything
		//fadeafter=frandom(0,1);
		scale*=frandom(0.9,1.1);
		for(int i=0;i<stamina;i++){
			A_SpawnParticle("white",
				SPF_RELATIVE,70,frandom(4,20)*getdefaultbytype((class<actor>)(missilename)).scale.x,0,
				frandom(-3,3),frandom(-3,3),frandom(0,4),
				frandom(-0.4,0.4)*stm,frandom(-0.4,0.4)*stm,frandom(0.4,1.2)*stm,
				frandom(-0.1,0.1),frandom(-0.1,0.1),-1.
			);

//			actor ch=spawn(missilename,self.pos,ALLOW_REPLACE);
//			ch.vel=self.vel+(random(-stm,stm),random(-stm,stm),random(-2,12));
		}
	}
	states{
	spawn:
		TNT1 A 1;
		stop;
	}
}

class HDKharonSpark:Actor
{
	Default
	{
		+NOCLIP
		+ROLLSPRITE
		+ROLLCENTER
		+FORCEXYBILLBOARD
		+NOGRAVITY
		+ALLOWPARTICLES
		+RANDOMIZE
		+ZDOOMTRANS
		Mass 1;
		Radius 1;
		Height 1;
		scale 0.9;
	}
	States
	{
	Spawn:
		TNT1 A 1 A_StartSound("misc/bullethit");
		KRP0 ABC 1 Bright;
	Melee:
		TNT1 A 1;
		Stop;
	}
}

class HDKharonSparkL:HDKharonSpark
{
	States
	{
	Spawn:
		TNT1 A 1 nodelay A_SetRoll(roll+7);
		KRP0 ABC 1 Bright;
		stop;
	}
}

class HDKharonSparkR:HDKharonSpark
{
	States
	{
	Spawn:
		TNT1 A 1 nodelay A_SetRoll(roll-7);
		KRP0 ABC 1 Bright;
		stop;
	}
}

class HDKharonSparkV:HDKharonSpark
{
	States
	{
	Spawn:
		TNT1 A 1 nodelay A_SetRoll(roll+60);
		KRP0 ABC 1 Bright;
		stop;
	}
}

class HDKharon:HD_PB_UnarmedWeapon{
	int targettimer;
	int targethealth;
	int targetspawnhealth;
	bool flicked;
	bool washolding;
	
	bool swung;
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Fire Axe"
		//$Sprite "FAXPA0"
		+WEAPON.MELEEWEAPON +WEAPON.NOALERT +WEAPON.NO_AUTO_SWITCH
		+hdweapon.fitsinbackpack
		//-hdweapon.dontnull
		-weapon.cheatnotweapon
		-nointeraction
		-inventory.untossable
		+forcepain
		+forceXYbillboard
		+rollsprite
		+rollcenter
		inventory.pickupmessage "You got the Kharon! That's some fine demon steel!";
		obituary "%o got sliced and diced by %k.";
		attacksound "weapons/kharonwall";
		weapon.selectionorder 200;
		weapon.slotpriority 0.75;
		weapon.kickback 15;
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.6;
		weapon.bobrangex 0.2;
		weapon.bobrangey 0.5;
		weapon.slotnumber 1;
		DamageFunction (random(40,45));
		scale 0.75;
		tag "$TAG_KHARON";
		hdweapon.refid HDLD_KHARON;
		//hdweapon.barrelsize 21,3,1;
	}
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse);}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		let ww=HDKharon(hdw);
		if(ww.targethealth)sb.drawwepnum(ww.targethealth,ww.targetspawnhealth);
	}
	
	//for throwing a weapon
	override inventory CreateTossable(int amt){
		let onr=hdplayerpawn(owner);
		bool throw=(
			onr
			&&onr.player
			&&onr.player.cmd.buttons&BT_ZOOM
		);
		bool isreadyweapon=onr&&onr.player&&onr.player.readyweapon==self;
		if(!isreadyweapon)throw=false;
		let thrown=super.createtossable(amt);
		if(!thrown)return null;
		let newwep=GetSpareWeapon(onr,doselect:isreadyweapon);
		hdweapon(thrown).bjustchucked=true;
		thrown.target=onr;
		thrown.lastenemy=onr;
		if(throw){
			thrown.bmissile=true;
			thrown.bBOUNCEONWALLS=true;
			thrown.bBOUNCEONFLOORS=true;
			thrown.bALLOWBOUNCEONACTORS=true;
			thrown.bBOUNCEAUTOOFF=true;
		}else{
			thrown.bmissile=false;
			thrown.bBOUNCEONWALLS=false;
			thrown.bBOUNCEONFLOORS=false;
			thrown.bALLOWBOUNCEONACTORS=false;
			thrown.bBOUNCEAUTOOFF=false;
		}
		return thrown;
	}
	//an override is needed because DropInventory will undo anything done in CreateTossable
	double throwvel;
	override void OnDrop(Actor dropper){
		if(bjustchucked&&target){
			double cp=cos(target.pitch);
			if(bmissile){
				vel=target.vel+
					(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))
					*min(20,800/weaponbulk())
					*(hdplayerpawn(target)?hdplayerpawn(target).strength:1.)
				;
			}else vel=target.vel+(cp*(cos(target.angle),sin(target.angle)),-sin(target.pitch))*4;
			throwvel=vel dot vel;
			bjustchucked=false;
		}

		//copypasted from HDPickup
		if(dropper){
			setz(dropper.pos.z+dropper.height*0.8);
			if(!bmissile){
				double dp=max(dropper.pitch-6,-90);
				vel=dropper.vel+(
					cos(dp)*(cos(dropper.angle),sin(dropper.angle)),
					-sin(dp)
				)*3;
			}
			HDBackpack.ForceUpdate(dropper);
		}
	}
	
	override string,double getpickupsprite(){return "KRDRA0",1.;}
	
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Light Swing\n"
		..WEPHELP_ALTFIRE.."   Heavy Swing\n"
		..WEPHELP_RELOAD.."   Sheath/Withdraw Attack\n"
		..WEPHELP_UNLOAD.."   Throw\n"
		//..WEPHELP_ZOOM.."+"..WEPHELP_DROP.."   Drop misc. items\n"
		;
	}
	
	override void DoEffect(){
		super.DoEffect();
		if(targettimer<70)targettimer++;else{
			tracer=null;
			targettimer=0;
			targethealth=0;
		}
	}
	action void HDPunchKharon(double dmg, int pb_angle=0, int pb_rotation=0,
							int pb_pitch=0,class<Actor> pb_pufftype="HDKharonSpark"){
		flinetracedata punchline;
		bool punchy=linetrace(
			angle+pb_angle,75,pitch+pb_pitch,
			TRF_NOSKY,
			offsetz:height-12,
			data:punchline
		);
		
		//actual puff effect if the shot connects
		/*LineAttack(angle+pb_angle,pb_range,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")>PBZERK_COOLOFF?"WallChunker":"WallChunker",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);
			
		LineAttack(angle+pb_angle,pb_range,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			countinv("HDZerk")>PBZERK_COOLOFF?"HDSmokeChunk":"BulletPuffSmall",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);*/
		
		LineAttack(angle+pb_angle,75,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			pb_pufftype,
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
		);
		
		//pb_pufftype.roll=45;
		
		LineAttack(angle+pb_angle,75,pitch+pb_pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			"HDKharonPuff",
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12
			
		);
		
		//setweaponstate("IGOTEM",5);

		if(!punchline.hitactor){
			HDF.Give(self,"WallChunkAmmo",1);
			return;
		}
		actor punchee=punchline.hitactor;

		//charge!
		if(invoker.flicked)dmg*=1.5;
		else dmg+=HDMath.TowardsEachOther(self,punchee)*2;

		//come in swinging
		let onr=hdplayerpawn(self);
		if(onr){
			int iy=max(abs(player.cmd.pitch),abs(player.cmd.yaw));
			if(iy>0)iy*=100;
			else if(iy<0)iy*=200;
			dmg+=min(abs(iy),dmg*2);

			//need to be well grounded
			if(floorz<pos.z)dmg*=0.5;
		}

		//shit happens
		//dmg*=frandom(0.85,1.5);
		HDBleedingWound.inflict(punchee,int(dmg*frandom(0.85,1.5)),8);


		//other effects
		if(
			onr
			&&!punchee.bdontthrust
			&&(
				punchee.mass<200
				||(
					punchee.radius*2<punchee.height
					&& punchline.hitlocation.z>punchee.pos.z+punchee.height*0.6
				)
			)
		){
			double iyaw=player.cmd.yaw*(65535./360.);
			if(abs(iyaw)>(0.5)){
				punchee.A_SetAngle(punchee.angle-iyaw*100,SPF_INTERPOLATE);
			}
			double ipitch=player.cmd.pitch*(65535./360.);
			if(abs(ipitch)>(0.5*65535/360)){
				punchee.A_SetPitch(punchee.angle+ipitch*100,SPF_INTERPOLATE);
			}
		}
		//headshot lol
		if(
			!punchee.bnopain
			&&punchee.health>0
			&&!(punchee is "HDBarrel")
			&&punchline.hitlocation.z>punchee.pos.z+punchee.height*0.75
		){
			if(hd_debug)A_Log("HEAD SHOT");
			punchee.InStateSequence(curstate,resolvestate("falldown"));
			dmg*=frandom(1.8,2.1);
		}

		if(hd_debug){
			string pch="";
			if(punchee.player)pch=punchee.player.getusername();
				else pch=punchee.getclassname();
			A_Log(string.format("Hit %s for %i damage!",pch,dmg));
		}
		
		
		//hit sound
		if(punchee.bnoblood)
		{
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/kharonwall",CHAN_BODY,0,1.25);
		}
		else 
		{
		punchee.A_StartSound("weapons/kharonflesh",CHAN_BODY,0,0.5);
		if(dmg*2>punchee.health)punchee.A_StartSound("weapons/kharonflesh",CHAN_7,0,1);
		//if(dmg*2>punchee.health)punchee.A_StartSound("weapons/kharonsplat",CHAN_6,0,1);
		}
		
		hdmobbase.forcepain(punchee);
		punchee.InStateSequence(curstate,resolvestate("falldown"));
		//punchee.InStateSequence(curstate,resolvestate("falldown"));
		
		if(punchee.health>0)punchee.damagemobj(self,self,int(dmg),"SmallArms3");
		//else HDF.Give(punchee,"SawGib",dmg*0.2);
		
		LineAttack(angle,70,pitch,punchline.hitline?(countinv("HDZerk")>PBZERK_COOLOFF?random(50,120):random(5,15)):0,"none",
			pb_pufftype,
			flags:LAF_NORANDOMPUFFZ|LAF_OVERRIDEZ,
			offsetz:height-12);

		if(!punchee)invoker.targethealth=0;else{
			invoker.targethealth=punchee.health;
			invoker.targetspawnhealth=punchee.spawnhealth();
			invoker.targettimer=0;
		}
	}
	
	override double weaponbulk(){
		return 85;
	}
	override double gunmass(){
		return 11;
	}
	
	states{
	select0:
		TNT1 A 3 {invoker.weaponstatus[KHARON_SHEATHED]=1;}
		KRN4 A 0 A_JumpIf(pressingfire(),"swingfromsheath");
		KRN4 V 0{
		if(invoker.weaponstatus[KHARON_SHEATHED]==1){
				setweaponstate("select0small");
				return;
			}
		}
		KRN5 A 0;
		goto select0small;
	deselect0:
	sheath_deselect:
		KRN4 P 0{
		if(invoker.weaponstatus[KHARON_SHEATHED]==1){
				setweaponstate("deselect_s");
				return;
			}
		}
		KRN4 PONMLKJIHGFEDCBA 2;
		//KRN4 QRSTUV 2;
		TNT1 A 0 {invoker.weaponstatus[KHARON_SHEATHED]=1;}
	deselectfull:
		KRN4 A 0;
		goto deselect0small;
	deselect_s:
		KRN4 V 0;
		goto deselect0small;
	firemode:
		KRN5 A 1;
		goto nope;
	ready:
		TNT1 A 0;
		TNT1 A 0
		{
		if(invoker.weaponstatus[KHARON_SHEATHED]==0){
				setweaponstate("fullready");
				return;
			}
		}
	    goto readysheathed;
	unsheath_fr:
		KRN4 UTSRQ 2;
	unsheath:
		TNT1 A 0 {invoker.weaponstatus[KHARON_SHEATHED]=0;}
		KRN4 ABCDEGIJKLMNOP 2;
	fullready:
		KRN5 A 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	readysheathed:
		KRN4 V 1{
			if(invoker.washolding&&pressingfire()){
				setweaponstate("nope");
				return;
			}
			A_WeaponReady(WRF_ALL|WRF_NOSECONDARY);
			invoker.flicked=false;
			invoker.washolding=false;
		}goto readyend;
	reload:
		TNT1 A 0
		{
		if(invoker.weaponstatus[KHARON_SHEATHED]==1){
				setweaponstate("unsheath_fr");
				return;
			}
		}
		KRN4 PONMLKJIHGFEDCBA 2;
		---- A 0 {invoker.weaponstatus[KHARON_SHEATHED]=1;}
		KRN4 QRSTU 2;
		goto readyend;
	fire:
		KRN5 A 0
		{
		if(invoker.weaponstatus[KHARON_SHEATHED]==1){
				setweaponstate("sheathstrike");
				return;
			}
		}
		KRN5 BCD 2;
	swing1:
		KRN3 A 0 A_StartSound("weapons/kharonswing",CHAN_7);
		KRN1 A 1;
		KRN1 B 1 HDPunchKharon(15,-12,pb_pitch:-2,pb_pufftype:"HDKharonSparkL");
		KRN1 C 1
		{
			HDPunchKharon(30,pb_pufftype:"HDKharonSparkL");
			//if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=1;
		}
		KRN1 D 1 HDPunchKharon(15,12,pb_pitch:2,pb_pufftype:"HDKharonSparkL");
		KRN1 EF 1;
		TNT1 A 7;
		#### A 1 A_JumpIf(pressingfire(),"swing2");
		goto recoverswing;
	swing2:
		KRN3 A 0 A_StartSound("weapons/kharonswing",CHAN_7);
		KRN2 A 1;
		KRN2 B 1 HDPunchKharon(15,12,pb_pitch:-2,pb_pufftype:"HDKharonSparkR");
		KRN2 C 1
		{
			HDPunchKharon(30,pb_pufftype:"HDKharonSparkR");
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=1;
		}
		KRN2 D 1 HDPunchKharon(15,-12,pb_pitch:2,pb_pufftype:"HDKharonSparkR");
		KRN2 EF 1;
		TNT1 A 7;
		#### A 1 A_JumpIf(pressingfire(),"swing1");
		goto recoverswing;
	sheathstrike:
		KRN4 WX 2;
		KRN7 ABCD 2;
	SSHold:
		KRN7 D 1; //A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		#### A 0 A_JumpIf(pressingreload(),"SSCancel");
		#### A 0 A_JumpIf(pressingfire(),"SSHold");
		TNT1 A 0 A_ReFire("SSHold");
	goto swingfromsheath;
	SSCancel:
		KRN7 CBA 2;
		KRN4 XWVVVV 2;
		goto readyend;
	swingfromsheath:
		KRN7 EF 2;
		KRN3 A 0 A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		TNT1 A 0 {invoker.weaponstatus[KHARON_SHEATHED]=0;}
		KRN3 A 0 A_StartSound("weapons/kharonswing",CHAN_7);
		KRN6 AB 1;
		KRN6 C 1 HDPunchKharon(25,7,0,10,"HDKharonSparkV");
		KRN6 D 1 
		{
			HDPunchKharon(45,0,0,0,"HDKharonSparkV");
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=3;
		}
		KRN6 E 1 HDPunchKharon(25,-7,0,-10,"HDKharonSparkV");
		KRN6 F 1;
		TNT1 A 17;
		#### A 0 A_JumpIf(pressingfire(),"swing1");
		goto recoverswing;
	altfire:
	althold:
		TNT1 A 0;
		KRN5 BCD 2;
	startfire:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswingstart");
		KRN3 A 0 A_StartSound("weapons/pocket",CHAN_6);
		KRN3 FEDCBA 2;
		KRN3 C 0 A_WeaponBusy;
		goto holdswing;
	zerkswingstart:
		KRN3 A 0 A_StartSound("weapons/pocket",CHAN_6);
		KRN3 FEDCBA 1;
		KRN3 C 0 A_WeaponBusy;
		goto holdswing;
	holdswing:
		KRN3 A 1; //A_WeaponReady(WRF_NOFIRE|WRF_NOSWITCH);
		#### A 0 A_JumpIf(pressingreload(),"SwingWithdraw");
		#### A 0 A_JumpIf(pressingfire(),"thrustattack");
		TNT1 A 0 A_ReFire("holdswing");
	goto swinghard;
	thrustattack:
		KRN8 AC 1;
		KRN8 E 1 HDPunchKharon(15,0,0,2,"HDKharonSparkV");
		KRN8 D 2;
		KRN8 CBA 3;
	goto holdswing;
	swingreturn:
		TNT1 A 3;
		TNT1 A 2 A_StartSound("weapons/pocket",CHAN_6);
	goto holdswing;
	swinghard:
		#### A 0 A_JumpIfInventory("HDZerk",PBZERK_COOLOFF,"zerkswinghard");
		KRN3 BDF 1;
		TNT1 A 3;
		#### A 0 A_Overlay(5,"hitcheck",false);
		KRN3 A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=3;
			A_StartSound("weapons/kharonswing",CHAN_7);
		}
		KRN3 GH 1;
		KRN3 IJKL 1;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 AAAAAA 1 A_JumpIf(pressingfire(),"swing2");
		#### A 0 A_JumpIf(pressingfire(),"swing2");
		#### A 0 A_JumpIf(pressingaltfire(),"startfire");
		TNT1 A 0 A_ReFire("startfire");
		FAX0 A 0 A_WeaponBusy;
		goto recoverswing;
	recoverswing:
		TNT1 A 2;
		KRN5 DCB 2;
		#### A 0 A_JumpIf(pressingfire(),"nope");
		goto readyend;
	
	SwingWithdraw:
		KRN3 ABCDEF 2;
		KRN5 A 2;
		goto nope;
		
	zerkswinghard:
		KRN3 BDF 1;
		TNT1 A 1;
		#### A 0 A_Overlay(5,"hitcheckzerk",false);
		KRN3 A 0 
		{
			if(hdplayerpawn(self))hdplayerpawn(self).fatigue+=3;
			A_StartSound("weapons/kharonswing",CHAN_7);
		}
		KRN3 GH 1;
		KRN3 IJKL 1;
		//#### A 0 A_JumpIf(pressingaltfire(),"altfire");
		TNT1 A 3;
		#### A 0 A_JumpIf(pressingfire(),"swingreturn");
		#### A 0 A_JumpIf(pressingaltfire(),"startfire");
		TNT1 A 0 A_ReFire("startfire");
		FAX0 A 0 A_WeaponBusy;
		goto recoverswing;
	
	unload:
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
		goto nope;
		
	hitcheck:
		TNT1 A 1 HDPunchKharon(20,-20);
		TNT1 A 1
		{
		HDPunchKharon(25,10);
		HDPunchKharon(30);
		HDPunchKharon(25,-10);
		}
		TNT1 A 1 HDPunchKharon(20,20);
	stop;
	
	hitcheckzerk:
		TNT1 AAA 1 HDPunchKharon(invoker.flicked?340:300);
	stop;
	
	IGOTEM:TNT1 A 1;stop;
		
	spawn:
		KRDR A -1; //faxp
		stop;
	}
}

enum kharonstatus{
	KHARON_JUSTUNLOAD=1,

	KHARON_STATUS=0,
	KHARON_SHEATHED=1,
	//KHARON_REAL=2, imitation version of the one from demonsteele
};
