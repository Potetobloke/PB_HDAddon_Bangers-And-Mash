// ------------------------------------------------------------
// socom my dick lmao
// ------------------------------------------------------------

class HDMK23SOCOM:HDHandgun{
	default{
		+hdweapon.fitsinbackpack
		+hdweapon.reverseguninertia
		scale 0.63;
		weapon.selectionorder 50;
		weapon.slotnumber 2;
		weapon.slotpriority 2;
		weapon.kickback 35;
		weapon.bobrangex 0.2; //a little more sway than the standard pistol
		weapon.bobrangey 0.65;
		weapon.bobspeed 2.5;
		weapon.bobstyle "normal";
		//obituary "%o got capped by %k's pea shooter.";
		obituary "%o was silently taken out.";
		inventory.pickupmessage "You got the spec-ops handgun!";
		tag "$TAG_MK23";
		hdweapon.refid HDLD_MK23SOCOM_WEAPON;
		hdweapon.barrelsize 21,0.5,0.5;
		
	}
	override double weaponbulk(){
		int mgg=weaponstatus[MK23S_MAG];
		return 58+(mgg<0?0:(ENC_MK23_MAG_LOADED+mgg*ENC_MK23_45ACP_LOADED));
	}
	override double gunmass(){
		int mgg=weaponstatus[MK23S_MAG];
		return 8.75+(mgg<0?0:0.08*(mgg+1)); //assuming the base HD pistol is 0.97 kg
	}
	override void failedpickupunload(){
		failedpickupunloadmag(MK23S_MAG,"HDMK23SOCOM_Mag");
	}
	override string,double getpickupsprite(bool usespare){
		string spr;
		int wep0=GetSpareWeaponValue(0,usespare);
		if(GetSpareWeaponValue(MK23S_CHAMBER,usespare)<1){
			if(wep0&MK23S_MAG)spr="D";
			else spr="B";
		}else{
			if(wep0&MK23S_MAG)spr="C";
			else spr="A";
		}
		return "M2SP"..spr.."0",1.;
	}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			int nextmagloaded=sb.GetNextLoadMag(hdmagammo(hpl.findinventory("HDMK23SOCOM_Mag")));
			if(nextmagloaded>=12){
				sb.drawimage("MK2MNORM",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,scale:(1,1));
			}else if(nextmagloaded<1){
				sb.drawimage("MK2MEMPTY",(-46,-3),sb.DI_SCREEN_CENTER_BOTTOM,alpha:nextmagloaded?0.6:1.,scale:(1,1));
			}else sb.drawbar(
				"MK2MNORM","MK2MGREY",
				nextmagloaded,12,
				(-46,-3),-1,
				sb.SHADER_VERT,sb.DI_SCREEN_CENTER_BOTTOM
			);
			sb.drawnum(hpl.countinv("HDMK23SOCOM_Mag"),-43,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		
		sb.drawstring(
			sb.pnewsmallfont,((weaponstatus[MK23S_LASER]>0)?"ON":"OFF"),
			(-32,-14),sb.DI_TEXT_ALIGN_CENTER|sb.DI_TRANSLATABLE|sb.DI_SCREEN_CENTER_BOTTOM,
			Font.CR_WHITE,scale:(0.4,0.4)
		);
		
		sb.drawwepnum(hdw.weaponstatus[MK23S_MAG],12);
		if(hdw.weaponstatus[MK23S_CHAMBER]==2)sb.drawrect(-19,-11,3,1);
		
	}
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_FIREMODE.."  Toggle laser pointer\n"
		..WEPHELP_ALTRELOAD.."  Quick-Swap (if available)\n"
		..WEPHELP_RELOAD.."  Reload mag\n"
		..WEPHELP_USE.."+"..WEPHELP_RELOAD.."  Reload chamber\n"
		..WEPHELP_MAGMANAGER
		..WEPHELP_UNLOADUNLOAD
		;
	}
	
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		vector2 scc;
		vector2 bobb=bob*1.35;

		//if slide is pushed back, throw sights off line
		if(hpl.player.getpsprite(PSP_WEAPON).frame>=2){
			sb.SetClipRect(
				-10+bob.x,-10+bob.y,20,19,
				sb.DI_SCREEN_CENTER
			);
			bobb.y-=2;
			scc=(0.9,0.8);
		}else{
			sb.SetClipRect(
				-8+bob.x,-9+bob.y,16,15,
				sb.DI_SCREEN_CENTER
			);
			scc=(0.7,0.6);
		}
		sb.drawimage(
			"MK23_FS",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			scale:scc
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"MK23_RS",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,
			scale:scc
		);
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			if(owner.countinv("HD45ACPAmmo"))owner.A_DropInventory("HD45ACPAmmo",amt*12);
			else owner.A_DropInventory("HDMK23SOCOM_Mag",amt);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_TakeInventory("HD45ACPAmmo");
		ForceOneBasicAmmo("HDMK23SOCOM_Mag");
	}
	action void A_CheckPistolHand(){
		if(invoker.wronghand)player.getpsprite(PSP_WEAPON).sprite=getspriteindex("MK22A0");
	}
	
	
	action void A_LaserSight()
    {
        double zOffset = (height/2+HDPlayerPawn(self).attackZOffset) * player.crouchFactor;
		vector3 shootpos=(0,0,zoffset);
		let hdp=hdplayerpawn(self);
		if(hdp){
			shootpos=hdp.gunpos;
		}
        FLineTraceData trace;
		double rtt=0.03*trace.distance;
		double saf=1.;
		
				linetrace(
					hdp.gunangle,HDCONST_ONEMETRE*2500,hdp.gunpitch,
					flags:TRF_NOSKY|TRF_ABSOFFSET,
					offsetz:shootpos.z,
					offsetforward:shootpos.x,
					offsetside:shootpos.y,
					data:trace
				);
		
        Vector3 laserOfs = trace.hitLocation-pos;
		laserOfs-=trace.hitdir;
		
				if(
			trace.hittype==Trace_HitNone
			||(
				trace.hitline&&(
					trace.hitline.special==Line_Horizon
					||(
						trace.linepart==2
						&&trace.hitsector.gettexture(0)==skyflatnum
					)||(
						trace.linepart==1
						&&trace.hitline.sidedef[1]
						&&hdmath.oppositesector(trace.hitline,trace.hitsector).gettexture(0)==skyflatnum
					)
				)
			)
		)return;
		
		a_spawnparticle(
						"ff 00 00",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:1,frandom(3.1,3.5),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:1
					);
		a_spawnparticle(
						"ff 00 00",SPF_FULLBRIGHT|SPF_RELVEL|SPF_NOTIMEFREEZE,
						lifetime:4,frandom(4.1,4.9),0,
						laserOfs.x,
						laserOfs.y,
						laserOfs.z,
						startalphaf:0.5,0.1,-1.5
					);
    }
	
	states{
	
	laserpointer:
		TNT1 A 1{
			if(invoker.weaponstatus[MK23S_LASER]>0){
				A_LaserSight();
			}
		}loop;
	
	select0:
		MK21 A 0{
			if(!countinv("NulledWeapon"))invoker.wronghand=false;
			A_TakeInventory("NulledWeapon");
			A_CheckPistolHand();
		}
		#### A 0 A_JumpIf(invoker.weaponstatus[MK23S_CHAMBER]>0,2);
		#### F 0;
		---- A 1 A_Raise();
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(30);
		---- A 1 A_Raise(24);
		---- A 1 A_Raise(18);
		wait;
	deselect0:
		MK21 A 0 {A_CheckPistolHand();A_ClearOverlays(3,3);}
		#### A 0 A_JumpIf(invoker.weaponstatus[MK23S_CHAMBER]>0,2);
		#### F 0;
		---- AAA 1 A_Lower();
		---- A 1 A_Lower(18);
		---- A 1 A_Lower(24);
		---- A 1 A_Lower(30);
		wait;
	
	user2:
	firemode:
		#### # 1 offset(0,33);
		#### # 2 offset(-2,35)
		{
			A_StartSound("weapons/rifleclick2",CHAN_6,CHANF_OVERLAP,0.1);
			int lam=invoker.weaponstatus[MK23S_LASER];
			if(lam>=1)invoker.weaponstatus[MK23S_LASER]=0;
			else if(lam<0)invoker.weaponstatus[MK23S_LASER]=0;
			else invoker.weaponstatus[MK23S_LASER]++;
		}
		#### # 1 offset(-1,33);
		goto nope;

	ready:
		MK21 A 0 A_CheckPistolHand();
		#### A 0 A_JumpIf(invoker.weaponstatus[MK23S_CHAMBER]>0,2);
		#### F 0;
		#### # 0 {A_SetCrosshair(21);A_Overlay(3,"laserpointer");}
		#### # 1 {A_WeaponReady(WRF_ALL);}
		goto readyend;
	user3:
		---- A 0 A_MagManager("HDMK23SOCOM_Mag");
		goto ready;
	altfire:
		---- A 0{
			invoker.weaponstatus[0]&=~MK23F_JUSTUNLOAD;
			if(
				invoker.weaponstatus[MK23S_CHAMBER]!=2
				&&invoker.weaponstatus[MK23S_MAG]>0
			)setweaponstate("chamber_manual");
		}goto nope;
		//goto chamber_manual.cont;
	chamber_manual:
		---- A 0 A_JumpIf(
			!(invoker.weaponstatus[0]&MK23F_JUSTUNLOAD)
			&&(
				invoker.weaponstatus[MK23S_CHAMBER]==2
				||invoker.weaponstatus[MK23S_MAG]<1
			)
			,"nope"
		);
	chamber_manual.cont:
		#### D 0 A_JumpIf(invoker.weaponstatus[MK23S_CHAMBER]>0,2);
		#### G 0;
		#### # 1 offset(1,34);
		#### # 1 offset(2,49);
		#### # 2 offset(4,50);
		#### C 4 offset(5,51){
			A_MuzzleClimb(frandom(0.4,0.5),-frandom(0.6,0.8));
			A_StartSound("weapons/mk23chamber1",8);
			int psch=invoker.weaponstatus[MK23S_CHAMBER];
			invoker.weaponstatus[MK23S_CHAMBER]=0;
			if(psch==2){
				A_EjectCasing("HD45ACPAmmo",
					frandom(-1,2),
					(-frandom(2,3),frandom(0,0.2),frandom(0.4,0.5)),
					(-2,0,-1)
				);
			}else if(psch==1){
				A_EjectCasing("HDSpent45ACP",
					-frandom(-1,2),
					(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1)),
					(-2,0,-1)
				);
			}
			if(invoker.weaponstatus[MK23S_MAG]>0){
				invoker.weaponstatus[MK23S_CHAMBER]=2;
				invoker.weaponstatus[MK23S_MAG]--;
			}
		}
		#### D 0 {
		
		
			if(invoker.weaponstatus[MK23S_MAG]<1&&invoker.weaponstatus[MK23S_CHAMBER]==0){
				setweaponstate("chamber_emptied");
			}
		}
		#### D 3 offset(3,35) A_StartSound("weapons/mk23chamber2",8);
		#### D 3 offset(2,32);
		#### DEA 2 offset(1,33);
		goto nope;
	chamber_emptied:
		#### G 3 offset(3,45);
		#### G 3 offset(2,37);
		#### H 3 offset(1,32);
		#### F 2 offset(0,33);
		goto nope;
	althold:
	hold:
		goto nope;
	fire:
		---- A 0{
			invoker.weaponstatus[0]&=~MK23F_JUSTUNLOAD;
			if(invoker.weaponstatus[MK23S_CHAMBER]==2)setweaponstate("shoot");
			else if(invoker.weaponstatus[MK23S_MAG]>0)setweaponstate("chamber_manual");
		}goto nope;
	shoot:
		#### B 1{
			if(invoker.weaponstatus[MK23S_CHAMBER]==2)A_GunFlash();
		}
		#### C 1{
			if(hdplayerpawn(self)){
				hdplayerpawn(self).gunbraced=false;
			}
			A_MuzzleClimb(
				-frandom(0.8,1.),-frandom(1.2,1.6),
				frandom(0.4,0.5),frandom(0.6,0.8)
			);
			
			//A_StartSound("weapons/mk23chamber1",8,volume:0.5);
			A_EjectCasing("HDSpent45ACP"
				,frandom(-1,2),
				(frandom(0.4,0.7),-frandom(6,7),frandom(0.8,1))
			);
			invoker.weaponstatus[MK23S_CHAMBER]=0;
		}
		#### C 0{
			if(invoker.weaponstatus[MK23S_MAG]<1){
				A_StartSound("weapons/mk23dry",8,CHANF_OVERLAP,1.1);
				setweaponstate("emptyfinish");
			}
		}
		#### D 1{
			A_WeaponReady(WRF_NOFIRE);
			A_StartSound("weapons/mk23dry",8,CHANF_OVERLAP,0.5,pitch:0.9);
			invoker.weaponstatus[MK23S_CHAMBER]=2;
			invoker.weaponstatus[MK23S_MAG]--;
		}
		#### E 0;
		goto nope;
	emptyfinish:
		#### G 1 {A_WeaponReady(WRF_NOFIRE);}
		#### H 0;
		goto nope;
	flash:
		MK2F A 0;
		---- A 0{
			//HDFlashAlpha(64);
			//A_Light1();
			let bbb=HDBulletActor.FireBullet(self,"HDB_45ACP",spread:0.95,speedfactor:frandom(1.00,1.02));
			if(
				frandom(12,ceilingz-floorz)<bbb.speed*0.1
			)A_AlertMonsters(100);
			
			invoker.weaponstatus[MK23S_CHAMBER]=1;
			A_ZoomRecoil(0.995);
			A_MuzzleClimb(-frandom(0.6,1.3),-frandom(0.6,1.7));
		}
		---- A 0 A_StartSound("weapons/mk23shot",CHAN_WEAPON);
		//---- A 0 A_Light0();
		stop;
	unload:
		---- A 0{
			invoker.weaponstatus[0]|=MK23F_JUSTUNLOAD;
			if(invoker.weaponstatus[MK23S_MAG]>=0)setweaponstate("unmag");
		}goto chamber_manual;
	loadchamber:
		---- A 0 A_JumpIf(invoker.weaponstatus[MK23S_CHAMBER]>0,"nope");
		---- A 1 offset(0,36) A_StartSound("weapons/pocket",9);
		---- A 1 offset(2,40);
		---- A 1 offset(2,50);
		---- A 1 offset(3,60);
		---- A 2 offset(5,90);
		---- A 2 offset(7,80);
		---- A 2 offset(10,90);
		#### C 2 offset(8,96);
		#### C 3 offset(6,88){
			if(countinv("HD45ACPAmmo")){
				A_TakeInventory("HD45ACPAmmo",1,TIF_NOTAKEINFINITE);
				invoker.weaponstatus[MK23S_CHAMBER]=2;
				A_StartSound("weapons/pischamber1",8);
			}
		}
		#### D 2 offset(5,76) A_StartSound("weapons/mk23chamber2",7);
		#### D 1 offset(4,64);
		#### D 1 offset(3,56);
		#### D 1 offset(2,48);
		#### E 2 offset(1,38);
		#### A 3 offset(0,34);
		goto readyend;
	reload:
		---- A 0{
			invoker.weaponstatus[0]&=~MK23F_JUSTUNLOAD;
			bool nomags=HDMagAmmo.NothingLoaded(self,"HDMK23SOCOM_Mag");
			if(invoker.weaponstatus[MK23S_MAG]>=12)setweaponstate("nope");
			else if(
				invoker.weaponstatus[MK23S_MAG]<1
				&&(
					pressinguse()
					||nomags
				)
			){
				if(
					countinv("HD45ACPAmmo")
				)setweaponstate("loadchamber");
				else setweaponstate("nope");
			}else if(nomags)setweaponstate("nope");
		}goto unmag;
	unmag:
		---- A 1 offset(0,34) A_SetCrosshair(21);
		---- A 1 offset(1,38);
		---- A 2 offset(2,42);
		---- A 3 offset(3,48) {
				if(invoker.weaponstatus[MK23S_MAG]>-1)
				A_StartSound("weapons/mk23magout",8,CHANF_OVERLAP);
				else A_StartSound("weapons/rifleclick2",CHAN_7,volume:0.25);
			}
		
		---- A 0{
			int pmg=invoker.weaponstatus[MK23S_MAG];
			invoker.weaponstatus[MK23S_MAG]=-1;
			if(pmg<0)setweaponstate("magout");
			else if(
				(!PressingUnload()&&!PressingReload())
				||A_JumpIfInventory("HDMK23SOCOM_Mag",0,"null")
			){
				HDMagAmmo.SpawnMag(self,"HDMK23SOCOM_Mag",pmg);
				setweaponstate("magout");
			}
			else{
				HDMagAmmo.GiveMag(self,"HDMK23SOCOM_Mag",pmg);
				A_StartSound("weapons/pocket",9);
				setweaponstate("pocketmag");
			}
		}
	pocketmag:
		---- AAA 5 offset(3,50) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		goto magout;
	magout:
		---- A 0{
			if(invoker.weaponstatus[0]&MK23F_JUSTUNLOAD)setweaponstate("reloadend");
			else setweaponstate("loadmag");
		}

	loadmag:
		---- A 4 offset(4,49) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 0 A_StartSound("weapons/pocket",9);
		---- A 5 offset(3,47) A_MuzzleClimb(frandom(-0.2,0.8),frandom(-0.2,0.4));
		---- A 3;
		---- A 0{
			let mmm=hdmagammo(findinventory("HDMK23SOCOM_Mag"));
			if(mmm){
				invoker.weaponstatus[MK23S_MAG]=mmm.TakeMag(true);
				A_StartSound("weapons/mk23magclick",8);
			}
		}
		goto reloadend;

	reloadend:
		---- A 2 offset(3,44);
		---- A 2 offset(2,42);
		---- A 2 offset(2,38);
		---- A 1 offset(1,33);
		---- A 0 A_JumpIf(!(invoker.weaponstatus[0]&MK23F_JUSTUNLOAD),"chamber_manual");
		goto nope;

	user1:
	altreload:
	swappistols:
		---- A 0 {A_SwapHandguns();A_ClearOverlays(3,3);}
		---- A 0{
			bool id=(Wads.CheckNumForName("id",0)!=-1);
			bool offhand=invoker.wronghand;
			bool righthanded=(id!=offhand);
			if(righthanded){
				A_Overlay(1025,"raiseright");
				A_Overlay(1026,"lowerleft");
			}else{
				A_Overlay(1025,"raiseleft");
				A_Overlay(1026,"lowerright");
			}
		}
		TNT1 A 5;
		MK21 A 0 A_CheckPistolHand();
		goto nope;
	lowerleft:
		MK21 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		MK22 A 0;
		#### B 1 offset(-6,38);
		#### B 1 offset(-12,48);
		#### B 1 offset(-20,60);
		#### B 1 offset(-34,76);
		#### B 1 offset(-50,86);
		stop;
	lowerright:
		MK22 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		MK21 A 0;
		#### B 1 offset(6,38);
		#### B 1 offset(12,48);
		#### B 1 offset(20,60);
		#### B 1 offset(34,76);
		#### B 1 offset(50,86);
		stop;
	raiseleft:
		MK21 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		MK22 A 0;
		#### A 1 offset(-50,86);
		#### A 1 offset(-34,76);
		#### A 1 offset(-20,60);
		#### A 1 offset(-12,48);
		#### A 1 offset(-6,38);
		stop;
	raiseright:
		MK22 A 0 A_JumpIf(Wads.CheckNumForName("id",0)!=-1,2);
		MK21 A 0;
		#### A 1 offset(50,86);
		#### A 1 offset(34,76);
		#### A 1 offset(20,60);
		#### A 1 offset(12,48);
		#### A 1 offset(6,38);
		stop;
	whyareyousmiling:
		#### B 1 offset(0,48);
		#### B 1 offset(0,60);
		#### B 1 offset(0,76);
		TNT1 A 7;
		MK21 A 0{
			invoker.wronghand=!invoker.wronghand;
			A_CheckPistolHand();
		}
		#### B 1 offset(0,76);
		#### B 1 offset(0,60);
		#### B 1 offset(0,48);
		goto nope;


	spawn:
		m2sp ABCD -1 nodelay{
			if(invoker.weaponstatus[MK23S_CHAMBER]<1){
				if(invoker.weaponstatus[MK23S_MAG]<0)frame=3;
				else frame=1;
			}else{
				if(invoker.weaponstatus[MK23S_MAG]<0)frame=2;
				else frame=0;
			}
		}stop;
	}
	override void initializewepstats(bool idfa){
		weaponstatus[MK23S_MAG]=12;
		weaponstatus[MK23S_CHAMBER]=2;
	}
}
enum mk23socomstatus{
	//MK23F_SELECTFIRE=1,
	MK23F_JUSTUNLOAD=4,

	MK23S_FLAGS=0,
	MK23S_MAG=1,
	MK23S_CHAMBER=2, //0 empty, 1 spent, 2 loaded
	MK23S_LASER=3,
};
