// ------------------------------------------------------------
// "Elephant Gun"
// ------------------------------------------------------------
class HDNitroExpressRifle:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "Mouletta DD-T1"
		//$Sprite "SLAYA0"

		weapon.selectionorder 4;
		weapon.slotnumber 8;
		weapon.kickback 19;
		inventory.pickupmessage "You got the double-barreled rifle!";
		obituary "%o received a massive a bullet from %k.";
		weapon.bobrangex 0.18;
		weapon.bobrangey 0.7;
		scale 0.6;
		hdweapon.barrelsize 40,1,1;
		hdweapon.nicename "Mouletta DD-T1";
		hdweapon.refid HDLD_NITRORIFLE;
	}
	override string getobituary(actor victim,actor inflictor,name mod,bool playerattack){
		bool sausage=true;
		for(int i=0;i<MAXPLAYERS;i++){
			if(playeringame[i]&&(players[i].getgender()!=0)){
				sausage=false;
				break;
			}
		}
		if(
			sausage
			&&inflictor is "HDBullet"
		)return "%o received two massive bullets from %k.";
		return obituary;
	}
	override string,double getpickupsprite(){return "NTRPA0",1.;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage("767A_HUD",(-47,-10),sb.DI_SCREEN_CENTER_BOTTOM);
			sb.drawnum(hpl.countinv("HD767VenatorAmmo"),-46,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		int loffs=-28;int rofs=-16;
		if(hdw.weaponstatus[0]&NITRF_DOUBLE){
			loffs=-24;rofs=-20;
			sb.drawimage("STBURAUT",(-23,-17),sb.DI_SCREEN_CENTER_BOTTOM);
		}
		if(hdw.weaponstatus[NITRO_CHAMBER1]>1){
			sb.drawwepdot(loffs,-10,(3,5));
			sb.drawwepdot(loffs,-7,(3,2));
		}else if(hdw.weaponstatus[NITRO_CHAMBER1]>0){
			sb.drawwepdot(loffs,-7,(3,2));
		}
		if(hdw.weaponstatus[NITRO_CHAMBER2]>1){
			sb.drawwepdot(rofs,-10,(3,5));
			sb.drawwepdot(rofs,-7,(3,2));
		}else if(hdw.weaponstatus[NITRO_CHAMBER2]>0){
			sb.drawwepdot(rofs,-7,(3,2));
		}
	}
	override string gethelptext(){
		return
		WEPHELP_FIRE.."  Shoot Left\n"
		..WEPHELP_ALTFIRE.."  Shoot Right\n"
		..WEPHELP_RELOAD.."  Reload\n"
		..WEPHELP_FIREMODE.."  Hold to force double shot\n"
		..WEPHELP_UNLOADUNLOAD
		;
	}
	override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,12,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*3;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"frntsite",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP,
			alpha:0.9,scale:(0.7,1)
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"dbbaksit",(0,0)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_TOP
		);
	}
	
	int handrounds;
	action void EmptyHand(int amt=-1,bool careful=false){
		if(!amt)return;
		if(amt>0)invoker.handrounds=amt;
		while(invoker.handrounds>0){
			if(careful&&!A_JumpIfInventory("HD767VenatorAmmo",0,"null")){
				invoker.handrounds--;
				HDF.Give(self,"HD767VenatorAmmo",1);
 			}else if(invoker.handrounds>=4){
				invoker.handrounds-=4;
				A_SpawnItemEx("HD767VenatorAmmo",
					cos(pitch)*1,1,height-7-sin(pitch)*1,
					cos(pitch)*cos(angle)*frandom(1,2)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,2)+vel.y,
					-sin(pitch)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}else{
				invoker.handrounds--;
				A_SpawnItemEx("HD767VenatorAmmo",
					cos(pitch)*5,1,height-7-sin(pitch)*5,
					cos(pitch)*cos(angle)*frandom(1,4)+vel.x,
					cos(pitch)*sin(angle)*frandom(1,4)+vel.y,
					-sin(pitch)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
	}
	
	override double gunmass(){
		return 7.5;
	}
	override double weaponbulk(){
		return 110;
	}

	states{
	select0:
		NTRG A 0;
		goto select0small;
	deselect0:
		NTRG A 0;
		goto deselect0small;
	fire:
	altfire:
		#### A 0 A_ClearRefire();
	ready:
		TNT1 A 0; //let the PostBeginPlay handle the presence of the relevant sprite
		NTRG A 0 A_JumpIf(pressingunload()&&(pressinguse()||pressingzoom()),"cannibalize");
		#### A 1{
			if(PressingFireMode()){
				invoker.weaponstatus[0]|=NITRF_DOUBLE;

			int pff=PressingFire()+(PressingAltfire()<<1);
			bool ch1=invoker.weaponstatus[NITRO_CHAMBER1]==2;
			bool ch2=invoker.weaponstatus[NITRO_CHAMBER2]==2;
			if(ch1&&ch2){
				if(pff==3){
					A_Overlay(PSP_FLASH,"flashboth");
					return;
				}
				else if(pff&&invoker.weaponstatus[0]&NITRF_DOUBLE){
					setweaponstate("double");
					return;
				}
			}
			if(ch1&&pff%2)A_Overlay(11,"flashleft");
			else if(ch2&&pff>1)A_Overlay(12,"flashright");
			else A_WeaponReady((WRF_ALL|WRF_NOFIRE)&~WRF_ALLOWUSER2);
		}
		}
		#### A 0 A_WeaponReady();
		goto readyend;
	double:
		#### A 1 offset(0,34);
		#### A 1 offset(0,33);
		#### A 0 A_Overlay(PSP_FLASH,"flashboth");
		goto readyend;

	flashleft:
		SH2F A 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
			A_StartSound("weapons/nitrorifle/fire",6);
			A_ZoomRecoil(0.9);
			invoker.weaponstatus[NITRO_CHAMBER1]=1;

			actor p=spawn("HDBullet767V_L",pos+(0,0,height-6),ALLOW_REPLACE);
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=frandom(-10.,10.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(1.6,-3.9,1.6,-3.9);
		}goto flasheither;
	flashright:
		SH2F B 1 bright{
			A_Light2();
			HDFlashAlpha(64,false,overlayid());
			A_StartSound("weapons/nitrorifle/fire",6);
			A_ZoomRecoil(0.9);
			invoker.weaponstatus[NITRO_CHAMBER2]=1;

			actor p=spawn("HDBullet767V_R",pos+(0,0,height-6),ALLOW_REPLACE);
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=frandom(-10.,10.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(-1.6,-3.9,-1.6,-3.9);
		}goto flasheither;
	flasheither:
		TNT1 A 0 A_AlertMonsters();
		TNT1 A 0 setweaponstate("recoil");
		stop;
	flashboth:
		SH2F C 1 bright{
			A_Light2();
			HDFlashAlpha(128);
			A_StartSound("weapons/nitrorifle/fire",5);
			A_StartSound("weapons/nitrorifle/fire",6);
			A_ZoomRecoil(0.7);
			invoker.weaponstatus[NITRO_CHAMBER1]=1;
			invoker.weaponstatus[NITRO_CHAMBER2]=1;


			actor p=spawn("HDBullet767V_LR",pos+(0,0,height-6),ALLOW_REPLACE);
			p.target=self;p.angle=angle;p.pitch=pitch;
			p.vel+=(
				frandom(-1.,1.),frandom(-1.,1.),frandom(-1.,1.)
			);
			p.speed+=10*frandom(-1.,1.);
			p.vel+=self.vel;
		}
		TNT1 A 1{
			A_Light0();
			A_MuzzleClimb(1.2,-8.,1.2,-8.8);
		}goto flasheither;
	recoil:
		#### B 1;
		goto ready;

	altreload:
		#### A 0{
			if(
				countinv("HD767VenatorAmmo")
				&&(
					invoker.weaponstatus[NITRO_CHAMBER1]<2
					||invoker.weaponstatus[NITRO_CHAMBER2]<2
				)
			)
				invoker.weaponstatus[0]|=NITRF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reload:
		#### A 0{
			if(
				countinv("HD767VenatorAmmo")
				&&(
					invoker.weaponstatus[NITRO_CHAMBER1]<2
					||invoker.weaponstatus[NITRO_CHAMBER2]<2
				)
			)
				invoker.weaponstatus[0]|=NITRF_FROMPOCKETS;
			else setweaponstate("nope");
		}goto reloadstart;
	reloadstart:
	unloadstart:
		#### A 2 offset(0,34) EmptyHand();
		#### A 1 offset(0,40);
		#### B 3 offset(0,46);
		#### B 5 offset(0,47) A_StartSound("weapons/sshoto",CHAN_AUTO);
		#### D 4 offset(0,46) A_MuzzleClimb(
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(0.6,1.2),frandom(0.6,1.2),
			frandom(1.2,2.4),frandom(1.2,2.4)
		);
		#### E 3 offset(0,36){
			//eject whatever is already loaded
			for(int i=0;i<2;i++){
				int chm=invoker.weaponstatus[NITRO_CHAMBER1+i];
				invoker.weaponstatus[NITRO_CHAMBER1+i]=0;
				if(chm>1){
					if(health<90&&countinv("IsMoving"))A_SpawnItemEx("HD767VenatorAmmo",
						cos(pitch)*5,-1,height-7-sin(pitch)*5,
						cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
						cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
						-sin(pitch-45)*random(1,4)+vel.z,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);else A_SpawnItemEx("HD767VenatorAmmo",
						cos(pitch)*5,0,height-7-sin(pitch)*5,
						vel.x,vel.y,vel.z+1,
						0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
					);
				}else if(chm==1)A_SpawnItemEx("HD767VenatorCasing",
					cos(pitch)*5,0,height-7-sin(pitch)*5,
					cos(pitch-45)*cos(angle+random(-2,2))*random(1,4)+vel.x,
					cos(pitch-45)*sin(angle+random(-2,2))*random(1,4)+vel.y,
					-sin(pitch-45)*random(1,4)+vel.z,
					0,SXF_ABSOLUTEMOMENTUM|SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
				);
			}
		}
		#### E 2 offset(1,34);
		#### E 2 offset(2,34);
		#### E 2 offset(4,34);
		#### E 8 offset(0,36){
			if(invoker.weaponstatus[0]&NITRF_UNLOADONLY){
				setweaponstate("unloadend");
				return;
			}

			//play animation to search pockets as appropriate
			if(invoker.weaponstatus[0]&NITRF_FROMPOCKETS)
				A_StartSound("weapons/pocket",CHAN_WEAPON);
				else setweaponstate("reloadnopocket");
		}
		#### E 4 offset(2,35);
		#### E 4 offset(0,35);
		#### E 4 offset(0,34);
	reloadnopocket:
		#### E 5 offset(1,35);
		#### E 2 offset(0,36);
		#### E 2 offset(0,40);
		#### E 1 offset(0,46);
		#### F 2 offset(0,54);

		NTRG G 4{
			//take up to 2 rounds in hand
			int ssh=0;
			if(invoker.weaponstatus[0]&NITRF_FROMPOCKETS){
				ssh=min(2,countinv("HD767VenatorAmmo"));
				if(ssh>0)A_TakeInventory("HD767VenatorAmmo",ssh);
			}

			//if the above leaves you with nothing, abort
			if(ssh<1){
				A_SetTics(0);
				return;
			}

			//transfer from hand to chambers
			ssh--;
			while(ssh>=0){
				invoker.weaponstatus[NITRO_CHAMBER2-ssh]=2;
				ssh--;
			}
		}
		NTRG H 4 A_StartSound("weapons/sshotl",CHAN_WEAPON);
		NTRG B 2 offset(0,46);
		#### D 1 offset(0,42);
		#### C 2 offset(0,42) A_StartSound("weapons/sshotc",CHAN_WEAPON);
		#### B 2;
		goto ready;
	unloadend:
		NTRG H 5 A_StartSound("weapons/sshotl",CHAN_WEAPON);
		NTRG B 2 offset(0,46);
		#### D 1 offset(0,42);
		#### C 2 offset(0,42) A_StartSound("weapons/sshotc",CHAN_WEAPON);
		#### B 2;
		goto ready;

	unload:
		#### A 2 offset(0,34){
			invoker.weaponstatus[0]|=NITRF_UNLOADONLY;
		}goto unloadstart;

	spawn:
		SLAY A -1 nodelay;
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[NITRO_CHAMBER1]=2;
		weaponstatus[NITRO_CHAMBER2]=2;
		handrounds=0;
	}
}
enum nitrostatus{
	NITRF_UNLOADONLY=1,
	NITRF_DOUBLE=2,
	NITRF_FROMPOCKETS=4,

	NITRO_CHAMBER1=1,
	NITRO_CHAMBER2=2,
	NITRO_HEAT1=4,
	NITRO_HEAT2=5,
};
