//Had to redefine this because inheriting from HDGrenadeThrower doesn't work

const HDLD_GRE_TOXGAS="tgg";

const ENC_TOXGASGREN=ENC_ROCKET*1.8;

class HDGasGrenadeThrower:HDWeapon{
	class<inventory> grenadeammotype;
	property ammotype:grenadeammotype;
	class<actor> throwtype;
	property throwtype:throwtype;
	class<actor> spoontype;
	property spoontype:spoontype;
	class<weapon> wiretype;
	property wiretype:wiretype;
	default{
		weapon.selectionorder 1020;
		weapon.slotnumber 0;
		+weapon.no_auto_switch +weapon.noalert +weapon.wimpy_weapon
		+hdweapon.dontdisarm
		+hdweapon.dontnull
		+nointeraction
		weapon.bobstyle "Alpha";
		weapon.bobspeed 2.5;weapon.bobrangex 0.1;weapon.bobrangey 0.5;

		//adding the frag grenade defaults here to prevent needless crashes
		HDGasGrenadeThrower.ammotype "HDGasGrenadeAmmo";
		HDGasGrenadeThrower.throwtype "HDGasGrenadeThrown";
		HDGasGrenadeThrower.spoontype "HDGasGrenadeSpoon";
		HDGasGrenadeThrower.wiretype "TripwireFrag";
	}
	override void DoEffect(){
		if(weaponstatus[0]&FRAGF_SPOONOFF){
			weaponstatus[FRAGS_TIMER]++;
			if(
				owner.health<1
				||weaponstatus[FRAGS_TIMER]>136
			)TossGrenade(true);
		}else if(
			weaponstatus[0]&FRAGF_INHAND
			&&weaponstatus[0]&FRAGF_PINOUT
			&&owner.player.cmd.buttons&BT_ATTACK
			&&owner.player.cmd.buttons&BT_ALTFIRE
			&&!(owner.player.oldbuttons&BT_ALTFIRE)
		){
			StartCooking();
		}
		super.doeffect();
	}
	override string,double getpickupsprite(){return "GGR2A0",0.6;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawimage(
				(weaponstatus[0]&FRAGF_PINOUT)?"GGR2B0":"GGR2A0",
				(-52,-4),sb.DI_SCREEN_CENTER_BOTTOM,scale:(0.6,0.6)
			);
			sb.drawnum(hpl.countinv("HDGasGrenadeAmmo"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM);
		}
		sb.drawwepnum(
			hpl.countinv("HDGasGrenadeAmmo"),
			(HDCONST_MAXPOCKETSPACE/ENC_FRAG)
		);
		sb.drawwepnum(hdw.weaponstatus[FRAGS_FORCE],50,posy:-10,alwaysprecise:true);
		if(!(hdw.weaponstatus[0]&FRAGF_SPOONOFF)){
			sb.drawrect(-21,-19,5,4);
			if(!(hdw.weaponstatus[0]&FRAGF_PINOUT))sb.drawrect(-25,-18,3,2);
		}else{
			int timer=hdw.weaponstatus[FRAGS_TIMER];
			if(timer%3)sb.drawwepnum(140-timer,140,posy:-15,alwaysprecise:true);
		}
	}
	override string gethelptext(){
		if(weaponstatus[0]&FRAGF_SPOONOFF)return
		WEPHELP_FIRE.."  Wind up, release to throw\n(\cxSTOP READING AND DO THIS"..WEPHELP_RGCOL..")";
		return
		WEPHELP_FIRE.."  Pull pin/wind up (release to throw)\n"
		..WEPHELP_ALTFIRE.."  Pull pin, again to drop spoon\n"
		..WEPHELP_RELOAD.."  Abort/Replace pin\n"
		..WEPHELP_ZOOM.."  Start planting tripwire traps"
		;
	}
	override inventory CreateTossable(int amount){
		ReturnHandToOwner();
		owner.A_DropInventory(grenadeammotype,owner.countinv(grenadeammotype));
		owner.A_GiveInventory("HDFist");
		owner.A_SelectWeapon("HDFist");
		return null;
	}
	override void InitializeWepStats(bool idfa){
		//if(idfa)owner.A_SetInventory(grenadeammotype,max(3,owner.countinv(grenadeammotype)));
	}
	override void DropOneAmmo(int amt){
		if(owner){
			amt=clamp(amt,1,10);
			owner.A_DropInventory(grenadeammotype,1);
		}
	}
	override void ForceBasicAmmo(){
		owner.A_SetInventory("HDGasGrenadeAmmo",1);
	}
	//for involuntary dropping
	override void OnPlayerDrop(){
		if(
			weaponstatus[0]&FRAGF_SPOONOFF
			||weaponstatus[0]&FRAGF_PINOUT
		)TossGrenade(true);
	}
	void DropGrenade(){
		if(
			weaponstatus[0]&FRAGF_SPOONOFF
			||weaponstatus[0]&FRAGF_PINOUT
		){
			TossGrenade(true);
		}else{
			bool inhand=weaponstatus[0]&FRAGF_INHAND;
			if(inhand||owner.countinv(grenadeammotype)){
				if(!inhand)A_TakeInventory(grenadeammotype,1);
				A_DropItem(grenadeammotype);
			}
			weaponstatus[0]&=~FRAGF_INHAND;
		}
	}
	//any reset should do this
	action void A_ReturnHandToOwner(){invoker.ReturnHandToOwner();}
	void ReturnHandToOwner(){
		if(!owner)return;
		int wepstat=weaponstatus[0];
		if(wepstat&FRAGF_INHAND){
			if(wepstat&FRAGF_SPOONOFF)TossGrenade(true);
			else{
				if(wepstat&FRAGF_PINOUT){
					owner.A_StartSound("weapons/fragpinout",8);
					weaponstatus[0]&=~FRAGF_PINOUT;
				}
				if(
					owner.A_JumpIfInventory(grenadeammotype,0,"null")
				)owner.A_DropItem(grenadeammotype);
				else HDF.Give(owner,grenadeammotype,1);
			}
		}
		weaponstatus[0]&=~FRAGF_INHAND;
		weaponstatus[FRAGS_FORCE]=0;
		weaponstatus[FRAGS_REALLYPULL]=0;
	}
	vector3 SwingThrow(){
		vector2 iyy=(owner.angle,owner.pitch);
		double cosp=cos(iyy.y);
		vector3 oldpos=(
			cosp*cos(iyy.x),
			cosp*sin(iyy.x),
			sin(iyy.y)
		);
		iyy+=(
				owner.getplayerinput(MODINPUT_YAW),
				owner.getplayerinput(MODINPUT_PITCH)
			)
			*(360./65536.);
		cosp=cos(iyy.y);
		vector3 newpos=(
			cosp*cos(iyy.x),
			cosp*sin(iyy.x),
			sin(iyy.y)
		);
		return newpos-oldpos;
	}
	//because it's tedious to type each time
	action bool NoFrags(){
		return !(invoker.weaponstatus[0]&FRAGF_INHAND)&&!countinv(invoker.grenadeammotype);
	}
	//pull the pin
	action void A_PullPin(){
		invoker.weaponstatus[FRAGS_REALLYPULL]=0;
		invoker.weaponstatus[0]|=(FRAGF_PINOUT|FRAGF_INHAND);
		A_TakeInventory(invoker.grenadeammotype,1,TIF_NOTAKEINFINITE);
		A_StartSound("weapons/fragpinout",8);
	}
	//drop the spoon
	action void A_StartCooking(){
		invoker.StartCooking();
		A_SetHelpText();
	}
	void StartCooking(){
		if(!owner)return;
		bool gbg;actor spn;
		double ptch=owner.pitch;
		double cpp=cos(ptch);double spp=sin(ptch);
		[gbg,spn]=owner.A_SpawnItemEx(spoontype,
			cpp*4,-1,height-6-spp*4,
				cpp*4+vel.x,
				0,
				-sin(pitch)*4+vel.z,
			0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		spn.vel+=owner.vel;
		weaponstatus[0]|=FRAGF_SPOONOFF;
		if(cvar.getcvar("hd_helptext",owner.player).getbool()){
			wepmsg="\cgThe fuze is lit!\n\n\n\n\cgRemember to throw!";
			msgtimer=100;
		}
		owner.A_StartSound("weapons/fragspoonoff",8,attenuation:20);
	}
	//we need to start from the inventory itself so it can go into DoEffect
	action void A_TossGrenade(bool oshit=false){
		invoker.TossGrenade(oshit);
		A_SetHelpText();
	}
	void TossGrenade(bool oshit=false){
		if(!owner)return;
		int garbage;actor ggg;
		double cpp=cos(owner.pitch);
		double spp=sin(owner.pitch);

		//create the spoon
		if(!(weaponstatus[0]&FRAGF_SPOONOFF)){
			[garbage,ggg]=owner.A_SpawnItemEx(
				spoontype,cpp*-4,-3,owner.height-6-spp*-4,
				cpp*3,0,-sin(owner.pitch+random(10,20))*3,
				frandom(33,45),SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
			);
			ggg.vel+=owner.vel;
		}

		//create the grenade
		[garbage,ggg]=owner.A_SpawnItemEx(throwtype,
			0,0,owner.height-6,
			cpp*4,
			0,
			-spp*4,
			0,SXF_NOCHECKPOSITION|SXF_TRANSFERPITCH
		);
		ggg.vel+=owner.vel;

		//force calculation
		double gforce=clamp(weaponstatus[FRAGS_FORCE],4,40+owner.health*0.1);
		if(oshit)gforce=min(gforce,frandom(10,20));
		if(owner.countinv("powerstrength"))gforce*=2;

		let grenade=HDGasGrenadeThrown(ggg);if(!grenade)return;
		grenade.fuze=weaponstatus[FRAGS_TIMER];

		if(owner.player){
			grenade.vel+=SwingThrow()*gforce;
		}
		grenade.a_changevelocity(
			cpp*gforce*0.6,
			0,
			-spp*gforce*0.6,
			CVF_RELATIVE
		);
		weaponstatus[FRAGS_TIMER]=0;
		weaponstatus[FRAGS_FORCE]=0;
		weaponstatus[0]&=~FRAGF_PINOUT;
		weaponstatus[0]&=~FRAGF_SPOONOFF;
		weaponstatus[FRAGS_REALLYPULL]=0;

		weaponstatus[0]&=~FRAGF_INHAND;
		weaponstatus[0]|=FRAGF_JUSTTHREW;
	}
	states{
	select0:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 8{
			if(!countinv("NulledWeapon"))A_SetTics(tics+4);
			A_TakeInventory("NulledWeapon");
			invoker.weaponstatus[FRAGS_REALLYPULL]=0;
			invoker.weaponstatus[FRAGS_FORCE]=0;
		}
		FRGG B 1 A_Raise(32);
		wait;
	selectinstant:
		TNT1 A 0 A_WeaponBusy(false);
	readytodonothing:
		TNT1 A 0 A_JumpIf(pressing(BT_SPEED)||pressingfire()||pressingaltfire()||pressingreload()||pressingzoom(),2);
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		loop;
		TNT1 A 0 A_SelectWeapon("HDFist");
		TNT1 A 1 A_WeaponReady(WRF_NOFIRE);
		wait;
	deselect0:
		---- A 1{
			if(invoker.weaponstatus[0]&FRAGF_PINOUT)A_SetTics(8);
			else if(NoFrags())setweaponstate("deselectinstant");
			invoker.ReturnHandToOwner();
		}
		---- A 1 A_Lower(72);
		wait;
	deselectinstant:
		TNT1 A 0 A_Lower(999);
		wait;
	ready:
		FRGG B 0{
			invoker.weaponstatus[FRAGS_FORCE]=0;
			invoker.weaponstatus[FRAGS_REALLYPULL]=0;
		}
		FRGG B 1 A_WeaponReady(WRF_ALL);
		goto ready3;
	ready3:
		---- A 0{
			invoker.weaponstatus[0]&=~FRAGF_JUSTTHREW;
			A_WeaponBusy(false);
		}goto readyend;

	zoom:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0{
			let wiretype=invoker.wiretype;
			A_GiveInventory(wiretype);
			A_SelectWeapon(wiretype);
			A_WeaponReady(WRF_NOFIRE);
		}goto nope;

	pinout:
		FRGG A 1 A_WeaponReady(WRF_ALLOWRELOAD);
		loop;

	altfire:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_SPOONOFF,"nope");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"startcooking");
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_Refire();
		goto ready;
	althold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_SPOONOFF,"nope");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"nope");
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		goto startpull;
	startpull:
		FRGG B 1{
			if(invoker.weaponstatus[FRAGS_REALLYPULL]>=26)setweaponstate("endpull");
			else invoker.weaponstatus[FRAGS_REALLYPULL]++;
		}
		FRGG B 0 A_Refire();
		goto ready;
	endpull:
		FRGG B 1 offset(0,34);
		FRGG B 1 offset(0,36);
		FRGG B 1 offset(0,38);
		TNT1 A 6;
		TNT1 A 3 A_PullPin();
		TNT1 A 0 A_Refire();
		goto ready;
	startcooking:
		TNT1 A 6 A_StartCooking();
		TNT1 A 0 A_Refire();
		goto ready;
	fire:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIfInventory("PowerStrength",1,3);
		FRGG B 1 offset(0,34);
		FRGG B 1 offset(0,36);
		FRGG B 1 offset(0,38);
		TNT1 A 0 A_Refire();
		goto ready;
	hold:
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_JUSTTHREW,"nope");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"hold2");
		TNT1 A 6 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"hold2");
		TNT1 A 6 A_JumpIfInventory("PowerStrength",1,1);
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 3 A_PullPin();
	hold2:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		FRGG E 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=40,"hold3a");
		FRGG D 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=30,"hold3a");
		FRGG C 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=20,"hold3");
		FRGG B 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=10,"hold3");
		goto hold3;
	hold3a:
		FRGG # 0{
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]++;
		}
	hold3:
		FRGG # 1{
			A_WeaponReady(
				invoker.weaponstatus[0]&FRAGF_SPOONOFF?WRF_NOFIRE:WRF_NOFIRE|WRF_ALLOWRELOAD
			);
			if(invoker.weaponstatus[FRAGS_FORCE]<50)invoker.weaponstatus[FRAGS_FORCE]++;
		}
		TNT1 A 0 A_Refire();
		goto throw;
	throw:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		FRGG A 1 offset(0,34) A_TossGrenade();
		FRGG A 1 offset(0,38);
		FRGG A 1 offset(0,48);
		FRGG A 1 offset(0,52);
		FRGG A 0 A_Refire();
		goto ready;
	reload:
		TNT1 A 0 A_JumpIf(NoFrags(),"selectinstant");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[FRAGS_FORCE]>=1,"pinbackin");
		TNT1 A 0 A_JumpIf(invoker.weaponstatus[0]&FRAGF_PINOUT,"altpinbackin");
		goto ready;
	pinbackin:
		FRGG B 1 offset(0,34) A_ReturnHandToOwner();
		FRGG B 1 offset(0,36);
		FRGG B 1 offset(0,38);
	altpinbackin:
		FRGG A 0 A_JumpIf(invoker.weaponstatus[FRAGS_TIMER]>0,"juststopthrowing");
		TNT1 A 8 A_ReturnHandToOwner();
		TNT1 A 0 A_Refire("nope");
		FRGG B 1 offset(0,38);
		FRGG B 1 offset(0,36);
		FRGG B 1 offset(0,34);
		goto ready;
	juststopthrowing:
		TNT1 A 10;
		FRGG A 0{invoker.weaponstatus[FRAGS_FORCE]=0;}
		TNT1 A 0 A_Refire();
		FRGG B 1 offset(0,38);
		FRGG B 1 offset(0,36);
		FRGG B 1 offset(0,34);
		goto ready;
	spawn:
		TNT1 A 1;
		TNT1 A 0 A_SpawnItemEx(invoker.grenadeammotype,SXF_NOCHECKPOSITION);
		stop;
	}
}

class HDGasGrenadeAmmo:HDAmmo{
	default{
		//$Category "Ammo/Hideous Destructor/"
		//$Title "Frag Grenade"
		//$Sprite "FRAGA0"

		-forcexybillboard
		inventory.icon "GGR2A0";
		inventory.amount 1;
		scale 0.3;
		inventory.maxamount 50;
		inventory.pickupmessage "Picked up a toxic gas grenade.";
		inventory.pickupsound "weapons/pocket";
		tag "Toxic Gas Grenades";
		hdpickup.refid HDLD_GRE_TOXGAS;
		hdpickup.bulk ENC_TOXGASGREN;
	}
	override bool IsUsed(){return true;}
	states{
	spawn:
		GGR2 A -1;stop;
	}
}