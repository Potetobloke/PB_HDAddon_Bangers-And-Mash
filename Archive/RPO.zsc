const HDLD_RPOA="RPO";

class HDRPOA_WEP:HDWeapon{
	default{
		//$Category "Weapons/Hideous Destructor"
		//$Title "RAT-84"
		//$Sprite "RPOPA0"

		//+weapon.wimpy_weapon
		//+hdweapon.reverseguninertia
		+hdweapon.fitsinbackpack
		weapon.selectionorder 2;
		weapon.slotnumber 5;
		weapon.kickback 30;
		weapon.bobrangex 0.21;
		weapon.bobrangey 0.86;
		scale 0.6;
		inventory.pickupmessage "You got the OTRU-92!";
		obituary "%o got horribly burnt and got their guts scattered from %k's Russian missile launcher.";
		hdweapon.barrelsize 30,2.1,2;
		tag "Renov OTRU-92";
		hdweapon.refid HDLD_RPOA;
	}
	override string pickupmessage(){
		if(weaponstatus[1]&RPOS_CHAMBER)return string.format("%s It is used.",super.pickupmessage());
		else return string.format("%s It has a round.",super.pickupmessage());
		return super.pickupmessage();
	}
	
	override bool AddSpareWeapon(actor newowner){return AddSpareWeaponRegular(newowner);}
	override hdweapon GetSpareWeapon(actor newowner,bool reverse,bool doselect){return GetSpareWeaponRegular(newowner,reverse,doselect);}
	override void tick(){
		super.tick();
		drainheat(RPOS_HEAT,6);
	}
	override void postbeginplay(){
		super.postbeginplay();
		}
	override double gunmass(){
		double amt=weaponstatus[RPOS_CHAMBER];
		return 9+amt;
	}
	override double weaponbulk(){
		int rkt=weaponstatus[RPOS_CHAMBER];
		if(rkt<0)return 125;
		else return 125;
	}
	override string,double getpickupsprite(){return "RPOPA0",0.7;}
	override void DrawHUDStuff(HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl){
		if(sb.hudlevel==1){
			sb.drawnum(hpl.countinv("HDRPOA_WEP"),-45,-8,sb.DI_SCREEN_CENTER_BOTTOM,font.CR_BLACK);
		}
		if(hdw.weaponstatus[RPOS_CHAMBER]>1)sb.drawwepdot(-16,-10,(5,3));
	}
	
	action void A_FireRPO(){
		A_StartSound("weapons/grenadeshot",CHAN_WEAPON);
		let ggg=hdrocket_RPO(spawn("HDRocket_RPO",pos+(
				0,0,HDWeapon.GetShootOffset(
					self,invoker.barrellength,
					invoker.barrellength-HDCONST_SHOULDERTORADIUS
				)-2
			),
			ALLOW_REPLACE)
		);
		ggg.angle=angle;ggg.pitch=pitch-0;ggg.target=self;ggg.master=self;
		ggg.primed=true;
		
			double shootangle = angle-180;
		vector3 positionoffset;
        positionoffset += (cos(shootangle) * 5, sin(shootangle) * 5,
        HDWeapon.GetShootOffset(
        self,invoker.barrellength,
        invoker.barrellength-HDCONST_SHOULDERTORADIUS
        )-2);

        let blst=actor(spawn("HD_Backblast",pos+positionoffset,
            ALLOW_REPLACE)
        );
        blst.angle=shootangle;
        blst.pitch=pitch-180;
        blst.target=self;
        blst.master=self;
        blst.vel.xy = (cos(shootangle) * 60, sin(shootangle) * 60);
        blst.vel.z=-sin(pitch)*-60;
	}
	
		override void DrawSightPicture(
		HDStatusBar sb,HDWeapon hdw,HDPlayerPawn hpl,
		bool sightbob,vector2 bob,double fov,bool scopeview,actor hpc,string whichdot
	){
	if(scopeview){
		int cx,cy,cw,ch;
		[cx,cy,cw,ch]=screen.GetClipRect();
		sb.SetClipRect(
			-16+bob.x,-4+bob.y,32,16,
			sb.DI_SCREEN_CENTER
		);
		vector2 bobb=bob*3;
		bobb.y=clamp(bobb.y,-8,8);
		sb.drawimage(
			"LAW_ST02",(0,0)+bobb,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER,
			alpha:0.9
		);
		sb.SetClipRect(cx,cy,cw,ch);
		sb.drawimage(
			"LAW_ST01",(0,-5)+bob,sb.DI_SCREEN_CENTER|sb.DI_ITEM_CENTER
		);
		}
	}
	
	override string gethelptext(){
		return
		WEPHELP_FIRESHOOT
		..WEPHELP_UNLOAD.."   Throw\n"
		;
	}
	
	states{
	select0:
		RPOG A 0;
		goto select0small;
	deselect0:
		RPOG A 0;
		goto deselect0small;
	ready:
		RPOG A 1 A_WeaponReady(WRF_ALL);
		goto readyend;
	fire:
		RPOG A 1 offset(0,34){
			if(invoker.weaponstatus[RPOS_CHAMBER]<2){
				setweaponstate("readyend");
				return;
			}
			A_FireRPO();
			A_GunFlash();
			A_StartSound("weapons/RPOfire",CHAN_WEAPON);
			A_StartSound("weapons/rockignite",CHAN_AUTO);
			A_StartSound("weapons/rockboom",5);
			invoker.weaponstatus[RPOS_CHAMBER]=1;
			invoker.weaponstatus[RPOS_HEAT]+=86;
		}
		RPOG B 2 A_MuzzleClimb(-frandom(0.9,1.),-frandom(1.3,1.6),frandom(0.5,0.6),frandom(0.6,0.8));
		RPOG A 5;
		goto readyend;
	flash:
		TNT1 A 1 bright{
			HDFlashAlpha(0,true);
			A_Light1();
		}
		TNT1 A 2{
			A_ZoomRecoil(0.5);
			A_Light0();
		}
		stop;
	unload:
	---- A 0 A_JumpIfInventory("HDIncapWeapon",1,"Incapped");
	YEET:
		---- A 1
		{
		if(player&&hdweapon(player.readyweapon)){
		 player.cmd.buttons|=BT_ZOOM;
		 DropInventory(player.readyweapon);
		}
		}
		TNT1 A 0;
	spawn:
		RPOP AB -1 nodelay{
			if(invoker.weaponstatus[RPOS_CHAMBER]<2)frame=1;
		}
	}
	override void InitializeWepStats(bool idfa){
		weaponstatus[RPOS_CHAMBER]=2;
		if(!idfa){
			weaponstatus[0]=0;
			weaponstatus[RPOS_HEAT]=0;
		}
	}
}
enum RPOstatus{
	RPOF_JUSTUNLOAD=1,

	RPOS_STATUS=0,
	RPOS_CHAMBER=1,
	RPOS_HEAT=2,
};

class HDRocket_RPO:RocketGrenade{
	default{
		+forcepain
		scale 0.6; woundhealth 2800;
		stamina 9;
		decal "BrontoScorch";
	}
	override void ExplodeSlowMissile(line blockingline,actor blockingobject){
		if(max(abs(skypos.x),abs(skypos.y))>=32768){destroy();return;}
		bmissile=false;
		//bounce
		//nothing here - HEAT will always explode

		//damage
		if(blockingobject){
			int dmgg=random(340,400);
			double dangle=absangle(angle,angleto(blockingobject));
			if(dangle<20){
				dmgg+=random(550,650);
				if(hd_debug)A_Log("CRIT!");
			}else if(dangle<40)dmgg+=random(400,450);
			blockingobject.damagemobj(self,target,dmgg,"thermal");
		}else doordestroyer.destroydoor(self);

		//explosion
		if(!inthesky){
			A_SprayDecal("BrontoScorch",16);
			
			A_SpawnItemEx("HD_Backblast",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4)
			);
			
			A_SpawnItemEx("HD_Backblast",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4)
			);
			
			A_SpawnItemEx("HD_Backblast",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4)
			);
			
			A_SpawnItemEx("HD_Backblast",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4)
			);
			
			A_HDBlast(
				pushradius:1024,pushamount:256,fullpushradius:256,
				fragradius:512*stamina*0.6,fragtype:"HDB_fragRL",
				immolateradius:256,immolateamount:random(50,90),
				immolatechance:256
			);
			actor xpl=spawn("Gyrosploder",self.pos-(0,0,1),ALLOW_REPLACE);
			actor aaa=Spawn("WallChunker",pos,ALLOW_REPLACE);
			xpl=spawn("HDExplosion",pos,ALLOW_REPLACE);aaa.vel.z=2;
			xpl=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa=spawn("HDExplosion",pos,ALLOW_REPLACE);aaa.vel.z=2;
			aaa=spawn("HDExplosion_Long",pos,ALLOW_REPLACE);aaa.vel.z=0;
			aaa.scale.x=4;
			aaa.scale.y=4;
		}else distantnoise.make(self,"world/rocketfar");
		A_SpawnChunks("HDB_frag",180,100,700+50*stamina);

		destroy();return;
	}
	states{
	spawn:
		MISL A 0 nodelay{primed=true;}
		goto spawnrocket;
	spawnrocket:
		---- A 0{
			if(!inthesky){
				brockettrail=true;
				Gunsmoke();
				A_StartSound("weapons/rocklaunch",CHAN_VOICE);
			}
		}
		---- AAA 0{
			actor sss=spawn("HDGunSmoke",pos-vel*0.1+(0,0,-4),ALLOW_REPLACE);
			sss.vel=vel*-0.06+(frandom(-2,2),frandom(-2,2),frandom(-2,2));
		}
	spawnrocket2:
		#### A 1{
			if(self is "HDRocket_RPO")frame=0;
			if(stamina>0){  
				if(!inthesky){
					brockettrail=true;
					actor sss=spawn("HDGunsmoke",pos,ALLOW_REPLACE);
					sss.vel=vel*0.1;
				}else{
					brockettrail=false;
					bgrenadetrail=false;
				}
				A_ChangeVelocity(
					cos(pitch)*250,0,
					sin(-pitch)*250+1,CVF_RELATIVE
				);
				stamina--;
			}
		}
		---- A 0{
			if(primed){
				if(!inthesky)A_StartSound("weapons/rocklaunch",5);
			}else{
				primed=true;
				brockettrail=false;
				if(!inthesky)bgrenadetrail=true;
			}
		}loop;
	Death:
		TNT1 A 0 A_Immolate(null,target,80);
		TNT1 AAAAAAA 0{
			A_SpawnItemEx("HD_Backblast",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4)
			);
			A_SpawnItemEx("WallChunker",
				random(-2,2),random(-2,2),random(-2,2),
				frandom(2,-4),frandom(-2,2),frandom(1,4),0
			);
		}
		TNT1 AAAAAAA 4 A_Explode(5,256,true);
		stop;
	}
}
